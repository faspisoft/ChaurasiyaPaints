using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using Microsoft.Office.Core;
using System.Net.Mail;
using System.Net;
using Excel = Microsoft.Office.Interop.Excel;

namespace faspi
{
    public partial class Report : Form
    {
        DataTable tdt = new DataTable();
        DataTable dt = new DataTable();
        private System.ComponentModel.IContainer components = null;
        string sql;
        string strCombo = "";
        DateTime stdt = new DateTime();
        DateTime endt = new DateTime();
        public string frmptyp;
        public string DecsOfReport;
        public string str = "";
        public static string Pagesize = "";
        MemoryStream ms;
        public static string frmptyp2;
        public static string DecsOfReport2;
        public static string str2 = "";
        string AccName = "";
        string gGodownName = "";
        string ggrade = "";
        string gSubstr = "";
        string strqyery = "";
        public string grate = "";
        //for day stock variables
        string Sstr = "";
        string Sstr1 = "";
        string Sstr2 = "";
        public string Fld1, Fld2, Fld3, Fld4, Fld5, Fld6, Fld7, Fld8, Fld9, Fld10,gtype;
        public bool chk1, chk2, chk3, chk4, chk5, chk6, chk7, chk8;
        public bool rd1, rd2, rd3;
        public ToolStripProgressBar ProgrBar;
        public DateTime dt1, dt2;
        bool Samtrequired = false;
        //for item ledger_1 variable
        string Istr = "";
        string Istr1 = "";
        bool Iamtrequired = false;
        string gvtid = "";

        public Report()
        {
            InitializeComponent();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            if (frmptyp == "Cashier Report")
            {
                CashierReport(dateTimePicker1.Value, dateTimePicker2.Value,textBox1.Text);
            }
            else if (frmptyp == "Grade Wise")
            {
                Gradewise(dateTimePicker1.Value, dateTimePicker2.Value,ggrade, textBox1.Text);
            }
            else if (frmptyp == "Detailed Production Report")
            {
                DetailedProduction(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Daily B2C")
            {
                B2CDaily(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "ContactList")
            {
                ContactList(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            
            else if (frmptyp == "Accountant Sale")
            {
                AccSale(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Payment Collector Balance")
            {
                AccountGroupBalance(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Journal")
            {
                Journal(dateTimePicker1.Value, dateTimePicker2.Value, gvtid);
            }
            else if (frmptyp == "Agent Report")
            {
                AgentSalesmanReport(dateTimePicker1.Value, dateTimePicker2.Value, gSubstr, "Agent");
            }
            else if (frmptyp == "Salesman Report")
            {
                AgentSalesmanReport(dateTimePicker1.Value, dateTimePicker2.Value, gSubstr, "Salesman");
            }
            else if (frmptyp == "Production Report")
            {
                Productiondet(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Supplier Bill Due")
            {
                SupplierBillDue(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Customer Bill Due")
            {
                CustomerBillDue(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "NewBook")
            {
                NewBook(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Statement of Affair")
            {
                StatementofAffair(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PartyWiseSale")
            {
                PartyWiseSale(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Register")
            {
                Register(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Purchase Register")
            {
                PurchaseRegisterHsnNew(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PartyWisePurchase")
            {
                PartyWisePurchase(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Day Summary")
            {
                DaySummary(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "RCM Register")
            {
                RCMRegister(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Receipt Register")
            {
                ReceiptRegister(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Pending Order")
            {
                PendingOrder(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Payment Register")
            {
                PaymentRegister(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Stock Liquid")
            {
                StockLiquid(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Ledger")
            {
                if (Feature.Available("Ledger with Remarks") == "Yes")
                {
                    LedgerRemark(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
                }
                else
                {
                    LedgerNew(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
                }
            }

            else if (frmptyp == "Account Group Ledger")
            {
                AccGroupLedger(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }

            else if (frmptyp == "Detail Ledger")
            {
                DetailLedger(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "HSN Summary Purchase")
            {
                HSNPur(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "HSN Summary Sale")
            {
                HSNSale(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Outstanding Report")
            {
                adjtest(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "CashBook")
            {
                CashBook(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Standard Trial Balance")
            {
                StandardTrial(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Opening Trial Balance")
            {
                OpeningTrial(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Customer Pendings")
            {
                CustomerPending(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Grouped Trial Balance")
            {
                GroupedTrial(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "B2BInterState")
            {
                B2BInterState(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "B2BIntraState")
            {
                B2BIntraState(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "B2CInterState")
            {
                B2CInterState(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "B2CIntraState")
            {
                B2CIntraState(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PUnRegisteredIntra")
            {
                PUnRegisteredIntra(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PRegisteredIntra")
            {
                PRegisteredIntra(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PCompositionIntra")
            {
                PCompositionIntra(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PUnRegisteredInter")
            {
                PUnRegisteredInter(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PRegisteredInter")
            {
                PRegisteredInter(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "PCompositionInter")
            {
                PCompositionInter(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Moved Account Summary")
            {
                MovedAccountSummary(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Payment Collector Balance")
            {
                AccountGroupBalance(Database.stDate, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Profit And Loss")
            {
                ProfitAndLoss(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Balance Sheet")
            {
                BalanceSheet(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Customer Detail Bill Wise")
            {
                CustomerDetailBillWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Customer Detail Item Wise")
            {
                CustomerDetailItemWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Sale Register")
            {
                SaleRegisterHsnNew(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Cash Report")
            {
                CashReport(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Customer Billwise")
            {
                CustomerBillwise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Stock Summary Cross")
            {
                DayWiseReportCross(dateTimePicker1.Value, dateTimePicker2.Value, Sstr, Sstr2, Sstr1, Samtrequired);
                //StockSummarycross(dateTimePicker1.Value, dateTimePicker2.Value, gGodownName, textBox1.Text);
            }
            else if (frmptyp == "Customer Brokerage")
            {
                CustomerBrokerage(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Broker Detail Customer Wise")
            {
                BrokerDetailCustomerWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "SalesMan Detail Customer Wise")
            {
                SalesManDetailCustomerWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Company Wise Report")
            {
                CompanyWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Broker Detail Item Wise")
            {
                BrokerDetailItemWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Supplier Detail Bill Wise")
            {
                SupplierDetailBillWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Supplier Detail Item Wise")
            {
                SupplierDetailItemWise(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "AnnexureA")
            {
                AnnexureA(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "AnnexureB")
            {
                AnnexureB(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "AnnexureC")
            {
                AnnexureC(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Commodity Summary")
            {
                CommoditySummary(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Item Lifting")
            {
                ItemLifting(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Item Lifting Sale")
            {
                ItemSold(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Item Lifting Detail Sale")
            {
                ItemSoldDetail(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Commodity Sale")
            {
                CommoditySale(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Commodity Purchase")
            {
                CommodityPurchase(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "InBill Charges")
            {
                InBillCharges(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Item Ledger")
            {
                ItemLedger1(dateTimePicker1.Value, dateTimePicker2.Value, Istr, Istr1, Iamtrequired);
                //string[] Des_Name = textBox1.Text.Split('(');
                //string des_id = funs.Select_des_id(Des_Name[0], Des_Name[1]);
                //if (des_id == "")
                //{
                //    return;
                //}
                //ItemLedger(dateTimePicker1.Value, dateTimePicker2.Value, gGodownName, des_id);
            }
            else if (frmptyp == "Stock Summary")
            {
                DayWiseReport(dateTimePicker1.Value, dateTimePicker2.Value, Sstr, Sstr2, Sstr1, Samtrequired);
                //if (Feature.Available("Company Colour") == "No")
                //{
                //    Stock(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
                //}
                //else
                //{
                //    StockSummary(dateTimePicker1.Value, dateTimePicker2.Value, gGodownName, textBox1.Text);
                //}
            }
            else if (frmptyp == "Below Stock Warning")
            {
                BelowStockWarning(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Price List")
            {
                PriceList(dateTimePicker1.Value, dateTimePicker2.Value, AccName, funs.Select_Rates_Id(textBox1.Text));
            }
            else if (frmptyp == "Price Variation Sale")
            {
                PriceVariationSale(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Price Variation Purchase")
            {
                PriceVariationPurchase(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Particular Commodity Summary")
            {
                ParticularCommoditySummary(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Customer Profit")
            {
                CustomerProfit(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Customerwise Profit")
            {
                CustomerwiseProfit(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Purchase Register")
            {
                PurchaseRegisterTax(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Purchase Register HSN")
            {
                PurchaseRegisterHsn(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Sale Register")
            {
                SaleRegisterTax(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Sale Register HSN")
            {
                SaleRegisterHsn(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Summarized Purchase Register")
            {
                SummPurchaseRegister(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Summarized Sale Register")
            {
                SummSaleRegister(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "GroupLedger")
            {
                GroupLedger(dateTimePicker1.Value, dateTimePicker2.Value);
            }
            else if (frmptyp == "Supplier Lifting")
            {
                SupplierLifting(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            else if (frmptyp == "Stock Valuation")
            {
                StockValuation(dateTimePicker1.Value, dateTimePicker2.Value, gGodownName, textBox1.Text);
            }
            else if (frmptyp == "Stock Valuation ")
            {
                if (grate == "")
                {
                    StockVal(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
                }
                else
                {
                    StockValNew(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text, grate);
                }
            }
            else if (frmptyp == "Stock TaxSlab Wise")
            {
                StockTaxSlabWise(dateTimePicker1.Value, dateTimePicker2.Value, gGodownName, textBox1.Text);
            }
            else if (frmptyp == "Party Price List")
            {
                PartyPrice(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text);
            }
            if (frmptyp == "GodownInOut")
            {
                GodownInOut(dateTimePicker1.Value, dateTimePicker2.Value,textBox1.Text);
            }
            if (frmptyp == "CashCreditSale")
            {
                CashCreditSale(dateTimePicker1.Value, dateTimePicker2.Value,textBox1.Text);
            }
           
            if (dataGridView1.Rows.Count == 0)
            {
                button1.Visible = false;
                button2.Visible = false;
                button4.Visible = false;
                button6.Visible = false;
                button7.Visible = false;
            }
            else
            {
                button1.Visible = true;
                button2.Visible = true;
                button4.Visible = true;
                button6.Visible = true;
                button7.Visible = true;
            }
            foreach (DataGridViewColumn column in dataGridView1.Columns)
            {
                column.SortMode = DataGridViewColumnSortMode.NotSortable;
            }
        }

        //private void SideFill()
        //{
        //    flowLayoutPanel1.Controls.Clear();
        //    DataTable dtsidefill = new DataTable();
        //    dtsidefill.Columns.Add("Name", typeof(string));
        //    dtsidefill.Columns.Add("DisplayName", typeof(string));
        //    dtsidefill.Columns.Add("ShortcutKey", typeof(string));
        //    dtsidefill.Columns.Add("Visible", typeof(bool));
            
        //    //print
        //    dtsidefill.Rows.Add();
        //    dtsidefill.Rows[0]["Name"] = "print";
        //    dtsidefill.Rows[0]["DisplayName"] = "Print";
        //    dtsidefill.Rows[0]["ShortcutKey"] = "^P";
        //    dtsidefill.Rows[0]["Visible"] = true;

        //    //Preview
        //    dtsidefill.Rows.Add();
        //    dtsidefill.Rows[1]["Name"] = "preview";
        //    dtsidefill.Rows[1]["DisplayName"] = "Print Preview";
        //    dtsidefill.Rows[1]["ShortcutKey"] = "";
        //    dtsidefill.Rows[1]["Visible"] = true;

        //    //pdf
        //    dtsidefill.Rows.Add();
        //    dtsidefill.Rows[2]["Name"] = "pdf";
        //    dtsidefill.Rows[2]["DisplayName"] = "Export to PDF";
        //    dtsidefill.Rows[2]["ShortcutKey"] = "";
        //    if (Feature.Available("Data Export") == "No")
        //    {
        //        dtsidefill.Rows[2]["Visible"] = false;
        //    }
        //    else
        //    {
        //        dtsidefill.Rows[2]["Visible"] = true;
        //    }

        //    //excel
        //    dtsidefill.Rows.Add();
        //    dtsidefill.Rows[3]["Name"] = "excel";
        //    dtsidefill.Rows[3]["DisplayName"] = "Export to Excel";
        //    dtsidefill.Rows[3]["ShortcutKey"] = "";
        //    if (Feature.Available("Data Export") == "No")
        //    {
        //        dtsidefill.Rows[3]["Visible"] = false;
        //    }
        //    else
        //    {
        //        dtsidefill.Rows[3]["Visible"] = true;
        //    }

        //    //close
        //    dtsidefill.Rows.Add();
        //    dtsidefill.Rows[4]["Name"] = "quit";
        //    dtsidefill.Rows[4]["DisplayName"] = "Quit";
        //    dtsidefill.Rows[4]["ShortcutKey"] = "Esc";
        //    dtsidefill.Rows[4]["Visible"] = true;
            
        //    for (int i = 0; i < dtsidefill.Rows.Count; i++)
        //    {
        //        if (bool.Parse(dtsidefill.Rows[i]["Visible"].ToString()) == true)
        //        {
        //            Button btn = new Button();
        //            btn.Size = new Size(150, 45);
        //            btn.Name = dtsidefill.Rows[i]["Name"].ToString();
        //            btn.Text = "";
        //            Bitmap bmp = new Bitmap(btn.ClientRectangle.Width, btn.ClientRectangle.Height);
        //            Graphics G = Graphics.FromImage(bmp);
        //            G.Clear(btn.BackColor);
        //            string line1 = dtsidefill.Rows[i]["ShortcutKey"].ToString();
        //            string line2 = dtsidefill.Rows[i]["DisplayName"].ToString();
        //            StringFormat SF = new StringFormat();
        //            SF.Alignment = StringAlignment.Near;
        //            SF.LineAlignment = StringAlignment.Center;
        //            System.Drawing.Rectangle RC = btn.ClientRectangle;
        //            System.Drawing.Font font = new System.Drawing.Font("Arial", 14);
        //            G.DrawString(line1, font, Brushes.Red, RC, SF);
        //            G.DrawString("".PadLeft(line1.Length * 2 + 1) + line2, font, Brushes.Black, RC, SF);
        //            btn.Image = bmp;
        //            btn.Click += new EventHandler(btn_Click);
        //            flowLayoutPanel1.Controls.Add(btn);
        //        }
        //    }
        //}

        //void btn_Click(object sender, EventArgs e)
        //{
        //    Button tbtn = (Button)sender;
        //    string name = tbtn.Name.ToString();
        //    if (name == "print")
        //    {
        //        if (dataGridView1.Rows.Count == 0)
        //        {
        //            return;
        //        }
        //        string tPath = Path.GetTempPath() + DateTime.Now.ToString("yyMMddhmmssfff") + ".pdf";
        //        ExportToPdf(tPath);
        //        GC.Collect();
        //        PdfReader frm = new PdfReader();
        //        frm.LoadFile(tPath);
        //        frm.Visible = false;
        //        frm.axAcroPDF1.printWithDialog();
        //    }
        //    else if (name == "preview")
        //    {
        //        if (dataGridView1.Rows.Count == 0)
        //        {
        //            return;
        //        }
        //        string tPath = Path.GetTempPath() + DateTime.Now.ToString("yyMMddhmmssfff") + ".pdf";
        //        ExportToPdf(tPath);
        //        GC.Collect();
        //        PdfReader frm = new PdfReader();
        //        frm.LoadFile(tPath);
        //        frm.Show();
        //    }
        //    else if (name == "pdf")
        //    {
        //        if (dataGridView1.Rows.Count == 0)
        //        {
        //            return;
        //        }
        //        SaveFileDialog ofd = new SaveFileDialog();
        //        ofd.Filter = "Adobe Acrobat(*.pdf) | *.pdf";
        //        if (DialogResult.OK == ofd.ShowDialog())
        //        {
        //            ExportToPdf(ofd.FileName);
        //            MessageBox.Show("Export Successfully!!");
        //        }
        //    }
        //    else if (name == "excel")
        //    {
        //        if (dataGridView1.Rows.Count == 0)
        //        {
        //            return;
        //        }
        //        Object misValue = System.Reflection.Missing.Value;
        //        Excel.Application apl = new Microsoft.Office.Interop.Excel.Application();
        //        Excel.Workbook wb = (Excel.Workbook)apl.Workbooks.Add(misValue);
        //        Excel.Worksheet ws;
        //        ws = (Excel.Worksheet)wb.Worksheets[1];
        //        int lno = 1;
        //        DataTable dtExcel = new DataTable();
        //        DataTable dtRheader = new DataTable();
        //        Database.GetSqlData("select * from company", dtRheader);

        //        ws.Cells[lno, 1] = dtRheader.Rows[0]["name"].ToString();
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
        //        lno++;

        //        ws.Cells[lno, 1] = dtRheader.Rows[0]["Address1"].ToString();
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
        //        lno++;

        //        ws.Cells[lno, 1] = dtRheader.Rows[0]["Address2"].ToString();
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
        //        ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
        //        lno++;

        //        for (int i = 0; i < dataGridView1.Columns.Count; i++)
        //        {
        //            if (dataGridView1.Columns[i].HeaderCell.Style.Alignment == DataGridViewContentAlignment.MiddleRight)
        //            {
        //                ws.get_Range(ws.Cells[5, i + 1], ws.Cells[5, i + 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
        //            }
        //            ws.get_Range(ws.Cells[i + 1, i + 1], ws.Cells[i + 1, i + 1]).ColumnWidth = dataGridView1.Columns[i].Width / 11.5;
        //            ws.Cells[5, i + 1] = dataGridView1.Columns[i].HeaderText.ToString();
        //        }

        //        for (int i = 0; i < dataGridView1.Rows.Count; i++)
        //        {
        //            for (int j = 0; j < dataGridView1.Columns.Count; j++)
        //            {
        //                if (dataGridView1.Columns[j].HeaderCell.Style.Alignment == DataGridViewContentAlignment.MiddleRight)
        //                {
        //                    ws.get_Range(ws.Cells[i + 6, j + 1], ws.Cells[i + 6, j + 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
        //                    ws.get_Range(ws.Cells[i + 6, j + 1], ws.Cells[i + 6, j + 1]).NumberFormat = "0,0.00";
        //                }
        //                else
        //                {
        //                    ws.get_Range(ws.Cells[i + 6, j + 1], ws.Cells[i + 6, j + 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
        //                }
        //                if (dataGridView1.Columns[j].DefaultCellStyle.Font != null)
        //                {
        //                    ws.get_Range(ws.Cells[i + 6, j + 1], ws.Cells[i + 6, j + 1]).Font.Bold = true;
        //                }
        //                if (dataGridView1.Rows[i].Cells[j].Value != null)
        //                {
        //                    ws.Cells[i + 6, j + 1] = dataGridView1.Rows[i].Cells[j].Value.ToString().Replace(",", "");
        //                }
        //            }
        //        }

        //        Excel.Range last = ws.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell, Type.Missing);
        //        ws.get_Range("A1", last).WrapText = true;
        //        apl.Visible = true;
        //    }
        //    else if (name == "quit")
        //    {
        //        this.Close();
        //        this.Dispose();
        //    }
        //}

        private void Report_Load(object sender, EventArgs e)
        {
            dateTimePicker1.CustomFormat = Database.dformat;
            dateTimePicker2.CustomFormat = Database.dformat;
            //dateTimePicker1.MaxDate = Database.ldate;
            //dateTimePicker1.MinDate = Database.stDate;
            //dateTimePicker2.MaxDate = Database.ldate;
            //dateTimePicker2.MinDate = Database.stDate;
            this.WindowState = FormWindowState.Maximized;
            foreach (DataGridViewColumn column in dataGridView1.Columns)
            {
                column.SortMode = DataGridViewColumnSortMode.NotSortable;
            }
            if (dataGridView1.Rows.Count == 0)
            {
                button1.Visible = false;
                button2.Visible = false;
                button4.Visible = false;
                button6.Visible = false;
                button7.Visible = false;
            }           
        }

        public bool DaySummary(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Day Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Day Summary , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.DatabaseType == "access")
            {
                if (Database.IsKacha == false)
                {
                    sql = "TRANSFORM -1*  Sum(Journal.Amount) AS SumOfAmount SELECT ACCOUNTYPE.Name AS Accountype, ACCOUNT.Name, AccBalance.Balance AS Opening FROM ((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (SELECT test.ac_id,Sum(test.Balance) AS Balance FROM (select ac_id, (-1* Balance) as Balance from account union all SELECT Journal.Ac_id,(-1*  Journal.Amount) as Balance FROM (Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((Journal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) )  AS test GROUP BY test.ac_id )  AS AccBalance ON ACCOUNT.Ac_id = AccBalance.ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNTYPE.Name, ACCOUNT.Name, AccBalance.Balance PIVOT VOUCHERTYPE.VoucCategory;";
                }
                else
                {
                    sql = "TRANSFORM -1* Sum(Journal.Amount) AS SumOfAmount SELECT ACCOUNTYPE.Name AS Accountype, ACCOUNT.Name, AccBalance.Balance AS Opening FROM ((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (SELECT test.ac_id, Sum(test.Balance) AS Balance FROM (select ac_id,(-1*  Balance2) as Balance from account union all SELECT Journal.Ac_id, (-1* Journal.Amount) as Balance FROM (Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((Journal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) )  AS test GROUP BY test.ac_id )  AS AccBalance ON ACCOUNT.Ac_id = AccBalance.ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNTYPE.Name, ACCOUNT.Name, AccBalance.Balance PIVOT VOUCHERTYPE.VoucCategory;";
                }
            }
            else
            {
                if (Database.IsKacha == false)
                {
                    DataTable dtother = new DataTable();
                    Database.GetSqlData("SELECT DISTINCT  VOUCHERTYPE.VoucCategory FROM          VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON  VOUCHERTYPE.Vt_id =  VOUCHERINFO.Vt_id  order by VoucCategory", dtother);
                    string strColumns = "";
                    for (int i = 0; i < dtother.Rows.Count; i++)
                    {
                        strColumns += "[" + dtother.Rows[i]["VoucCategory"].ToString() + "],";
                    }
                    strColumns = strColumns.TrimEnd(',');
                    sql = "SELECT Accountype, Name, Opn, " + strColumns + " FROM (SELECT ACCOUNTYPE.Name AS Accountype, ACCOUNT.Name, AccBalance.Balance AS Opn, VOUCHERTYPE.VoucCategory, (-1*  SUM( Journal.Amount))  AS Amount FROM Journal LEFT OUTER JOIN  VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id LEFT OUTER JOIN  ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN (SELECT Ac_id, SUM(Balance) AS Balance  FROM (SELECT Ac_id,( -1* Balance)  as Balance FROM ACCOUNT AS ACCOUNT_1  UNION ALL  SELECT Journal_1.Ac_id, (-1*  Journal_1.Amount) as Balance  FROM Journal AS Journal_1 LEFT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_1 ON Journal_1.Vi_id = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN  VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id  WHERE (Journal_1.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERTYPE_1.A = 'True')) AS test  GROUP BY Ac_id) AS AccBalance ON ACCOUNT.Ac_id = AccBalance.Ac_id LEFT OUTER JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE ( Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ( Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.A = 'True') GROUP BY ACCOUNTYPE.Name, ACCOUNT.Name, AccBalance.Balance, VOUCHERTYPE.VoucCategory) AS res PIVOT (sum(Amount) FOR VoucCategory IN (" + strColumns + ")) AS Pivoting";
                }
                else
                {
                    DataTable dtother = new DataTable();
                    Database.GetSqlData("SELECT DISTINCT  VOUCHERTYPE.VoucCategory FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON  VOUCHERTYPE.Vt_id =  VOUCHERINFO.Vt_id order by VoucCategory", dtother);
                    string strColumns = "";
                    for (int i = 0; i < dtother.Rows.Count; i++)
                    {
                        strColumns += "[" + dtother.Rows[i]["VoucCategory"].ToString() + "],";
                    }
                    strColumns = strColumns.TrimEnd(',');
                    sql = "SELECT Accountype, Name, Opn, " + strColumns + " FROM (SELECT ACCOUNTYPE.Name AS Accountype, ACCOUNT.Name, AccBalance.Balance AS Opn, VOUCHERTYPE.VoucCategory, (-1* SUM( Journal.Amount))  AS Amount FROM Journal LEFT OUTER JOIN  VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id LEFT OUTER JOIN  ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN (SELECT Ac_id, SUM(Balance) AS Balance  FROM (SELECT Ac_id, (-1* Balance2) as Balance  FROM ACCOUNT AS ACCOUNT_1  UNION ALL  SELECT Journal_1.Ac_id,(-1*  Journal_1.Amount) as Balance  FROM Journal AS Journal_1 LEFT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_1 ON Journal_1.Vi_id = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN  VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id  WHERE (Journal_1.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERTYPE_1.B = 'True')) AS test  GROUP BY Ac_id) AS AccBalance ON ACCOUNT.Ac_id = AccBalance.Ac_id LEFT OUTER JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE ( Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ( Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.B = 'True') GROUP BY ACCOUNTYPE.Name, ACCOUNT.Name, AccBalance.Balance, VOUCHERTYPE.VoucCategory) AS res PIVOT (sum(Amount) FOR VoucCategory IN (" + strColumns + ")) AS Pivoting";
                }
            }

            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            dt.Columns.Add("Balance", typeof(decimal));
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Opn"].ToString() == "" || dt.Rows[i]["Opn"] == null)
                {
                    dt.Rows[i]["Opn"] = 0;
                }
                double bal = double.Parse(dt.Rows[i]["Opn"].ToString());
                for (int j = 3; j < dt.Columns.Count - 1; j++)
                {
                    if (dt.Rows[i][j] == null || dt.Rows[i][j].ToString() == "")
                    {
                        dt.Rows[i][j] = 0;
                    }
                    bal += double.Parse(dt.Rows[i][j].ToString());
                }
                dt.Rows[i]["Balance"] = bal;
            }

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[1, 3]{
            { "Accountype", "1", "1" }
            };

            string[,] Cwidth = new string[dt.Columns.Count, 8];
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                Cwidth[i, 0] = dt.Columns[i].ColumnName;
                if (i == 0)
                {
                    Cwidth[i, 1] = "0";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 1)
                {
                    Cwidth[i, 1] = "250";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "Difference (if any)";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else
                {
                    Cwidth[i, 1] = (750 / (dt.Columns.Count - 3)).ToString();
                    if (i == 2 || i == dt.Columns.Count - 1)
                    {
                        Cwidth[i, 3] = "";
                        Cwidth[i, 4] = "";
                    }
                    else
                    {
                        Cwidth[i, 3] = "|sum([" + dt.Columns[i].ColumnName + "])";
                        Cwidth[i, 4] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    }
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = ""; 
                    Cwidth[i, 7] = "";
                    Cwidth[i, 2] = "1";
                }
            }
            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool PendingOrder(DateTime DateFrom, DateTime DateTo)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            frmptyp = "Pending Order";
            this.Text = frmptyp;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            dateTimePicker1.Enabled = false;
            DecsOfReport = "Pending Order, As on " + DateTo.ToString(Database.dformat);
            sql = "SELECT res.Name, res.Description, res.Pack, Sum(res.Qty) AS Qty FROM (SELECT ACCOUNT.Name, Voucherdet.Description, DESCRIPTION.Pack, Voucherdet.Quantity as Qty FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Voucherdet ON VOUCHERINFO.Vi_id = Voucherdet.Vi_id) LEFT JOIN DESCRIPTION ON Voucherdet.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id WHERE (((VOUCHERTYPE.Type)='Sale Order') AND ((VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) Union all SELECT ACCOUNT.Name, Voucherdet.Description, DESCRIPTION.Pack, -1 *Voucherdet.Quantity as Qty FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Voucherdet ON VOUCHERINFO.Vi_id = Voucherdet.Vi_id) LEFT JOIN DESCRIPTION ON Voucherdet.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id WHERE (((VOUCHERTYPE.Type)='Sale') AND ((VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) )  AS res GROUP BY res.Name, res.Description, res.Pack HAVING (((Sum(res.Qty))>0)) ORDER BY res.Name, res.Description, res.Pack";

            dt.Clear();
            Database.GetSqlData(sql, dt);
            if (dt.Rows.Count == 0)
            {
                return false;
            }
            string[,] col = new string[0, 0];
            string[,] Cwidth = new string[4, 8] {
            { "Party Name", "350", "0","","","","",""  },
            { "Description", "300", "0","" ,"","","","" },
            { "Pack", "200", "0","","","","",""  },
            { "Quantity", "150", "0","","","","","" }
             };

            CreateReport(dt, col, Cwidth);

            return true;
        }

        public bool Register(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Cash - Bank Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT ACCOUNTYPE.Name AS Act, ACCOUNT.Name AS Name,  " + access_sql.fnstring("Sum(Journal.Amount)>0", "Sum(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("Sum(Journal.Amount)<0", "-1*Sum(Journal.Amount)", "0") + " AS Cr FROM (((SELECT DISTINCT (Journal.Vi_id) AS Vi_id FROM (((Journal LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((ACCOUNTYPE.Name)='BANK ACCOUNTS' Or (ACCOUNTYPE.Name)='CASH-IN-HAND') AND ((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) )  AS res LEFT JOIN Journal ON res.Vi_id = Journal.Vi_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name, ACCOUNT.Name HAVING (((ACCOUNTYPE.Name)<>'CASH-IN-HAND' And (ACCOUNTYPE.Name)<>'BANK ACCOUNTS')) ORDER BY ACCOUNTYPE.Name, ACCOUNT.Name;";
            //}
            //else
            //{
            //    sql = "SELECT ACCOUNTYPE.Name AS Act, ACCOUNT.Name AS Name,  " + access_sql.fnstring("Sum(Journal.Amount)>0", "Sum(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("Sum(Journal.Amount)<0", "-1*Sum(Journal.Amount)", "0") + " AS Cr FROM (((SELECT DISTINCT (Journal.Vi_id) AS Vi_id FROM (((Journal LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((ACCOUNTYPE.Name)='BANK ACCOUNTS' Or (ACCOUNTYPE.Name)='CASH-IN-HAND') AND ((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) )  AS res LEFT JOIN Journal ON res.Vi_id = Journal.Vi_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name, ACCOUNT.Name HAVING (((ACCOUNTYPE.Name)<>'CASH-IN-HAND' And (ACCOUNTYPE.Name)<>'BANK ACCOUNTS')) ORDER BY ACCOUNTYPE.Name, ACCOUNT.Name;";
            //}
            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[1, 3] {
            {"Act", "1", "1" }
            };

            string[,] Cwidth = new string[4, 8] { 
            { "Accountype", "0", "0","","","","","" },          
            { "Name", "500", "0","","","","","" },
            { "Amount(Dr)", "250", "1","","|sum(Dr)","","","" },
            { "Amount(Cr)", "250", "1","","|sum(Cr)","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool CashBook(DateTime DateFrom, DateTime DateTo)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            frmptyp = "CashBook";
            this.Text = frmptyp;
            DecsOfReport = "CashBook, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            if (Database.BMode == "A")
            {
                sql = "SELECT aman.Name,Vdate,DocNumber,Narr as Particular,aman.Dr,aman.Cr , ACCOUNT.Act_id as AccountType FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name, " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance+ACCOUNT.Balance2)<0", "-1*(ACCOUNT.Balance+ACCOUNT.Balance2)", "0") + " AS Cr From ACCOUNT WHERE (Branch_id = '" + Database.BranchId + "') UNION ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Branch_id = '" + Database.BranchId + "')  ) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y UNION ALL  SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM  Journal INNER JOIN    ACCOUNT ON  Journal.Ac_id =  ACCOUNT.Ac_id INNER JOIN  VOUCHERINFO ON  Journal.Vi_id =  VOUCHERINFO.Vi_id INNER JOIN VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE     ( Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE." + Database.BMode + " = " + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ( VOUCHERINFO.Branch_id = '" + Database.BranchId + "')) AS aman INNER JOIN ACCOUNT ON aman.Name = ACCOUNT.Name";
            }
            else if (Database.BMode=="AB")
            {
                sql = "SELECT aman.Name,Vdate,DocNumber,Narr as Particular,aman.Dr,aman.Cr , ACCOUNT.Act_id as AccountType FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name, " + access_sql.fnstring("(ACCOUNT.Balance+ACCOUNT.Balance2)>0", "(ACCOUNT.Balance+ACCOUNT.Balance2)", "0") + " AS Dr, " + access_sql.fnstring("(ACCOUNT.Balance+ACCOUNT.Balance2)<0", "-1*(ACCOUNT.Balance+ACCOUNT.Balance2)", "0") + " AS Cr From ACCOUNT WHERE (Branch_id = '" + Database.BranchId + "') UNION ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Branch_id = '" + Database.BranchId + "')  ) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y UNION ALL  SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM  Journal INNER JOIN    ACCOUNT ON  Journal.Ac_id =  ACCOUNT.Ac_id INNER JOIN  VOUCHERINFO ON  Journal.Vi_id =  VOUCHERINFO.Vi_id INNER JOIN VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE     ( Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE." + Database.BMode + " = " + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ( VOUCHERINFO.Branch_id = '" + Database.BranchId + "')) AS aman INNER JOIN ACCOUNT ON aman.Name = ACCOUNT.Name";
            }
            else if (Database.BMode == "B")
            {
                sql = "SELECT aman.Name,Vdate,DocNumber,Narr as Particular,aman.Dr,aman.Cr , ACCOUNT.Act_id as AccountType FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name," + access_sql.fnstring("ACCOUNT.Balance2>0", "ACCOUNT.Balance2", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance2<0", "-1*(ACCOUNT.Balance2)", "0") + " AS Cr From ACCOUNT WHERE     (Branch_id = '" + Database.BranchId + "') UNION ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Branch_id = '" + Database.BranchId + "')) GROUP BY QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y UNION ALL  SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name,  " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM INNER JOIN    ACCOUNT ON  Journal.Ac_id =  ACCOUNT.Ac_id INNER JOIN  VOUCHERINFO ON  Journal.Vi_id =  VOUCHERINFO.Vi_id INNER JOIN VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE     ( Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.B = " + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ( VOUCHERINFO.Branch_id = '" + Database.BranchId + "')) AS aman INNER JOIN ACCOUNT ON aman.Name = ACCOUNT.Name";
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;

            drow = dt.Select("Vdate<="+ access_sql.Hash + DateTo.ToString(Database.dformat) +  access_sql.Hash+" and AccountType='SER3'");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt.Columns.Remove("AccountType");
                tdt.DefaultView.Sort = "Vdate";
                tdt.Columns.Add("RunningBalance", typeof(decimal));
                tdt.Columns.Add("Dr/Cr", typeof(string));
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                    totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());
                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                        tdt.Rows[i]["Dr/Cr"] = "Dr.";
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                        tdt.Rows[i]["Dr/Cr"] = "Cr.";
                    }
                    else
                    {
                        tdt.Rows[i]["RunningBalance"] = "0";
                    }
                    if (DateTime.Parse(tdt.Rows[i]["Vdate"].ToString()).Year.ToString() == "1801")
                    {
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = 0;
                    }
                }
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] { { "Name", "1", "0" }, { "Vdate", "1", "0" } };

            string[,] Cwidth = new string[8, 8] { 
            { "Acoount", "0", "0","","","","","" },
            { "Vdate", "0", "0","","","","","" },
            { "Documant No.", "200", "0","","","","","" },
            { "Particular", "400", "0","","","","","" },
            { "Amount Dr.", "120", "1","|sum(Dr)","","","","" },
            { "Amount Cr.", "120", "1" ,"|sum(Cr)","","","",""},
            { "Running Balance", "120", "0","","","","","" }, 
            { "Dr./Cr.", "40", "0","","","","","" } };

            CreateReport(tdt, col, Cwidth);
            return true;
        }



        public bool ContactList(DateTime DateFrom, DateTime DateTo)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            frmptyp = "ContactList";
            this.Text = frmptyp;
            DecsOfReport = "ContactList, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
           
           sql = "SELECT DISTINCT VOUCHERINFO.ShiptoPhone,  VOUCHERINFO.Shipto FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE(VOUCHERINFO.ShiptoPhone <> '') AND(VOUCHERINFO.Vdate >= '"+ DateFrom.ToString(Database.dformat)+"') AND(VOUCHERINFO.Vdate <='"+ DateTo.ToString(Database.dformat)+"') AND(VOUCHERTYPE."+Database.BMode+ " = 1) AND (VOUCHERTYPE.Type = 'Sale') ORDER BY  VOUCHERINFO.Shipto";
            

            dt.Clear();
            Database.GetSqlData(sql, dt);
            

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[0, 0]; 

            string[,] Cwidth = new string[2, 8] {
            { "ContactNo", "500", "0","","","","","" },
            { "Name", "500", "0","","","","","" }
          
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }
        public bool DetailLedger(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            DataTable dtReport = new DataTable();
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            frmptyp = "Detail Ledger";
            this.Text = frmptyp;
            accnm = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(accnm.ToLower());

            DecsOfReport = "Ledger of " + accnm.ToUpper() + ", for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            sql = "SELECT " + access_sql.fnstring("aman.Narr='Opening Balance'", access_sql.fnstring("aman.Cr>aman.Dr", "aman.Cr-aman.Dr", "0"), "aman.cr") + " AS Cr, aman.Name, aman.Vdate, aman.DocNumber, aman.Narr AS Particular, '' AS Narration, aman.Vi_id, VOUCHERDET.Description, VOUCHERDET.Quantity, " + access_sql.fnstring("aman.Narr='Opening Balance'", access_sql.fnstring("aman.Dr>aman.Cr", "aman.Dr-aman.Cr", "0"), "aman.dr") + " AS Dr, VOUCHERDET.Itemsr,VOUCHERDET.Remark1,VOUCHERDET.Remark2, VOUCHERTYPE.Type, DESCRIPTION.Pack AS Packing FROM (((((SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber, '' as Vi_id  FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name, " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance<0", "-1*(ACCOUNT.Balance)", "0") + " AS Cr From ACCOUNT ";
            sql = sql + "Union ALL  SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr From QryJournal Where (((QryJournal.Vdate) < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name)  AS X GROUP BY X.Name) AS Y  ";
            sql = sql + "Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, VOUCHERINFO.Vnumber, ACCOUNT.Name,  " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Journal.Narr," + access_sql.Docnumber + " AS DocNumber,VOUCHERINFO.Vi_id  From JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((VOUCHERINFO.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")))  AS aman LEFT JOIN VOUCHERDET ON aman.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN VOUCHERINFO ON aman.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ORDER BY VOUCHERDET.Itemsr";
           
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Name='" + accnm + "' and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash +"");
            tdt.Clear();

            DataTable DtExp = new DataTable();
            Database.GetSqlData("SELECT ACCOUNT.Name, VOUCHARGES.Vi_id, VOUCHARGES.Charg_Name As Tax_Name, Sum(VOUCHARGES.amount) AS Amount FROM VOUCHARGES LEFT JOIN (VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) ON VOUCHARGES.Vi_id = VOUCHERINFO.Vi_id GROUP BY ACCOUNT.Name, VOUCHARGES.Vi_id, VOUCHARGES.Charg_Name, VOUCHARGES.Srno HAVING (((ACCOUNT.Name)='" + textBox1.Text + "') AND ((Sum(VOUCHARGES.amount))<>0)) ORDER BY VOUCHARGES.Srno", DtExp);
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt.DefaultView.Sort = "Vdate,DocNumber";
                tdt = tdt.DefaultView.ToTable();
                int cdr = tdt.Select("Dr<>0", "").Length;
                int ccr = tdt.Select("Cr<>0", "").Length;

                dtReport.Columns.Add("DocumentNoCr", typeof(string));
                dtReport.Columns.Add("AmountCr", typeof(decimal));
                dtReport.Columns.Add("VdateCr", typeof(DateTime));
                dtReport.Columns.Add("NarrationCr", typeof(string));

                dtReport.Columns.Add("DocumentNoDr", typeof(string));
                dtReport.Columns.Add("AmountDr", typeof(decimal));

                dtReport.Columns.Add("VdateDr", typeof(DateTime));

                dtReport.Columns.Add("NarrationDr", typeof(string));


                if (cdr > ccr)
                {
                    for (int x = 0; x < cdr * 2; x++)
                    {
                        dtReport.Rows.Add();
                        dtReport.Rows[x]["AmountDr"] = 0;
                        dtReport.Rows[x]["VdateDr"] = "01-Feb-1801";

                        dtReport.Rows[x]["AmountCr"] = 0;
                        dtReport.Rows[x]["VdateCr"] = "01-Feb-1801";

                    }
                }
                else
                {
                    for (int x = 0; x < ccr * 2; x++)
                    {
                        dtReport.Rows.Add();
                        dtReport.Rows[x]["AmountDr"] = 0;
                        dtReport.Rows[x]["VdateDr"] = "01-Feb-1801";

                        dtReport.Rows[x]["AmountCr"] = 0;
                        dtReport.Rows[x]["VdateCr"] = "01-Feb-1801";
                    }
                }

                int RowCountCr = 0;
                int RowCountDr = 0;
                string LastDocNo = "0";

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    String StrNurr = "";
                    if (tdt.Rows[i]["Description"].ToString() != "")
                    {
                       // StrNurr = tdt.Rows[i]["Description"] + " - " + tdt.Rows[i]["Quantity"].ToString() + " X " + tdt.Rows[i]["Packing"].ToString();

                        if (Feature.Available("Required Remark1") == "Yes" && Feature.Available("Required Remark2") == "Yes")
                        {
                            StrNurr = tdt.Rows[i]["Description"] + " - " + tdt.Rows[i]["Quantity"].ToString() + " X " + tdt.Rows[i]["Packing"].ToString() + "\n"+Feature.Available("Show Text on Remark1")+"- " + tdt.Rows[i]["Remark1"].ToString() + Feature.Available("Show Text on Remark2")+"- " + tdt.Rows[i]["Remark2"].ToString() + "\nNarration- " + tdt.Rows[i]["Particular"].ToString();
                        }
                        else if (Feature.Available("Required Remark1") == "Yes" && Feature.Available("Required Remark2") == "No")
                        {
                            StrNurr = tdt.Rows[i]["Description"] + " - " + tdt.Rows[i]["Quantity"].ToString() + " X " + tdt.Rows[i]["Packing"].ToString() + "\n" + Feature.Available("Show Text on Remark1") + "- " + tdt.Rows[i]["Remark1"].ToString() +"\nNarration- " + tdt.Rows[i]["Particular"].ToString();
                        }
                        else if (Feature.Available("Required Remark1") == "No" && Feature.Available("Required Remark2") == "Yes")
                        {
                            StrNurr = tdt.Rows[i]["Description"] + " - " + tdt.Rows[i]["Quantity"].ToString() + " X " + tdt.Rows[i]["Packing"].ToString() + "\n" + Feature.Available("Show Text on Remark2") + "- " + tdt.Rows[i]["Remark2"].ToString() + "\nNarration- " + tdt.Rows[i]["Particular"].ToString();
                        }
                        else
                        {
                            StrNurr = tdt.Rows[i]["Description"] + " - " + tdt.Rows[i]["Quantity"].ToString() + " X " + tdt.Rows[i]["Packing"].ToString() + "\nNarration- " + tdt.Rows[i]["Particular"].ToString();
                        }
                    }

                    if (double.Parse(tdt.Rows[i]["Cr"].ToString()) > 0)
                    {
                        dtReport.Rows[RowCountCr]["AmountCr"] = tdt.Rows[i]["Cr"];
                        dtReport.Rows[RowCountCr]["DocumentNoCr"] = tdt.Rows[i]["DocNumber"];

                        if (LastDocNo == tdt.Rows[i]["DocNumber"].ToString() && tdt.Rows[i]["Description"].ToString() != "")
                        {
                            dtReport.Rows[RowCountCr]["AmountCr"] = 0.00;
                            dtReport.Rows[RowCountCr]["VdateCr"] = "01-Feb-1801";
                        }
                        else
                        {
                            dtReport.Rows[RowCountCr]["AmountCr"] = tdt.Rows[i]["Cr"];
                            dtReport.Rows[RowCountCr]["VdateCr"] = tdt.Rows[i]["Vdate"];
                        }
                        if (StrNurr == "")
                        {
                            dtReport.Rows[RowCountCr]["NarrationCr"] = tdt.Rows[i]["Particular"];
                        }
                        else
                        {
                            dtReport.Rows[RowCountCr]["NarrationCr"] = StrNurr;
                        }
                        RowCountCr++;
                        if (i == tdt.Rows.Count - 1 || tdt.Rows[i + 1]["DocNumber"].ToString() != tdt.Rows[i]["DocNumber"].ToString())
                        {
                            string exp = "";
                            for (int a = 0; a < DtExp.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'").Length; a++)
                            {
                                if (exp == "")
                                {
                                    exp = "Exp: " + funs.IndianCurr(double.Parse(DtExp.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'")[a]["amount"].ToString()));
                                }
                                else
                                {
                                    exp += " + " + funs.IndianCurr(double.Parse(DtExp.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'")[a]["amount"].ToString()));
                                }
                            }
                           

                            if (exp.Trim() != "")
                            {
                                dtReport.Rows[RowCountCr]["DocumentNoCr"] = tdt.Rows[i]["DocNumber"];
                                dtReport.Rows[RowCountCr]["NarrationCr"] = exp.Trim();
                                RowCountCr++;
                            }
                        }

                    }
                    else if (double.Parse(tdt.Rows[i]["Dr"].ToString()) > 0)
                    {
                        dtReport.Rows[RowCountDr]["AmountDr"] = tdt.Rows[i]["Dr"];

                        dtReport.Rows[RowCountDr]["DocumentNoDr"] = tdt.Rows[i]["DocNumber"];

                        if (LastDocNo == tdt.Rows[i]["DocNumber"].ToString() && tdt.Rows[i]["Description"].ToString() != "")
                        {
                            dtReport.Rows[RowCountDr]["AmountDr"] = 0.00;
                            dtReport.Rows[RowCountDr]["VdateDr"] = "01-Feb-1801";
                        }
                        else
                        {
                            dtReport.Rows[RowCountDr]["AmountDr"] = tdt.Rows[i]["Dr"];
                            dtReport.Rows[RowCountDr]["VdateDr"] = tdt.Rows[i]["Vdate"];
                        }

                        if (StrNurr == "")
                        {
                            dtReport.Rows[RowCountDr]["NarrationDr"] = tdt.Rows[i]["Particular"];
                        }
                        else
                        {
                            dtReport.Rows[RowCountDr]["NarrationDr"] = StrNurr;
                        }

                        RowCountDr++;
                        if (i == tdt.Rows.Count - 1 || tdt.Rows[i + 1]["DocNumber"].ToString() != tdt.Rows[i]["DocNumber"].ToString())
                        {
                            string exp = "";
                            for (int a = 0; a < DtExp.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'").Length; a++)
                            {
                                if (exp == "")
                                {
                                    exp = "Exp: " + funs.IndianCurr(double.Parse(DtExp.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'")[a]["amount"].ToString()));
                                }
                                else
                                {
                                    exp += " + " + funs.IndianCurr(double.Parse(DtExp.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'")[a]["amount"].ToString()));
                                }
                            }
                          

                            if (exp.Trim() != "")
                            {
                                dtReport.Rows[RowCountDr]["DocumentNoDr"] = tdt.Rows[i]["DocNumber"];
                                dtReport.Rows[RowCountDr]["NarrationDr"] = exp.Trim();
                                RowCountDr++;
                            }
                        }
                    }


                    LastDocNo = tdt.Rows[i]["DocNumber"].ToString();
                }

                int tcount = 0;
                if (RowCountCr > RowCountDr)
                {
                    tcount = RowCountCr;
                }
                else
                {
                    tcount = RowCountDr;
                }
                int cont = dtReport.Rows.Count;
                for (int zco = tcount; zco < cont; zco++)
                {
                    dtReport.Rows.RemoveAt(tcount);
                }

            }

            if (dtReport.Rows.Count == 0)
            {
                return false;
            }
            string BalanceDr = "";
            string BalanceCr = "";
            if (double.Parse(dtReport.Compute("sum(AmountDr)", "").ToString()) > double.Parse(dtReport.Compute("sum(AmountCr)", "").ToString()))
            {
                BalanceDr = "Balance: " + funs.IndianCurr(double.Parse(dtReport.Compute("sum(AmountDr)", "").ToString()) - double.Parse(dtReport.Compute("sum(AmountCr)", "").ToString())) + " Dr.";
            }
            else
            {
                BalanceCr = "Balance: " + funs.IndianCurr(double.Parse(dtReport.Compute("sum(AmountCr)", "").ToString()) - double.Parse(dtReport.Compute("sum(AmountDr)", "").ToString())) + " Cr.";
            }



            string[,] col = new string[0, 0];
            string[,] Cwidth = new string[8, 8] {
            
            { "", "2", "0","" ,"","","",""},
            { "Credit", "100", "1","|sum(AmountCr)" ,"" ,"","",""},
            { "Date", "100", "0","" ,"","","",""},
            { "Narration", "298", "0",BalanceDr ,"","","",""},

            { "", "2", "0","" ,"","","",""},
            { "Debit", "100", "1","|sum(AmountDr)" ,"" ,"","",""},
            { "Date", "100", "0","" ,"","","",""},
            { "Narration","298", "0",BalanceCr ,"","","",""}
            };

            CreateReport(dtReport, col, Cwidth);
            return true;
        }

        public bool CustomerPending(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer Pendings";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Customer Pendings, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT " + access_sql.Docnumber + " AS DocNumber, " + access_sql.fnDatFormatting("VOUCHERINFO.Vdate", Database.dformat) + " AS Vdate,  " + access_sql.fnDatFormatting("VOUCHERINFO.Duedate", Database.dformat) + " AS Duedate, VOUCHERINFO.Totalamount AS [Bill Amount], Sum(" + access_sql.fnstring("BILLBYBILL.Amount " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + ") AS Rec,[VOUCHERINFO].[Totalamount]- Sum(" + access_sql.fnstring("BILLBYBILL.Amount " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + ") AS Pending, 0 as RunningBal  FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN BILLBYBILL ON VOUCHERINFO.Vi_id = BILLBYBILL.Bill_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO AS VOUCHERINFO_1 ON BILLBYBILL.receive_id = VOUCHERINFO_1.Vi_id WHERE (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY " + access_sql.Docnumber + ", " + access_sql.fnDatFormatting("VOUCHERINFO.Vdate", Database.dformat) + ", " + access_sql.fnDatFormatting("VOUCHERINFO.Vdate", Database.dformat) + ", VOUCHERINFO.Totalamount, VOUCHERINFO.Duedate, ACCOUNT.Name HAVING (((VOUCHERINFO.Duedate) Is Not Null) AND ((ACCOUNT.Name)='" + accnm + "'))";
            }
            else
            {
                sql = "SELECT " + access_sql.Docnumber + " AS DocNumber, " + access_sql.fnDatFormatting("VOUCHERINFO.Vdate", Database.dformat) + " AS Vdate,  " + access_sql.fnDatFormatting("VOUCHERINFO.Duedate", Database.dformat) + " AS Duedate, VOUCHERINFO.Totalamount AS [Bill Amount], Sum(" + access_sql.fnstring("BILLBYBILL.Amount " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + ") AS Rec,[VOUCHERINFO].[Totalamount]- Sum(" + access_sql.fnstring("BILLBYBILL.Amount " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + ") AS Pending, 0 as RunningBal  FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN BILLBYBILL ON VOUCHERINFO.Vi_id = BILLBYBILL.Bill_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO AS VOUCHERINFO_1 ON BILLBYBILL.receive_id = VOUCHERINFO_1.Vi_id WHERE (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY " + access_sql.Docnumber + ", " + access_sql.fnDatFormatting("VOUCHERINFO.Vdate", Database.dformat) + ", " + access_sql.fnDatFormatting("VOUCHERINFO.Vdate", Database.dformat) + ", VOUCHERINFO.Totalamount, VOUCHERINFO.Duedate, ACCOUNT.Name HAVING (((VOUCHERINFO.Duedate) Is Not Null) AND ((ACCOUNT.Name)='" + accnm + "'))";
            }
          
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "DocNumber");
            tdt.Clear();
           
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                drow = tdt.Select("Pending <> 0", "");
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                }
                else
                {
                    return false;
                }

                tdt.Columns.Add("Due Days", typeof(string));
                tdt.Columns.Add("DueDaysInt", typeof(int));
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    int duedays = int.Parse((Database.ldate - DateTime.Parse(tdt.Rows[i]["Duedate"].ToString())).TotalDays.ToString());
                    if (duedays > 0)
                    {
                        tdt.Rows[i]["Due Days"] = "   " +  duedays.ToString();
                        tdt.Rows[i]["DueDaysInt"] = duedays;
                    }
                }
                tdt.DefaultView.Sort = "DueDaysInt DESC";               
                tdt = tdt.DefaultView.ToTable();
                tdt.Columns.Remove("DueDaysInt");
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (i == 0)
                    {
                        tdt.Rows[i]["RunningBal"] = double.Parse(tdt.Rows[i]["Pending"].ToString());
                    }
                    else
                    {
                        tdt.Rows[i]["RunningBal"] = double.Parse(tdt.Rows[i - 1]["RunningBal"].ToString()) + double.Parse(tdt.Rows[i]["Pending"].ToString());
                    }
                }
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[8, 8] { 
            { "DocNumber", "150", "0","","","","",""  },
            { "Vdate", "100", "0","","","","",""  },
            { "Due Date", "100", "0","","","","",""  },
            { "Bill Amount", "100", "0","","","","",""  },
            { "receive", "150", "0","","","","",""  },
            { "Pendings", "150", "0","|sum(Pending)","","","",""  },
            { "Running Bal", "175", "0","","","","",""  },
            { "Days", "75", "0","","","" ,"","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        private string getmonth(int Month)
        {
            string month = new DateTime(1900, Month, 1).ToString("MMMM");
            return month;
        }

        public bool ReminderDates(DateTime DateFrom, DateTime DateTo)
        {
         
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Reminder Dates";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
          
            label3.Enabled =false;
            label1.Enabled = false;
            label2.Enabled = false;
            button3.Enabled = false;
            textBox1.Enabled = false;
            dateTimePicker1.Enabled = false;
            dateTimePicker2.Enabled = false;
            this.Text = frmptyp;
           // DecsOfReport = "Reminder Dates, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            DecsOfReport = "Reminder Dates";
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();


            sql = "SELECT '' as Monthname, Month(importantdate.Idate) AS monthindex,importantdate.Idate as Idate, ACCOUNT.Name, ACCOUNT.Phone, importantdate.Title, importantdate.Amount, importantdate.Note FROM importantdate LEFT JOIN ACCOUNT ON importantdate.Ac_id = ACCOUNT.Ac_id ORDER BY importantdate.Idate, ACCOUNT.Name";
           
           
            Database.GetSqlData(sql, dt);
          
            //DataRow[] drow;
            //drow = dt.Select("Idate>=#" + DateFrom.ToString(Database.dformat) + "# and Idate<=#" + DateTo.ToString(Database.dformat) + "#");
            tdt.Clear();

            //if (drow.GetLength(0) > 0)
            //{
            //    tdt = drow.CopyToDataTable();
            //    if (drow.GetLength(0) > 0)
            //    {
            //        tdt = drow.CopyToDataTable();
            //    }
            //    else
            //    {
            //        return false;
            //    }
            //}


            for (int a = 0; a < dt.Rows.Count; a++)
            {



                dt.Rows[a]["MonthName"] = getmonth(int.Parse(dt.Rows[a]["monthindex"].ToString()));
            }
            if (dt.Rows.Count == 0)
            {
                return false;
            }
            dt.Columns.Remove("monthindex");
            string[,] col = new string[1, 3] { { "Monthname", "1", "0" } };

            string[,] Cwidth = new string[7, 8] {
            { "MonthName", "150", "0","","","","",""  },
            { "Idate", "150", "0","","","","","" },
            { "Name", "150", "0","","","","","" },
            { "Contact", "100", "0","","","","","" },
            { "Title", "200", "0","","","","","" },
            { "Amount", "150", "0","","","","","" },
            { "Note", "250", "0","","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }



      

        public bool CustomerOutstanding(DateTime DateFrom, DateTime DateTo, string accnm)
        {

            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            dateTimePicker1.Enabled = false;
            dateTimePicker2.Enabled = false;
            textBox1.Text = accnm;
            frmptyp = "Customer Billwise";
            this.Text = frmptyp;
            accnm = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(accnm.ToLower());
            DecsOfReport = "Outstanding Bills of " + accnm ;

            if (Database.IsKacha == false)
            {
                //sql = "SELECT Test.Vdate, Test.DocNumber, Test.Amount, IIf(Test.Adjusted Is Null,0,Test.Adjusted) AS Adj, Test.Amount-IIf(Test.Adjusted Is Null,0,Test.Adjusted) AS UnAdj FROM (SELECT VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, JOURNAL.Dr AS Amount, VoucherAmount.Vi_id, Sum(BILLBYBILL.Amount) AS Adjusted FROM (((((SELECT VOUCHERINFO.Vi_id, IIf(VOUCHERACTOTAL.Amount Is Null,VOUCHERINFO.Ac_id,VOUCHERACTOTAL.Accid) AS AccountId FROM VOUCHERINFO LEFT JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)  AS VoucherAmount LEFT JOIN JOURNAL ON (VoucherAmount.AccountId = JOURNAL.Ac_id) AND (VoucherAmount.Vi_id = JOURNAL.Vi_id)) LEFT JOIN ACCOUNT ON VoucherAmount.AccountId = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO ON VoucherAmount.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN BILLBYBILL ON VoucherAmount.Vi_id = BILLBYBILL.Bill_id WHERE (((ACCOUNT.Name)='" + accnm + "') AND ((JOURNAL.Cr)=0) AND ((VOUCHERTYPE.A)=True)) GROUP BY VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber), JOURNAL.Dr, VoucherAmount.Vi_id)  AS Test WHERE (((Test.Amount-IIf(Test.Adjusted Is Null,0,Test.Adjusted))<>0))";
                sql = "SELECT Test.Vdate, Test.DocNumber, Test.Amount, " + access_sql.fnstring("Test.Adjusted " + access_sql.IsNull + " Null", "0", "Test.Adjusted") + " AS Adj, Test.Amount-" + access_sql.fnstring("Test.Adjusted " + access_sql.IsNull + " Null", "0", "Test.Adjusted") + "AS UnAdj FROM (SELECT VOUCHERINFO.Vdate," + access_sql.Docnumber + " AS DocNumber, JOURNAL.Dr AS Amount, VoucherAmount.Vi_id, Sum(BILLBYBILL.Amount) AS Adjusted FROM (((((SELECT VOUCHERINFO.Vi_id, " + access_sql.fnstring("VOUCHERACTOTAL.Amount " + access_sql.IsNull + " Null", "VOUCHERINFO.Ac_id", "VOUCHERACTOTAL.Accid") + " AS AccountId FROM VOUCHERINFO LEFT JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)  AS VoucherAmount LEFT JOIN JOURNAL ON (VoucherAmount.AccountId = JOURNAL.Ac_id) AND (VoucherAmount.Vi_id = JOURNAL.Vi_id)) LEFT JOIN ACCOUNT ON VoucherAmount.AccountId = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO ON VoucherAmount.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN BILLBYBILL ON VoucherAmount.Vi_id = BILLBYBILL.Bill_id WHERE (((ACCOUNT.Name)='" + accnm + "') AND ((JOURNAL.Cr)=0) AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERINFO.Vdate, " + access_sql.Docnumber + ", JOURNAL.Dr, VoucherAmount.Vi_id)  AS Test WHERE (((Test.Amount-" + access_sql.fnstring("Test.Adjusted "+access_sql.IsNull+" Null", "0", "Test.Adjusted") + ")<>0))";

            }
            else
            {
                //sql = "SELECT Test.Vdate, Test.DocNumber, Test.Amount, IIf(Test.Adjusted Is Null,0,Test.Adjusted) AS Adj, Test.Amount-IIf(Test.Adjusted Is Null,0,Test.Adjusted) AS UnAdj FROM (SELECT VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, JOURNAL.Dr AS Amount, VoucherAmount.Vi_id, Sum(BILLBYBILL.Amount) AS Adjusted FROM (((((SELECT VOUCHERINFO.Vi_id, IIf(VOUCHERACTOTAL.Amount Is Null,VOUCHERINFO.Ac_id,VOUCHERACTOTAL.Accid) AS AccountId FROM VOUCHERINFO LEFT JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)  AS VoucherAmount LEFT JOIN JOURNAL ON (VoucherAmount.AccountId = JOURNAL.Ac_id) AND (VoucherAmount.Vi_id = JOURNAL.Vi_id)) LEFT JOIN ACCOUNT ON VoucherAmount.AccountId = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO ON VoucherAmount.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN BILLBYBILL ON VoucherAmount.Vi_id = BILLBYBILL.Bill_id WHERE (((ACCOUNT.Name)='" + accnm + "') AND ((JOURNAL.Cr)=0) AND ((VOUCHERTYPE.B)=True)) GROUP BY VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber), JOURNAL.Dr, VoucherAmount.Vi_id)  AS Test WHERE (((Test.Amount-IIf(Test.Adjusted Is Null,0,Test.Adjusted))<>0))";

                sql = "SELECT Test.Vdate, Test.DocNumber, Test.Amount," + access_sql.fnstring("Test.Adjusted " + access_sql.IsNull + " Null", "0", "Test.Adjusted") + " AS Adj, Test.Amount-" + access_sql.fnstring("Test.Adjusted " + access_sql.IsNull + " Null", "0", "Test.Adjusted") + " AS UnAdj FROM (SELECT VOUCHERINFO.Vdate, " + access_sql.Docnumber + " AS DocNumber, JOURNAL.Dr AS Amount, VoucherAmount.Vi_id, Sum(BILLBYBILL.Amount) AS Adjusted FROM (((((SELECT VOUCHERINFO.Vi_id, " + access_sql.fnstring("VOUCHERACTOTAL.Amount " + access_sql.IsNull + " Null", "VOUCHERINFO.Ac_id", "VOUCHERACTOTAL.Accid") + " AS AccountId FROM VOUCHERINFO LEFT JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)  AS VoucherAmount LEFT JOIN JOURNAL ON (VoucherAmount.AccountId = JOURNAL.Ac_id) AND (VoucherAmount.Vi_id = JOURNAL.Vi_id)) LEFT JOIN ACCOUNT ON VoucherAmount.AccountId = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO ON VoucherAmount.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN BILLBYBILL ON VoucherAmount.Vi_id = BILLBYBILL.Bill_id WHERE (((ACCOUNT.Name)='" + accnm + "') AND ((JOURNAL.Cr)=0) AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERINFO.Vdate, " + access_sql.Docnumber + ", JOURNAL.Dr, VoucherAmount.Vi_id)  AS Test WHERE (((Test.Amount-" + access_sql.fnstring("Test.Adjusted " + access_sql.IsNull + " Null", "0", "Test.Adjusted") + ")<>0))";

            }

          

            dt.Clear();
            Database.GetSqlData(sql, dt);


            if (dt.Rows.Count == 0)
            {
                return false;
            }

            dt.DefaultView.Sort = "Vdate,DocNumber";
            string[,] col = new string[0, 0] ;


            string[,] Cwidth = new string[5, 8] { 
            { "Document Date", "200", "0","" ,"","","",""},
            { "Document Number", "200", "0","Ledger Balance: " + funs.AccountBalance(accnm) ,"","","",""},

            { "Document Amount", "200", "0","|Sum(Amount)" ,"","","",""},
            { "Adjusted Amount", "200", "0","|sum(Adj)" ,"","","",""},
            { "Balance Amount", "200", "0","|sum(UnAdj)" ,"","","",""}
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }
        public bool CustomerBillwise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            dateTimePicker1.Enabled = false;
            dateTimePicker2.Enabled = false;
            textBox1.Text = accnm;
            frmptyp = "Customer Billwise";
            this.Text = frmptyp;
            accnm = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(accnm.ToLower());
            DecsOfReport = "BillByBill Adjustment of " + accnm + " for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            
            if (Database.IsKacha == false)
            {
                sql = "SELECT base.Vdate, base.DocNumber, base.Amount," + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "''", "" + access_sql.Docnumber + "") + " AS RecDocNumber, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "" + access_sql.Hash + "1-Feb-1801" + access_sql.Hash + "", "Journal.Vdate") + " AS RecVdate, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "0", "JOURNAL.Cr") + " AS RecAmount, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + "AS Adjusted, 0 AS Outstanding FROM ((((SELECT  " + access_sql.Hash + Database.stDate.ToString(Database.dformat) + access_sql.Hash + " As Vdate,'Opening Balance' As DocNumber," + access_sql.Hash + Database.stDate.ToString(Database.dformat) + access_sql.Hash + " As DueDate,ACCOUNT.Dr As Amount, 0 As Vi_id , Ac_id FROM ACCOUNT   WHERE (((ACCOUNT.Ac_id)='" + funs.Select_ac_id(accnm) + "'))";
                sql += " UNION ALL SELECT VOUCHERINFO.Vdate," + access_sql.Docnumber + " AS DocNumber, VOUCHERINFO.Duedate, JOURNAL.Dr AS Amount, JOURNAL.Vi_id, JOURNAL.Ac_id FROM JOURNAL LEFT JOIN (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) ON JOURNAL.Vi_id = VOUCHERINFO.Vi_id WHERE (((JOURNAL.Ac_id)='" + funs.Select_ac_id(accnm) + "') AND ((JOURNAL.Cr)=0) AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS base LEFT JOIN BILLBYBILL ON (base.Ac_id = BILLBYBILL.Ac_id) AND (base.Vi_id = BILLBYBILL.Bill_id)) LEFT JOIN JOURNAL ON (BILLBYBILL.Ac_id = JOURNAL.Ac_id) AND (BILLBYBILL.receive_id = JOURNAL.Vi_id)) LEFT JOIN VOUCHERINFO ON JOURNAL.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY base.Vdate, base.DocNumber";
            }
            else
            {
                sql = "SELECT base.Vdate, base.DocNumber, base.Amount, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "''", "" + access_sql.Docnumber + "") + " AS RecDocNumber, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "" + access_sql.Hash + "1-Feb-1801" + access_sql.Hash + "", "Journal.Vdate") + " AS RecVdate, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "0", "JOURNAL.Cr") + " AS RecAmount, " + access_sql.fnstring("JOURNAL.Vi_id " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + " AS Adjusted, 0 AS Outstanding FROM ((((SELECT  " + access_sql.Hash + Database.stDate.ToString(Database.dformat) + access_sql.Hash + " As Vdate,'Opening Balance' As DocNumber," + access_sql.Hash + Database.stDate.ToString(Database.dformat) + access_sql.Hash + " As DueDate,ACCOUNT.Dr2 As Amount, 0 As Vi_id , Ac_id FROM ACCOUNT   WHERE (((ACCOUNT.Ac_id)='" + funs.Select_ac_id(accnm) + "'))";
                sql += " UNION ALL SELECT VOUCHERINFO.Vdate, " + access_sql.Docnumber + "AS DocNumber, VOUCHERINFO.Duedate, JOURNAL.Dr AS Amount, JOURNAL.Vi_id, JOURNAL.Ac_id FROM JOURNAL LEFT JOIN (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) ON JOURNAL.Vi_id = VOUCHERINFO.Vi_id WHERE (((JOURNAL.Ac_id)='" + funs.Select_ac_id(accnm) + "') AND ((JOURNAL.Cr)=0) AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS base LEFT JOIN BILLBYBILL ON (base.Ac_id = BILLBYBILL.Ac_id) AND (base.Vi_id = BILLBYBILL.Bill_id)) LEFT JOIN JOURNAL ON (BILLBYBILL.Ac_id = JOURNAL.Ac_id) AND (BILLBYBILL.receive_id = JOURNAL.Vi_id)) LEFT JOIN VOUCHERINFO ON JOURNAL.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY base.Vdate, base.DocNumber";
            }          

            dt.Clear();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            dt.DefaultView.Sort = "Vdate,RecVDate";
            string[,] col = new string[2, 3] { { "Vdate", "1", "0" }, { "DocNumber", "0", "1" } };

            string[,] Cwidth = new string[8, 8] { 
            { "DocVdate", "", "0","" ,"","","",""},
            { "DocNumber", "200", "0","Ledger Balance: "+ funs.AccountBalance(accnm) ,"","","",""},
            { "DocAmount", "150", "0","" ,"","|max(Amount)","",""},
            { "RecDocNumber", "200", "0","" ,"","","",""},
            { "RecDate", "150", "0","" ,"","","",""},          
            { "RecAmount", "100", "1","" ,"",""  ,"",""},
            { "Adjusted", "100", "1","" ,"","|sum(Adjusted)","",""  },
            { "Outstanding", "100", "1","" ,"","|max(Amount)-sum(Adjusted)" ,"","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }
        public bool LedgerRemark(DateTime DateFrom, DateTime DateTo, string accnm)
        {

            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;

            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            frmptyp = "Ledger";
            this.Text = frmptyp;


            DecsOfReport = "Ledger, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);

            if (Database.IsKacha == false)
            {
                //  sql = "SELECT Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name, ACCOUNT.Dr, ACCOUNT.Cr From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal.A HAVING (((QryJournal.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, JOURNAL.Dr, JOURNAL.Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS aman ORDER BY Vdate, Short, Vnumber";
                sql = "SELECT  Name, Vdate, DocNumber, Narr AS Particular, Dr, Cr,Type FROM  (SELECT '2/1/1801' AS Vdate, 'OPN' AS Short, 0 AS Vnumber, Name, Dr, Cr, 'Opening Balance' AS Narr, ' ' AS DocNumber, 'Opening' AS Type FROM  (SELECT Name, SUM(Dr) AS Dr, SUM(Cr) AS Cr    FROM  (SELECT 0 AS sr, Name, " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance<0", "-1*(ACCOUNT.Balance)", "0") + " AS Cr    FROM  ACCOUNT    UNION ALL    SELECT 1 AS sr, Name, SUM(Dr) AS Dr, SUM(Cr) AS Cr   FROM  QryJournal   WHERE (Vdate < '" + DateFrom.ToString(Database.dformat) + "')   GROUP BY Name, A   HAVING (A = 'True')) AS X   GROUP BY Name) AS Y   UNION ALL   SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, VOUCHERINFO.Vnumber, ACCOUNT_1.Name, " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr ,  VOUCHERINFO.Narr, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112)   + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber, VOUCHERTYPE.Type as Type FROM  JOURNAL INNER JOIN   ACCOUNT AS ACCOUNT_1 ON JOURNAL.Ac_id = ACCOUNT_1.Ac_id INNER JOIN   VOUCHERINFO ON JOURNAL.Vi_id = VOUCHERINFO.Vi_id INNER JOIN   VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id   WHERE ( JOURNAL.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND ( VOUCHERTYPE.A = 'True')) AS aman ORDER BY Vdate, Short, Vnumber";
            }
            else
            {
                sql = "SELECT Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name, ACCOUNT.Dr2 as Dr, ACCOUNT.Cr2 as Cr From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, JOURNAL.Dr, JOURNAL.Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS aman ORDER BY aman.Vdate, aman.Short, aman.Vnumber";
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            if (accnm == "/*All*/")
            {
                drow = dt.Select("Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ");
            }
            else
            {
                drow = dt.Select("Name='" + accnm + "' and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            }

            tdt.Clear();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt.DefaultView.Sort = "Vdate";
                tdt.Columns.Add("RunningBalance", typeof(decimal));
                tdt.Columns.Add("Dr/Cr", typeof(string));


                string act_id = funs.Select_AccTypeid(accnm);


                string mainactname = funs.Select_act_nm(act_id);
                if (funs.Select_act_fixed(mainactname) == false)
                {
                    bool fix = false;
                    while (fix == false)
                    {
                        string under = funs.Select_act_under(mainactname);
                        mainactname = funs.Select_act_nm(under);
                        fix = funs.Select_act_fixed(mainactname);

                    }

                }

                if (mainactname == "SUNDRY DEBTORS")
                {
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Sale" || tdt.Rows[i]["Type"].ToString() == "Return")
                        {
                            DataTable dtSalenarr = new DataTable();
                            string narr = "";
                            Database.GetSqlData("SELECT DISTINCT  VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber,  Description.Description, Description.Pack, VOUCHERDET.Quantity, VOUCHERDET.Rate_am, VOUCHERDET.Amount, VOUCHERDET.Remark1,  VOUCHERDET.Remark2, VOUCHERINFO.Ac_id  FROM VOUCHERINFO INNER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id LEFT OUTER JOIN   VOUCHERDET ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id LEFT OUTER JOIN  Description ON VOUCHERDET.Des_ac_id = Description.Des_id WHERE  (VOUCHERTYPE.Type = 'Sale'  or VOUCHERTYPE.Type = 'Return') and Voucherinfo.Ac_id=" + funs.Select_ac_id(accnm) + " AND (VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) = '" + tdt.Rows[i]["DocNumber"].ToString() + "')", dtSalenarr);
                            for (int j = 0; j < dtSalenarr.Rows.Count; j++)
                            {
                                narr += dtSalenarr.Rows[j]["Description"].ToString() + "     " + funs.DecimalPoint(double.Parse(dtSalenarr.Rows[j]["Quantity"].ToString()), 0) + "  " + dtSalenarr.Rows[j]["Pack"].ToString() + "     " + funs.DecimalPoint(double.Parse(dtSalenarr.Rows[j]["Rate_am"].ToString()), 2) + "/" + dtSalenarr.Rows[j]["Pack"].ToString() + "     " + funs.DecimalPoint(double.Parse(dtSalenarr.Rows[j]["Amount"].ToString()), 2) + "     " + dtSalenarr.Rows[j]["Remark1"].ToString() + "     " + dtSalenarr.Rows[j]["Remark2"].ToString() + Environment.NewLine;
                            }

                            if (narr != "")
                            {

                                narr = narr.Remove(narr.Length - 2);
                            }




                            tdt.Rows[i]["Particular"] = narr;


                        }

                        //  tdt.Rows[i]["Particular"] = "Test";
                    }

                }


                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                    totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());
                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                        tdt.Rows[i]["Dr/Cr"] = "Dr.";
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                        tdt.Rows[i]["Dr/Cr"] = "Cr.";
                    }
                    else
                    {
                        tdt.Rows[i]["RunningBalance"] = "0";
                    }

                    if (DateTime.Parse(tdt.Rows[i]["Vdate"].ToString()).Year.ToString() == "1801")
                    {
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = 0;
                    }
                }

            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            else
            {
                tdt.Columns.Remove("Type");
            }
            tdt.DefaultView.Sort = "Vdate";

            string[,] col = new string[2, 3] { { "Name", "1", "0" }, { "Vdate", "1", "0" } };

            //string[,] Cwidth = new string[8, 6] { 
            //{ "Acoount", "0", "0","","","" },
            //{ "Vdate", "0", "0","" ,"",""},
            //{ "Document No.", "180", "0","" ,"",""},
            //{ "Particular", "500", "0","" ,"",""  },
            //{ "Amount Dr.", "80", "1","|sum(Dr)","" ,""  },
            //{ "Amount Cr.", "80", "1","|sum(Cr)" ,"" ,"" },
            //{ "Running Balance", "100", "0","" ,"" ,"" }, 
            //{ "Dr./Cr.", "50", "0","","" ,""  } };

            string[,] Cwidth = new string[8, 8] { 
            { "Acoount", "0", "0","","","","","" },
            { "Vdate", "0", "0","" ,"","","",""},
            { "Document No.", "200", "0","" ,"","","",""},
            { "Particular", "330", "0","" ,"","","",""  },
            { "Amount Dr.", "140", "1","|sum(Dr)","" ,"","",""  },
            { "Amount Cr.", "140", "1","|sum(Cr)" ,"" ,"","","" },
            { "Running Balance", "140", "0","" ,"" ,"","","" }, 
            { "Dr./Cr.", "50", "0","","" ,"","",""  } };



            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool Ledger(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            checkBox1.Text = "Inventory Required";
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            frmptyp = "Ledger";
            this.Text = frmptyp;
            checkBox1.Visible = true;
            DecsOfReport = "Ledger \n " + accnm + "\n" + DateFrom.ToString(Database.dformat) + " - " + DateTo.ToString(Database.dformat);
            double op1 = 0, op2 = 0, opening = 0;

            if (Database.IsKacha == false)
            {
                op1 = Database.GetScalarDecimal("SELECT Balance FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }
            else
            {
                op1 = Database.GetScalarDecimal("SELECT Balance2 FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }

            if (Database.DatabaseType == "sql")
            {
                if (Database.IsKacha == false)
                {
                    op2 = Database.GetScalarDecimal("SELECT SUM(Journal.Amount) AS Amount FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNT.Name = '" + accnm + "') AND (Journal.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERTYPE.A = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ")");

                    if (checkBox1.Checked == true)
                    {
                        sql = "SELECT Journal.Vdate,VOUCHERTYPE.Type AS vtype, VOUCHERINFO.Invoiceno,  '' as ToBy, ACCOUNT_1.Name AS Particular,Journal.Reffno as Reff, Voucherdet.Description, Voucherdet.packing,case when Voucherdet.Quantity is null then 0 Else Voucherdet.Quantity End as Quantity,case when Voucherdet.weight is null then 0 Else Voucherdet.weight End as weight,case when Voucherdet.Rate_am is null then 0 else Voucherdet.Rate_am End as Rate_am , 0.001 as Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, Journal.Vi_id FROM ACCOUNT RIGHT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id LEFT OUTER JOIN Voucherdet ON Journal.Sno = Voucherdet.Itemsr AND Journal.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE (VOUCHERTYPE.A = 1) AND (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name,Journal.Reffno, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, ACCOUNT.Name, Journal.Vi_id HAVING (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')   order by Journal.Vdate,Vouchertype.type,Voucherinfo.Invoiceno, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        sql = "SELECT Journal.Vdate, VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno, '' as ToBy, ACCOUNT_1.Name AS Particular, 0.001 AS Amount,Journal.Narr,Journal.Reffno as Reff , " + access_sql.fnstring("SUM(Journal.Amount) > 0", "SUM(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("SUM(Journal.Amount) < 0", "-1 * SUM(Journal.Amount)", "0") + " AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (VOUCHERTYPE.A =  " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr,Journal.Reffno, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')  ORDER BY Journal.Vdate, VOUCHERTYPE.Type, VOUCHERINFO.Invoiceno, Max(Journal.Sno) ";
                    }

                    else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        sql = "SELECT     dbo.Journal.Vdate,dbo.VOUCHERTYPE.Type AS vtype, dbo.VOUCHERINFO.Invoiceno,  '' AS ToBy, CASE WHEN SUM(Journal.amount) > 0 THEN ACCOUNT.Name ELSE ACCOUNT_3.Name END AS Particular, dbo.Journal.Narr,'' As Reff, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount)  ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, dbo.Journal.Vi_id FROM         dbo.VOUCHERINFO LEFT OUTER JOIN   dbo.ACCOUNT ON dbo.VOUCHERINFO.Cr_Ac_id = dbo.ACCOUNT.Ac_id LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_3 ON dbo.VOUCHERINFO.Dr_Ac_id = ACCOUNT_3.Ac_id LEFT OUTER JOIN  dbo.VOUCHERTYPE ON dbo.VOUCHERINFO.Vt_id = dbo.VOUCHERTYPE.Vt_id RIGHT OUTER JOIN  dbo.ACCOUNT AS ACCOUNT_2 RIGHT OUTER JOIN  dbo.Journal LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_1 ON dbo.Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT_2.Ac_id = dbo.Journal.Ac_id ON   dbo.VOUCHERINFO.Vi_id = dbo.Journal.Vi_id WHERE     (dbo.VOUCHERTYPE.A = 'true') GROUP BY dbo.Journal.Vdate, dbo.VOUCHERINFO.Invoiceno, dbo.Journal.Vi_id, dbo.Journal.Narr, ACCOUNT_2.Name, dbo.VOUCHERTYPE.Type, ACCOUNT_3.Name,  dbo.ACCOUNT.Name HAVING      (dbo.Journal.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (dbo.Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (ACCOUNT_2.Name = '" + accnm + "')";

                    }


                }
                else
                {
                    op2 = Database.GetScalarDecimal("SELECT SUM(Journal.Amount) AS Amount FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNT.Name = '" + accnm + "') AND (Journal.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERTYPE.B = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ")");
                    if (checkBox1.Checked == true)
                    {
                        sql = "SELECT Journal.Vdate, dbo.VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno, '' as ToBy, ACCOUNT_1.Name AS Particular,journal.Reffno as Reff, Voucherdet.Description, Voucherdet.packing, case when Voucherdet.Quantity is null then 0 Else Voucherdet.Quantity End as Quantity,case when Voucherdet.weight is null then 0 Else Voucherdet.weight End as weight,case when Voucherdet.Rate_am is null then 0 else Voucherdet.Rate_am End as Rate_am , 0.001 as Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, Journal.Vi_id FROM ACCOUNT RIGHT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id LEFT OUTER JOIN Voucherdet ON Journal.Sno = Voucherdet.Itemsr AND Journal.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE (VOUCHERTYPE.B = 1) AND (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, journal.Reffno,VOUCHERTYPE.Type, ACCOUNT_1.Name, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, ACCOUNT.Name, Journal.Vi_id HAVING (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')  order by Journal.Vdate,Vouchertype.type,Voucherinfo.Invoiceno, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        sql = "SELECT Journal.Vdate,dbo.VOUCHERTYPE.Type AS vtype, VOUCHERINFO.Invoiceno,'' as ToBy, ACCOUNT_1.Name AS Particular,0.001 AS Amount, Journal.Narr,journal.Reffno as Reff, " + access_sql.fnstring("SUM(Journal.Amount) > 0", "SUM(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("SUM(Journal.Amount) < 0", "-1 * SUM(Journal.Amount)", "0") + " AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (VOUCHERTYPE.B =  " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr,journal.Reffno, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')   ORDER BY Journal.Vdate, VOUCHERTYPE.Type, VOUCHERINFO.Invoiceno, Max(Journal.Sno) ";
                    }

                    else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        sql = "SELECT     dbo.Journal.Vdate,  dbo.VOUCHERTYPE.Type AS vtype,dbo.VOUCHERINFO.Invoiceno, '' AS ToBy, CASE WHEN SUM(Journal.amount) > 0 THEN ACCOUNT.Name ELSE ACCOUNT_3.Name END AS Particular, dbo.Journal.Narr,'' As Reff, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount)  ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, dbo.Journal.Vi_id FROM         dbo.VOUCHERINFO LEFT OUTER JOIN   dbo.ACCOUNT ON dbo.VOUCHERINFO.Cr_Ac_id = dbo.ACCOUNT.Ac_id LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_3 ON dbo.VOUCHERINFO.Dr_Ac_id = ACCOUNT_3.Ac_id LEFT OUTER JOIN  dbo.VOUCHERTYPE ON dbo.VOUCHERINFO.Vt_id = dbo.VOUCHERTYPE.Vt_id RIGHT OUTER JOIN  dbo.ACCOUNT AS ACCOUNT_2 RIGHT OUTER JOIN  dbo.Journal LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_1 ON dbo.Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT_2.Ac_id = dbo.Journal.Ac_id ON   dbo.VOUCHERINFO.Vi_id = dbo.Journal.Vi_id WHERE     (dbo.VOUCHERTYPE.B = 'true') GROUP BY dbo.Journal.Vdate, dbo.VOUCHERINFO.Invoiceno, dbo.Journal.Vi_id, dbo.Journal.Narr, ACCOUNT_2.Name, dbo.VOUCHERTYPE.Type, ACCOUNT_3.Name,  dbo.ACCOUNT.Name HAVING      (dbo.Journal.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (dbo.Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (ACCOUNT_2.Name = '" + accnm + "')";
                        //sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype,'' as ToBy, ACCOUNT_1.Name AS Particular, Journal.Narr, 0.001 as Amount, " + access_sql.fnstring("SUM(Journal.Amount) > 0", "SUM(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("SUM(Journal.Amount) < 0", "-1 * SUM(Journal.Amount)", "0") + " AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (VOUCHERTYPE.A =  " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')";
                    }

                }
            }

            else
            {
                if (Database.IsKacha == false)
                {
                    op2 = Database.GetScalarDecimal("SELECT Sum(Journal.Amount) AS Amount FROM ((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id WHERE (((ACCOUNT.Name)='" + accnm + "') AND ((Journal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + "))");

                    if (checkBox1.Checked == true)
                    {
                        // sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, 0.001 AS Amount, Sum(IIf(Journal.Amount>0,Journal.Amount,0)) AS Dr, Sum(IIf(Journal.Amount<0,-1*Journal.Amount,0)) AS Cr, Journal.Vi_id FROM ((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Journal.Sno = Voucherdet.Itemsr) AND (Journal.Vi_id = Voucherdet.Vi_id) WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, '', ACCOUNT_1.Name, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, 0, Journal.Vi_id";
                        sql = "SELECT Journal.Vdate,VOUCHERTYPE.Type AS vtype, VOUCHERINFO.Invoiceno,  '' AS ToBy, ACCOUNT_1.Name AS Particular, Journal.Reffno AS Reff, Voucherdet.Description, Voucherdet.packing,iif(Voucherdet.Quantity is null,0,Voucherdet.Quantity) as Quantity, iif(Voucherdet.weight is null,0,Voucherdet.weight) as Weight, iif(Voucherdet.Rate_am is null ,0,Voucherdet.Rate_am) as Rate_am, 0.001 AS Amount, IIf(sum(Journal.Amount)>0,sum(Journal.Amount),0) AS Dr, IIf(sum(Journal.Amount)<0,sum(-1*Journal.Amount),0) AS Cr, Journal.Vi_id FROM ((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Journal.Vi_id = Voucherdet.Vi_id) AND (Journal.Sno = Voucherdet.Itemsr) WHERE (((Journal.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (Journal.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=True)) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, '', ACCOUNT_1.Name, Journal.Reffno, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, Journal.Vi_id, 0 order by Journal.Vdate,Vouchertype.type,Voucherinfo.Invoiceno,Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type") == "Detailed")
                    {
                        //  sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Journal.Narr, 0.001 AS Amount, Sum(IIf(Journal.Amount>0,Journal.Amount,0)) AS Dr, Sum(IIf(Journal.Amount<0,-1*Journal.Amount,0)) AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM (((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, '', ACCOUNT_1.Name, Journal.Narr, 0, Journal.Vi_id";
                        sql = "SELECT Journal.Vdate, VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno,  '' AS ToBy, ACCOUNT_1.Name AS Particular,0.001 AS Amount, Journal.Narr, Journal.Reffno  AS Reff , IIf(sum(Journal.Amount)>0,sum(Journal.Amount),0) AS Dr, IIf(sum(Journal.Amount)<0,-1*sum(Journal.Amount),0) AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, Journal.Vi_id FROM (((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=True)) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name, Journal.Narr, Journal.Reffno, '', Journal.Vi_id, 0 ORDER BY Journal.Vdate, VOUCHERTYPE.Type, VOUCHERINFO.Invoiceno, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type") == "Summarized")
                    {
                        sql = "SELECT Journal.Vdate,VOUCHERTYPE.Type AS vtype,  Voucherinfo.InvoiceNo ,  '' AS ToBy, IIf(Sum(Journal.amount)>0,ACCOUNT_3.Name,ACCOUNT_2.Name) AS Particular, Journal.Narr,'' As Reff, IIf(sum(Journal.Amount)>0,sum(Journal.Amount),0) AS Dr, IIf(sum(Journal.Amount)<0,-1*sum(Journal.Amount),0) AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, Journal.Vi_id FROM (((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_2 ON VOUCHERINFO.Dr_Ac_id = ACCOUNT_2.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_3 ON VOUCHERINFO.Cr_Ac_id = ACCOUNT_3.Ac_id WHERE (((Journal.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (Journal.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=True)) GROUP BY Journal.Vdate, VOUCHERTYPE.Type,Voucherinfo.InvoiceNo ,Journal.Narr, '', Journal.Vi_id, 0, ACCOUNT_2.Name, ACCOUNT_3.Name";
                    }
                }
                else
                {
                    op2 = Database.GetScalarDecimal("SELECT Sum(Journal.Amount) AS Amount FROM ((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id WHERE (((ACCOUNT.Name)='" + accnm + "') AND ((Journal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + "))");

                    if (checkBox1.Checked == true)
                    {
                        // sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, 0.001 AS Amount, Sum(IIf(Journal.Amount>0,Journal.Amount,0)) AS Dr, Sum(IIf(Journal.Amount<0,-1*Journal.Amount,0)) AS Cr, Journal.Vi_id FROM ((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Journal.Sno = Voucherdet.Itemsr) AND (Journal.Vi_id = Voucherdet.Vi_id) WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, '', ACCOUNT_1.Name, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, 0, Journal.Vi_id";
                        sql = "SELECT Journal.Vdate, VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno,  '' AS ToBy, ACCOUNT_1.Name AS Particular, Journal.Reffno AS Reff, Voucherdet.Description, Voucherdet.packing,iif(Voucherdet.Quantity is null,0,Voucherdet.Quantity) as Quantity, iif(Voucherdet.weight is null,0,Voucherdet.weight) as Weight, iif(Voucherdet.Rate_am is null ,0,Voucherdet.Rate_am) as Rate_am, 0.001 AS Amount, IIf(sum(Journal.Amount)>0,sum(Journal.Amount),0) AS Dr, IIf(sum(Journal.Amount)<0,-1*sum(Journal.Amount),0) AS Cr, Journal.Vi_id FROM ((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Journal.Vi_id = Voucherdet.Vi_id) AND (Journal.Sno = Voucherdet.Itemsr) WHERE (((Journal.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (Journal.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.B)=True)) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, '', ACCOUNT_1.Name, Journal.Reffno, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, Journal.Vi_id, 0 order by Journal.Vdate,Vouchertype.type,Voucherinfo.Invoiceno,, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type") == "Detailed")
                    {
                        //  sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Journal.Narr, 0.001 AS Amount, Sum(IIf(Journal.Amount>0,Journal.Amount,0)) AS Dr, Sum(IIf(Journal.Amount<0,-1*Journal.Amount,0)) AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM (((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, '', ACCOUNT_1.Name, Journal.Narr, 0, Journal.Vi_id";
                        sql = "SELECT Journal.Vdate, VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno,  '' AS ToBy, ACCOUNT_1.Name AS Particular, 0.001 AS Amount,Journal.Narr, Journal.Reffno, IIf(sum(Journal.Amount)>0,sum(Journal.Amount),0) AS Dr, IIf(sum(Journal.Amount)<0,-1*sum(Journal.Amount),0) AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, Journal.Vi_id FROM (((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id WHERE (((Journal.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (Journal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.B)=True)) GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name, Journal.Narr, Journal.Reffno, '', Journal.Vi_id, 0 ORDER BY Journal.Vdate, VOUCHERTYPE.Type, VOUCHERINFO.Invoiceno, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type") == "Summarized")
                    {
                        sql = "SELECT Journal.Vdate, VOUCHERTYPE.Type AS vtype, Voucherinfo.InvoiceNo ,  '' AS ToBy, IIf(Sum(Journal.amount)>0,ACCOUNT_3.Name,ACCOUNT_2.Name) AS Particular, Journal.Narr,'' As Reff, IIf(sum(Journal.Amount)>0,sum(Journal.Amount),0) AS Dr, IIf(sum(Journal.Amount)<0,-1*sum(Journal.Amount),0) AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, Journal.Vi_id FROM (((((Journal LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_2 ON VOUCHERINFO.Dr_Ac_id = ACCOUNT_2.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_3 ON VOUCHERINFO.Cr_Ac_id = ACCOUNT_3.Ac_id WHERE (((Journal.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (Journal.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((ACCOUNT.Name)='" + accnm + "') AND ((VOUCHERTYPE.B)=True)) GROUP BY Journal.Vdate, VOUCHERTYPE.Type,Voucherinfo.InvoiceNo ,Journal.Narr, '', Journal.Vi_id, 0, ACCOUNT_2.Name, ACCOUNT_3.Name";
                    }
                }
            }

            opening = op1 + op2;

            tdt = new DataTable();
            Database.GetSqlData(sql, tdt);

            if (opening > 0.00)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = DateFrom.AddDays(-1).ToString(Database.dformat);
                tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Balance";
                tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";
                tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";

                if (checkBox1.Checked == true)
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                }
                else if (Feature.Available("Default Ledger Type") == "Detailed" || Feature.Available("Default Ledger Type") == "DETAILED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;

                }
                else if (Feature.Available("Default Ledger Type") == "Summarized" || Feature.Available("Default Ledger Type") == "SUMMARIZED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                }


                tdt.Rows[tdt.Rows.Count - 1]["Dr"] = opening;
                tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
            }
            else if (opening < 0)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = DateFrom.AddDays(-1).ToString(Database.dformat);
                tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Balance";
                tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";


                if (checkBox1.Checked == true)
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";

                }
                else if (Feature.Available("Default Ledger Type") == "Detailed" || Feature.Available("Default Ledger Type") == "DETAILED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;

                }
                else if (Feature.Available("Default Ledger Type") == "Summarized" || Feature.Available("Default Ledger Type") == "SUMMARIZED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                }


                tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                tdt.Rows[tdt.Rows.Count - 1]["Cr"] = -1 * opening;
                tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
            }

            DataView view = tdt.DefaultView;
            view.Sort = "Vdate";
            tdt = view.ToTable();



            DataTable dtref = new DataTable();
            Database.GetSqlData("SELECT Journal.Vi_id, " + access_sql.fnstring("Journal.Reffno is null", "' '", "Journal.Reffno") + " as Reffno FROM Journal WHERE (((Journal.Ac_id)='" + funs.Select_ac_id(accnm) + "')) GROUP BY Journal.Vi_id, Journal.Reffno, Journal.Sno order by Sno", dtref);

            string lastvid = "-1";
            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                if (double.Parse(tdt.Rows[i]["Dr"].ToString()) > 0)
                {
                    tdt.Rows[i]["ToBy"] = "To";
                    if (Feature.Available("Default Ledger Type") == "Summarized" || Feature.Available("Default Ledger Type") == "SUMMARIZED")
                    {
                        if (dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").Length == 0)
                        {
                            tdt.Rows[i]["Reff"] = "";
                        }
                        else
                        {
                            tdt.Rows[i]["Reff"] = dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").FirstOrDefault()["Reffno"].ToString();
                        }
                    }

                    //if (Feature.Available("Default Ledger Type") != "Summarized")
                    //{
                    if (checkBox1.Checked == true || Feature.Available("Default Ledger Type") == "Detailed" || Feature.Available("Default Ledger Type") == "DETAILED")
                    {
                        tdt.Rows[i]["Amount"] = tdt.Rows[i]["Dr"].ToString();
                    }
                    //}
                }
                else if (double.Parse(tdt.Rows[i]["Cr"].ToString()) > 0)
                {
                    tdt.Rows[i]["ToBy"] = "By";
                    if (Feature.Available("Default Ledger Type") == "Summarized" || Feature.Available("Default Ledger Type") == "SUMMARIZED")
                    {

                        if (dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"] + "'").Length == 0)
                        {
                            tdt.Rows[i]["Reff"] = "";
                        }
                        else
                        {
                            tdt.Rows[i]["Reff"] = dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").FirstOrDefault()["Reffno"].ToString();
                        }
                    }
                    //if (Feature.Available("Default Ledger Type") != "Summarized")
                    //{
                    if (checkBox1.Checked == true || Feature.Available("Default Ledger Type") == "Detailed" || Feature.Available("Default Ledger Type") == "DETAILED")
                    {
                        tdt.Rows[i]["Amount"] = tdt.Rows[i]["Cr"].ToString();
                    }
                    //}
                }



                if (lastvid != tdt.Rows[i]["Vi_id"].ToString())
                {
                    double amt = 0;
                    amt = double.Parse(tdt.Compute("sum(Dr)-Sum(Cr)", "Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").ToString());
                    if (amt > 0)
                    {
                        tdt.Rows[i]["Dr"] = amt;
                        tdt.Rows[i]["Cr"] = 0;

                    }
                    else
                    {
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = -1 * amt;
                    }
                    if (checkBox1.Checked == false)
                    {
                        totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                        totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());


                        if (totdr > totcr)
                        {
                            tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                            tdt.Rows[i]["Dr_Cr"] = "Dr.";
                        }
                        else if (totcr > totdr)
                        {
                            tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                            tdt.Rows[i]["Dr_Cr"] = "Cr.";
                        }
                        else
                        {
                            tdt.Rows[i]["RunningBalance"] = "0";
                        }




                    }
                }
                else
                {
                    tdt.Rows[i]["Dr"] = 0;
                    tdt.Rows[i]["Cr"] = 0;
                    if (checkBox1.Checked == false)
                    {
                        tdt.Rows[i]["RunningBalance"] = 0;
                        tdt.Rows[i]["Dr_Cr"] = "";
                    }
                    tdt.Rows[i]["Vtype"] = "";
                    tdt.Rows[i]["Invoiceno"] = "";

                }
                lastvid = tdt.Rows[i]["Vi_id"].ToString();
            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            if (checkBox1.Checked == true)
            {
                double sumdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
                double sumcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());

                if (sumdr > sumcr)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";


                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    }
                    else
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    }
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumdr - sumcr;
                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = sumdr - sumcr;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
                else if (sumcr > sumdr)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";
                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    }
                    else
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    }
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumcr - sumdr;
                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = sumcr - sumdr;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
            }


            string[,] col = new string[0, 0];

            if (checkBox1.Checked == true)
            {
                if (Feature.Available("Weight Required").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[15, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                          { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                      
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "150", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                        { "Item", "150", "0","" ,"","","",""  },
                        { "Pack", "80", "0","" ,"","","",""  },
                        { "Qty", "70", "1","" ,"","","",""  },
                        { "Weight", "70", "1","" ,"","","",""  },
                        { "Rate", "70", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "95", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "95", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    tdt.Columns.Remove("weight");
                    string[,] Cwidth = new string[14, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                          { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                      
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "150", "0","" ,"","","",""  },
                         { "Reff", "100", "0","" ,"","","",""  },
                        { "Item", "150", "0","" ,"","","",""  },
                        { "Pack", "60", "0","" ,"","","",""  },
                        { "Qty", "50", "1","" ,"","","",""  },
                        { "Rate", "80", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
            }
            else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
            {
                if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[13, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "200", "0","" ,"","","",""  },
                         { "Amount", "100", "0","","" ,"","",""  },
                        { "Narration", "200", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    tdt.Columns.Remove("Narr");
                    string[,] Cwidth = new string[12, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "250", "0","" ,"","","",""  },
                         { "Amount", "100", "0","","" ,"","",""  },
                       
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }

                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[12, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }


                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Narr");
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[11, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "200", "0","" ,"","","",""  },
                        { "Vch No", "250", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        
                         { "Amount", "150", "0","","" ,"","",""  },
                       
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }


            }
            else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
            {
                tdt.Columns.Remove("ToBy");
                if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[11, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                       
                        
                        { "Particular", "250", "0","" ,"","","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                        { "Debit", "110", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "110", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Narr");
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[9, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "200", "0","" ,"","","",""  },
                       
                        { "Reff", "200", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "270", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[10, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    tdt.Columns.Remove("Narr");
                    string[,] Cwidth = new string[10, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        { "Particular", "250", "0","" ,"","","",""  },
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
            }



            //  dtFinal = tdt.Copy();
            return true;
        }

        public bool AccGroupLedger(DateTime DateFrom, DateTime DateTo, string grpname)
        {
            DataTable dtnew = new DataTable();
            DataTable dtgrp = new DataTable();
            Database.GetSqlData("Select Name from Account where Act_id='"+funs.Select_AccType_id(grpname) +"'",dtgrp);
            for (int k = 0; k < dtgrp.Rows.Count; k++)
            {
                string accnm =dtgrp.Rows[k]["Name"].ToString();
                checkBox1.Text = "Inventory Required";
                dataGridView1.Rows.Clear();
                dataGridView1.Columns.Clear();
                double totdr = 0;
                double totcr = 0;
                stdt = DateFrom;
                endt = DateTo;
                dateTimePicker1.Value = DateFrom;
                dateTimePicker2.Value = DateTo;
                label3.Enabled = true;
                textBox1.Enabled = true;
                textBox1.Text = grpname;
                frmptyp = "Account Group Ledger";
                this.Text = frmptyp;
                checkBox1.Visible = true;
                DecsOfReport = "Account Group Ledger \n " + grpname + "\n" + DateFrom.ToString(Database.dformat) + " - " + DateTo.ToString(Database.dformat);
                double op1 = 0, op2 = 0, opening = 0;

                if (Database.BMode == "A")
                {
                    op1 = Database.GetScalarDecimal("SELECT Balance FROM ACCOUNT WHERE Name = '" + accnm + "'");
                }
                else if (Database.BMode == "B")
                {
                    op1 = Database.GetScalarDecimal("SELECT Balance2 FROM ACCOUNT WHERE Name = '" + accnm + "'");
                }
                else if (Database.BMode == "AB")
                {
                    op1 = Database.GetScalarDecimal("SELECT Balance+Balance2 FROM ACCOUNT WHERE Name = '" + accnm + "'");
                }


                if (Database.DatabaseType == "sql")
                {

                    op2 = Database.GetScalarDecimal("SELECT SUM(Journal.Amount) AS Amount FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNT.Name = '" + accnm + "') AND (Journal.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal." + Database.BMode + " = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ")");

                    if (checkBox1.Checked == true)
                    {
                        sql = "SELECT ACCOUNT.Name as AccName,Journal.Vdate,VOUCHERTYPE.Type AS vtype, VOUCHERINFO.Invoiceno,  '' as ToBy, ACCOUNT_1.Name AS Particular,Journal.Reffno as Reff, Voucherdet.Description, Voucherdet.packing,case when Voucherdet.Quantity is null then 0 Else Voucherdet.Quantity End as Quantity,case when Voucherdet.weight is null then 0 Else Voucherdet.weight End as weight,case when Voucherdet.Rate_am is null then 0 else Voucherdet.Rate_am End as Rate_am , 0.001 as Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, Journal.Vi_id FROM ACCOUNT RIGHT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id LEFT OUTER JOIN Voucherdet ON Journal.Sno = Voucherdet.Itemsr AND Journal.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE (Journal." + Database.BMode + " = 1) AND (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name,Journal.Reffno, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, ACCOUNT.Name, Journal.Vi_id HAVING (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')   order by Journal.Vdate,Vouchertype.type,Voucherinfo.Invoiceno, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        sql = "SELECT ACCOUNT.Name as AccName,Journal.Vdate, VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno, '' as ToBy, ACCOUNT_1.Name AS Particular, 0.001 AS Amount,Journal.Narr,Journal.Reffno as Reff , " + access_sql.fnstring("SUM(Journal.Amount) > 0", "SUM(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("SUM(Journal.Amount) < 0", "-1 * SUM(Journal.Amount)", "0") + " AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (JOURNAL." + Database.BMode + " =  " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr,Journal.Reffno, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')  ORDER BY Journal.Vdate, VOUCHERTYPE.Type, VOUCHERINFO.Invoiceno, Max(Journal.Sno) ";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        sql = "SELECT   ACCOUNT_2.Name as AccName,   dbo.Journal.Vdate,dbo.VOUCHERTYPE.Type AS vtype, dbo.VOUCHERINFO.Invoiceno,  '' AS ToBy, CASE WHEN SUM(Journal.amount) > 0 THEN ACCOUNT.Name ELSE ACCOUNT_3.Name END AS Particular, dbo.Journal.Narr,'' As Reff, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount)  ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, dbo.Journal.Vi_id FROM         dbo.VOUCHERINFO LEFT OUTER JOIN   dbo.ACCOUNT ON dbo.VOUCHERINFO.Cr_Ac_id = dbo.ACCOUNT.Ac_id LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_3 ON dbo.VOUCHERINFO.Dr_Ac_id = ACCOUNT_3.Ac_id LEFT OUTER JOIN  dbo.VOUCHERTYPE ON dbo.VOUCHERINFO.Vt_id = dbo.VOUCHERTYPE.Vt_id RIGHT OUTER JOIN  dbo.ACCOUNT AS ACCOUNT_2 RIGHT OUTER JOIN  dbo.Journal LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_1 ON dbo.Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT_2.Ac_id = dbo.Journal.Ac_id ON   dbo.VOUCHERINFO.Vi_id = dbo.Journal.Vi_id WHERE     (dbo.Journal." + Database.BMode + " = 'true') GROUP BY dbo.Journal.Vdate, dbo.VOUCHERINFO.Invoiceno, dbo.Journal.Vi_id, dbo.Journal.Narr, ACCOUNT_2.Name, dbo.VOUCHERTYPE.Type, ACCOUNT_3.Name,  dbo.ACCOUNT.Name HAVING      (dbo.Journal.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (dbo.Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (ACCOUNT_2.Name = '" + accnm + "')";
                    }



                }



                opening = op1 + op2;

                tdt = new DataTable();
                Database.GetSqlData(sql, tdt);

                if (opening > 0.00)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["AccName"] =accnm;
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = DateFrom.AddDays(-1).ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";

                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;
                        tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;

                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    }


                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = opening;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
                else if (opening < 0)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["AccName"] = accnm;

                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = DateFrom.AddDays(-1).ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";


                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;
                        tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";

                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;

                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    }


                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = -1 * opening;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }

                DataView view = tdt.DefaultView;
                view.Sort = "Vdate";
                tdt = view.ToTable();



                DataTable dtref = new DataTable();
                Database.GetSqlData("SELECT Journal.Vi_id, " + access_sql.fnstring("Journal.Reffno is null", "' '", "Journal.Reffno") + " as Reffno FROM Journal WHERE (((Journal.Ac_id)='" + funs.Select_ac_id(accnm) + "')) GROUP BY Journal.Vi_id, Journal.Reffno, Journal.Sno order by Sno", dtref);

                string lastvid = "-1";
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (double.Parse(tdt.Rows[i]["Dr"].ToString()) > 0)
                    {
                        tdt.Rows[i]["ToBy"] = "To";
                        if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                        {
                            if (dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").Length == 0)
                            {
                                tdt.Rows[i]["Reff"] = "";
                            }
                            else
                            {
                                tdt.Rows[i]["Reff"] = dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").FirstOrDefault()["Reffno"].ToString();
                            }
                        }


                        if (checkBox1.Checked == true || Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                        {
                            tdt.Rows[i]["Amount"] = tdt.Rows[i]["Dr"].ToString();
                        }

                    }
                    else if (double.Parse(tdt.Rows[i]["Cr"].ToString()) > 0)
                    {
                        tdt.Rows[i]["ToBy"] = "By";
                        if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                        {

                            if (dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"] + "'").Length == 0)
                            {
                                tdt.Rows[i]["Reff"] = "";
                            }
                            else
                            {
                                tdt.Rows[i]["Reff"] = dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").FirstOrDefault()["Reffno"].ToString();
                            }
                        }
                        //if (Feature.Available("Default Ledger Type") != "Summarized")
                        //{
                        if (checkBox1.Checked == true || Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                        {
                            tdt.Rows[i]["Amount"] = tdt.Rows[i]["Cr"].ToString();
                        }
                        //}
                    }



                    if (lastvid != tdt.Rows[i]["Vi_id"].ToString())
                    {
                        double amt = 0;
                        amt = double.Parse(tdt.Compute("sum(Dr)-Sum(Cr)", "Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() + "'").ToString());
                        if (amt > 0)
                        {
                            tdt.Rows[i]["Dr"] = amt;
                        }
                        else
                        {
                            tdt.Rows[i]["Cr"] = -1 * amt;
                        }
                        if (checkBox1.Checked == false)
                        {
                            totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                            totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());


                            if (totdr > totcr)
                            {
                                tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                                tdt.Rows[i]["Dr_Cr"] = "Dr.";
                            }
                            else if (totcr > totdr)
                            {
                                tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                                tdt.Rows[i]["Dr_Cr"] = "Cr.";
                            }
                            else
                            {
                                tdt.Rows[i]["RunningBalance"] = "0";
                            }




                        }
                    }
                    else
                    {
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = 0;
                        if (checkBox1.Checked == false)
                        {
                            tdt.Rows[i]["RunningBalance"] = 0;
                            tdt.Rows[i]["Dr_Cr"] = "";
                        }
                        tdt.Rows[i]["Vtype"] = "";
                        tdt.Rows[i]["Invoiceno"] = "";

                    }
                    lastvid = tdt.Rows[i]["Vi_id"].ToString();
                }


                if (tdt.Rows.Count == 0)
                {
                    continue;
                }

                if (checkBox1.Checked == true)
                {
                    double sumdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
                    double sumcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());

                    if (sumdr > sumcr)
                    {
                        tdt.Rows.Add();
                        tdt.Rows[tdt.Rows.Count - 1]["AccName"] = accnm;

                        tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                        tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                        tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";


                        if (checkBox1.Checked == true)
                        {
                            tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                            tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                            tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                            tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                            tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                        }
                        else
                        {
                            tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                        }
                        tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumdr - sumcr;
                        tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Cr"] = sumdr - sumcr;
                        tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                    }
                    else if (sumcr > sumdr)
                    {
                        tdt.Rows.Add();
                        tdt.Rows[tdt.Rows.Count - 1]["AccName"] = accnm;

                        tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                        tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                        tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";
                        if (checkBox1.Checked == true)
                        {
                            tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                            tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                            tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                            tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                            tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                        }
                        else
                        {
                            tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                        }
                        tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumcr - sumdr;
                        tdt.Rows[tdt.Rows.Count - 1]["Dr"] = sumcr - sumdr;
                        tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                    }
                }
                if (dtnew.Rows.Count == 0)
                {

                    dtnew = tdt.Clone();
                }
                foreach (DataRow tdt1 in tdt.Rows)
                {
                   if (tdt.Rows.Count!=0)
                   {
                       dtnew.ImportRow(tdt1);
                   }
                }
           }
            if (dtnew.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[1, 3]{{"Accname","1","1"}};

            if (checkBox1.Checked == true)
            {
                if (Feature.Available("Weight Required").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[15, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                          { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                      
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "150", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                        { "Item", "150", "0","" ,"","","",""  },
                        { "Pack", "80", "0","" ,"","","",""  },
                        { "Qty", "70", "1","" ,"","","",""  },
                        { "Weight", "70", "1","" ,"","","",""  },
                        { "Rate", "70", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "95", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "95", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    dtnew.Columns.Remove("weight");
                    string[,] Cwidth = new string[15, 8] { 
                        { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                          { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                      
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "150", "0","" ,"","","",""  },
                         { "Reff", "100", "0","" ,"","","",""  },
                        { "Item", "100", "0","" ,"","","",""  },
                        { "Pack", "60", "0","" ,"","","",""  },
                        { "Qty", "50", "1","" ,"","","",""  },
                        { "Rate", "80", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "75", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "75", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }
            }
            else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
            {
                if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[14, 8] { 
                         { "AccName", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "170", "0","" ,"","","",""  },
                         { "Amount", "100", "0","","" ,"","",""  },
                        { "Narration", "170", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "80", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "80", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    dtnew.Columns.Remove("Narr");
                    string[,] Cwidth = new string[13, 8] { 
                        { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "250", "0","" ,"","","",""  },
                         { "Amount", "100", "0","","" ,"","",""  },
                       
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }

                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    dtnew.Columns.Remove("Particular");
                    string[,] Cwidth = new string[13, 8] {
                        { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }


                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    dtnew.Columns.Remove("Narr");
                    dtnew.Columns.Remove("Particular");
                    string[,] Cwidth = new string[12, 8] { 
                        { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "200", "0","" ,"","","",""  },
                        { "Vch No", "250", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        
                         { "Amount", "150", "0","","" ,"","",""  },
                       
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }


            }
            else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
            {
                dtnew.Columns.Remove("ToBy");
                if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[12, 8]
                    { 
                        { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                       
                        
                        { "Particular", "200", "0","" ,"","","",""  },
                        { "Narration", "200", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                        { "Debit", "110", "1","","|sum(Dr)" ,"","",""  },
                        { "Credit", "110", "1","" ,"|sum(Cr)" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    dtnew.Columns.Remove("Narr");
                    dtnew.Columns.Remove("Particular");
                    string[,] Cwidth = new string[10, 8]
                    { 
                         { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                       
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "270", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    dtnew.Columns.Remove("Particular");
                    string[,] Cwidth = new string[11, 8]
                    { 
                         { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                        { "Narration", "200", "0","" ,"","","",""  },
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    dtnew.Columns.Remove("Narr");
                    string[,] Cwidth = new string[11, 8]
                    { 
                         { "Accnm", "100", "0","" ,"","","",""},
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "125", "0","" ,"","","",""  },
                        { "Vch No", "125", "0","" ,"","","",""  },
                        { "Particular", "200", "0","" ,"","","",""  },
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(dtnew, col, Cwidth);
                }
            }



            //  dtFinal = tdt.Copy();
            return true;
        }
        public bool LedgerNew(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            checkBox1.Text = "Inventory Required";
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            frmptyp = "Ledger";
            this.Text = frmptyp;
            checkBox1.Visible = true;
            DecsOfReport = "Ledger \n " + accnm + "\n" + DateFrom.ToString(Database.dformat) + " - " + DateTo.ToString(Database.dformat);
            double op1 = 0, op2 = 0, opening = 0;

            if (Database.BMode=="A")
            {
                op1 = Database.GetScalarDecimal("SELECT Balance FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }
            else if(Database.BMode=="B")
            {
                op1 = Database.GetScalarDecimal("SELECT Balance2 FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }
            else if (Database.BMode == "AB")
            {
                op1 = Database.GetScalarDecimal("SELECT Balance+Balance2 FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }


            if (Database.DatabaseType == "sql")
            {
                    op2 = Database.GetScalarDecimal("SELECT SUM(Journal.Amount) AS Amount FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNT.Name = '" + accnm + "') AND (Journal.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal."+Database.BMode+" = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ")");

                    if (checkBox1.Checked == true)
                    {
                        sql = "SELECT Journal.Vdate,VOUCHERTYPE.Type AS vtype, VOUCHERINFO.Invoiceno,  '' as ToBy, ACCOUNT_1.Name AS Particular,Journal.Reffno as Reff, Voucherdet.Description, Voucherdet.packing,case when Voucherdet.Quantity is null then 0 Else Voucherdet.Quantity End as Quantity,case when Voucherdet.weight is null then 0 Else Voucherdet.weight End as weight,case when Voucherdet.Rate_am is null then 0 else Voucherdet.Rate_am End as Rate_am , 0.001 as Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, Journal.Vi_id FROM ACCOUNT RIGHT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id LEFT OUTER JOIN Voucherdet ON Journal.Sno = Voucherdet.Itemsr AND Journal.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE (Journal." + Database.BMode + " = 1) AND (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name,Journal.Reffno, Voucherdet.Description, Voucherdet.packing, Voucherdet.Quantity, Voucherdet.weight, Voucherdet.Rate_am, ACCOUNT.Name, Journal.Vi_id HAVING (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')   order by Journal.Vdate,Vouchertype.type,Voucherinfo.Invoiceno, Max(Journal.Sno)";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        sql = "SELECT Journal.Vdate, VOUCHERTYPE.Type AS vtype,VOUCHERINFO.Invoiceno, '' as ToBy, ACCOUNT_1.Name AS Particular, 0.001 AS Amount,Journal.Narr,Journal.Reffno as Reff , " + access_sql.fnstring("SUM(Journal.Amount) > 0", "SUM(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("SUM(Journal.Amount) < 0", "-1 * SUM(Journal.Amount)", "0") + " AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (JOURNAL." + Database.BMode + " =  " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr,Journal.Reffno, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "')  ORDER BY Journal.Vdate, VOUCHERTYPE.Type, VOUCHERINFO.Invoiceno, Max(Journal.Sno) ";
                    }
                    else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        sql = "SELECT     dbo.Journal.Vdate,dbo.VOUCHERTYPE.Type AS vtype, dbo.VOUCHERINFO.Invoiceno,  '' AS ToBy, CASE WHEN SUM(Journal.amount) > 0 THEN ACCOUNT.Name ELSE ACCOUNT_3.Name END AS Particular, dbo.Journal.Narr,'' As Reff, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount)  ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, dbo.Journal.Vi_id FROM         dbo.VOUCHERINFO LEFT OUTER JOIN   dbo.ACCOUNT ON dbo.VOUCHERINFO.Cr_Ac_id = dbo.ACCOUNT.Ac_id LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_3 ON dbo.VOUCHERINFO.Dr_Ac_id = ACCOUNT_3.Ac_id LEFT OUTER JOIN  dbo.VOUCHERTYPE ON dbo.VOUCHERINFO.Vt_id = dbo.VOUCHERTYPE.Vt_id RIGHT OUTER JOIN  dbo.ACCOUNT AS ACCOUNT_2 RIGHT OUTER JOIN  dbo.Journal LEFT OUTER JOIN   dbo.ACCOUNT AS ACCOUNT_1 ON dbo.Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT_2.Ac_id = dbo.Journal.Ac_id ON   dbo.VOUCHERINFO.Vi_id = dbo.Journal.Vi_id WHERE     (dbo.Journal." + Database.BMode + " = 'true') GROUP BY dbo.Journal.Vdate, dbo.VOUCHERINFO.Invoiceno, dbo.Journal.Vi_id, dbo.Journal.Narr, ACCOUNT_2.Name, dbo.VOUCHERTYPE.Type, ACCOUNT_3.Name,  dbo.ACCOUNT.Name HAVING      (dbo.Journal.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (dbo.Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (ACCOUNT_2.Name = '" + accnm + "')";
                    }

            }


            opening = op1 + op2;

            tdt = new DataTable();
            Database.GetSqlData(sql, tdt);

            if (opening > 0.00)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = DateFrom.AddDays(-1).ToString(Database.dformat);
                tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Balance";
                tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";
                tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";

                if (checkBox1.Checked == true)
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                }
                else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;

                }
                else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                }


                tdt.Rows[tdt.Rows.Count - 1]["Dr"] = opening;
                tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
            }
            else if (opening < 0)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = DateFrom.AddDays(-1).ToString(Database.dformat);
                tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Balance";
                tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";


                if (checkBox1.Checked == true)
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";

                }
                else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;

                }
                else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                }


                tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                tdt.Rows[tdt.Rows.Count - 1]["Cr"] = -1 * opening;
                tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
            }

            DataView view = tdt.DefaultView;
            view.Sort = "Vdate";
            tdt = view.ToTable();



            DataTable dtref = new DataTable();
            Database.GetSqlData("SELECT Journal.Vi_id, " + access_sql.fnstring("Journal.Reffno is null", "' '", "Journal.Reffno") + " as Reffno FROM Journal WHERE (((Journal.Ac_id)='" + funs.Select_ac_id(accnm) + "')) GROUP BY Journal.Vi_id, Journal.Reffno, Journal.Sno order by Sno", dtref);

            string lastvid = "-1";
            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                if (double.Parse(tdt.Rows[i]["Dr"].ToString()) > 0)
                {
                    tdt.Rows[i]["ToBy"] = "To";
                    if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {
                        if (dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'").Length == 0)
                        {
                            tdt.Rows[i]["Reff"] = "";
                        }
                        else
                        {
                            tdt.Rows[i]["Reff"] = dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'").FirstOrDefault()["Reffno"].ToString();
                        }
                    }

                    //if (Feature.Available("Default Ledger Type") != "Summarized")
                    //{
                    if (checkBox1.Checked == true || Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        tdt.Rows[i]["Amount"] = tdt.Rows[i]["Dr"].ToString();
                    }
                    //}
                }
                else if (double.Parse(tdt.Rows[i]["Cr"].ToString()) > 0)
                {
                    tdt.Rows[i]["ToBy"] = "By";
                    if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
                    {

                        if (dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"]+"'").Length == 0)
                        {
                            tdt.Rows[i]["Reff"] = "";
                        }
                        else
                        {
                            tdt.Rows[i]["Reff"] = dtref.Select("Vi_id='" + tdt.Rows[i]["Vi_id"].ToString()+"'").FirstOrDefault()["Reffno"].ToString();
                        }
                    }
                    //if (Feature.Available("Default Ledger Type") != "Summarized")
                    //{
                    if (checkBox1.Checked == true || Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
                    {
                        tdt.Rows[i]["Amount"] = tdt.Rows[i]["Cr"].ToString();
                    }
                    //}
                }



                if (lastvid != tdt.Rows[i]["Vi_id"].ToString())
                {
                    double amt = 0;
                    amt = double.Parse(tdt.Compute("sum(Dr)-Sum(Cr)", "Vi_id='" + tdt.Rows[i]["Vi_id"].ToString() +"'").ToString());
                    if (amt > 0)
                    {
                        tdt.Rows[i]["Dr"] = amt;
                    }
                    else
                    {
                        tdt.Rows[i]["Cr"] = -1 * amt;
                    }
                    if (checkBox1.Checked == false)
                    {
                        totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                        totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());


                        if (totdr > totcr)
                        {
                            tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                            tdt.Rows[i]["Dr_Cr"] = "Dr.";
                        }
                        else if (totcr > totdr)
                        {
                            tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                            tdt.Rows[i]["Dr_Cr"] = "Cr.";
                        }
                        else
                        {
                            tdt.Rows[i]["RunningBalance"] = "0";
                        }




                    }
                }
                else
                {
                    tdt.Rows[i]["Dr"] = 0;
                    tdt.Rows[i]["Cr"] = 0;
                    if (checkBox1.Checked == false)
                    {
                        tdt.Rows[i]["RunningBalance"] = 0;
                        tdt.Rows[i]["Dr_Cr"] = "";
                    }
                    tdt.Rows[i]["Vtype"] = "";
                    tdt.Rows[i]["Invoiceno"] = "";

                }
                lastvid = tdt.Rows[i]["Vi_id"].ToString();
            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            if (checkBox1.Checked == true)
            {
                double sumdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
                double sumcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());

                if (sumdr > sumcr)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";


                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    }
                    else
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    }
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumdr - sumcr;
                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = sumdr - sumcr;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
                else if (sumcr > sumdr)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";
                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["weight"] = 0;
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    }
                    else
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    }
                    tdt.Rows[tdt.Rows.Count - 1]["Reff"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumcr - sumdr;
                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = sumcr - sumdr;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
            }


            string[,] col = new string[0, 0];

            if (checkBox1.Checked == true)
            {
                if (Feature.Available("Weight Required").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[15, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                          { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                      
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "150", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                        { "Item", "150", "0","" ,"","","",""  },
                        { "Pack", "80", "0","" ,"","","",""  },
                        { "Qty", "70", "1","" ,"","","",""  },
                        { "Weight", "70", "1","" ,"","","",""  },
                        { "Rate", "70", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "95", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "95", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    tdt.Columns.Remove("weight");
                    string[,] Cwidth = new string[14, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                          { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                      
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "150", "0","" ,"","","",""  },
                         { "Reff", "100", "0","" ,"","","",""  },
                        { "Item", "150", "0","" ,"","","",""  },
                        { "Pack", "60", "0","" ,"","","",""  },
                        { "Qty", "50", "1","" ,"","","",""  },
                        { "Rate", "80", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
            }
            else if (Feature.Available("Default Ledger Type").ToUpper() == "DETAILED")
            {
                if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[13, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "200", "0","" ,"","","",""  },
                         { "Amount", "100", "0","","" ,"","",""  },
                        { "Narration", "200", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    tdt.Columns.Remove("Narr");
                    string[,] Cwidth = new string[12, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Particular", "250", "0","" ,"","","",""  },
                         { "Amount", "100", "0","","" ,"","",""  },
                       
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }

                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[12, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }


                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Narr");
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[11, 8] { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "200", "0","" ,"","","",""  },
                        { "Vch No", "250", "0","" ,"","","",""  },
                        
                        { "", "40", "0","" ,"","","",""  }, 
                        
                         { "Amount", "150", "0","","" ,"","",""  },
                       
                        { "Reff", "100", "0","" ,"","","",""  },
                       
                        { "Debit", "100", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "100", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "100", "1","","" ,"","",""  },
                        { "D/C", "40", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }


            }
            else if (Feature.Available("Default Ledger Type").ToUpper() == "SUMMARIZED")
            {
                tdt.Columns.Remove("ToBy");
                if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    string[,] Cwidth = new string[11, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "100", "0","" ,"","","",""  },
                        { "Vch No", "100", "0","" ,"","","",""  },
                       
                        
                        { "Particular", "250", "0","" ,"","","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "100", "0","" ,"","","",""  },
                        { "Debit", "110", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "110", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Narr");
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[9, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "200", "0","" ,"","","",""  },
                       
                        { "Reff", "200", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "270", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "YES" && Feature.Available("Particular Required on Ledger").ToUpper() == "NO")
                {
                    tdt.Columns.Remove("Particular");
                    string[,] Cwidth = new string[10, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                         { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
                else if (Feature.Available("Narration Required on Ledger").ToUpper() == "NO" && Feature.Available("Particular Required on Ledger").ToUpper() == "YES")
                {
                    tdt.Columns.Remove("Narr");
                    string[,] Cwidth = new string[10, 8]
                    { 
                        { "Vdate", "120", "0","" ,"","","",""},
                        { "Vch Type", "150", "0","" ,"","","",""  },
                        { "Vch No", "150", "0","" ,"","","",""  },
                        { "Particular", "250", "0","" ,"","","",""  },
                        { "Reff", "150", "0","" ,"","","",""  },
                        { "Debit", "160", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "160", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Balance", "120", "0","","" ,"","",""  },
                        { "D/C", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);
                }
            }



          //  dtFinal = tdt.Copy();
            return true;
        }

        public bool Ledger1(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            checkBox1.Text = "Inventory Required";
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            frmptyp = "Ledger";
            this.Text = frmptyp;
            checkBox1.Visible = true;
            DecsOfReport = "Ledger \n " + accnm + "\n" + DateFrom.ToString(Database.dformat) + " - " + DateTo.ToString(Database.dformat);
            double op1 = 0, op2 = 0, opening = 0;

            if (Database.IsKacha == false)
            {
                op1 = Database.GetScalarDecimal("SELECT Balance FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }
            else
            {
                op1 = Database.GetScalarDecimal("SELECT Balance2 FROM ACCOUNT WHERE Name = '" + accnm + "'");
            }

            if (Database.IsKacha == false)
            {
                op2 = Database.GetScalarDecimal("SELECT SUM(Journal.Amount) AS Amount FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNT.Name = '" + accnm + "') AND (Journal.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERTYPE.A = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ")");

                if (checkBox1.Checked == true)
                {
                    sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Voucherdet.Description, Voucherdet.packing, CASE WHEN Voucherdet.Quantity IS NULL THEN 0 ELSE Voucherdet.Quantity END AS Quantity, CASE WHEN Voucherdet.Rate_am IS NULL THEN 0 ELSE Voucherdet.Rate_am END AS Rate_am, 0.001 AS Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, Journal.Vi_id FROM ACCOUNT RIGHT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id LEFT OUTER JOIN Voucherdet ON Journal.Sno = Voucherdet.Itemsr AND Journal.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE (VOUCHERTYPE.A = 1) AND (Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name, Voucherdet.Description, Voucherdet.packing, ACCOUNT.Name, Journal.Vi_id, CASE WHEN Voucherdet.Quantity IS NULL THEN 0 ELSE Voucherdet.Quantity END, CASE WHEN Voucherdet.Rate_am IS NULL THEN 0 ELSE Voucherdet.Rate_am END,dbo.Journal.Sno HAVING (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "') order by journal.sno";
                }
                else
                {
                    sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Journal.Narr, 0.001 AS Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (VOUCHERTYPE.A = 'true') GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "') ORDER BY MAX(Journal.Sno)";
                    //sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype,'' as ToBy, ACCOUNT_1.Name AS Particular, Journal.Narr, 0.001 as Amount, " + access_sql.fnstring("SUM(Journal.Amount) > 0", "SUM(Journal.Amount)", "0") + " AS Dr, " + access_sql.fnstring("SUM(Journal.Amount) < 0", "-1 * SUM(Journal.Amount)", "0") + " AS Cr, 0.001 as RunningBalance, '' as Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (VOUCHERTYPE.A =  " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type,dbo.Journal.Sno HAVING (Journal.Vdate >=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "') order by journal.sno";
                }
            }
            else
            {
                op2 = Database.GetScalarDecimal("SELECT SUM(Journal.Amount) AS Amount FROM VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNT.Name = '" + accnm + "') AND (Journal.Vdate < " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERTYPE.B = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ")");

                if (checkBox1.Checked == true)
                {
                    sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Voucherdet.Description, Voucherdet.packing, CASE WHEN Voucherdet.Quantity IS NULL THEN 0 ELSE Voucherdet.Quantity END AS Quantity, CASE WHEN Voucherdet.Rate_am IS NULL THEN 0 ELSE Voucherdet.Rate_am END AS Rate_am, 0.001 AS Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, Journal.Vi_id FROM ACCOUNT RIGHT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id LEFT OUTER JOIN Voucherdet ON Journal.Sno = Voucherdet.Itemsr AND Journal.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE (VOUCHERTYPE.B = 1) AND (Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type, ACCOUNT_1.Name, Voucherdet.Description, Voucherdet.packing, ACCOUNT.Name, Journal.Vi_id, CASE WHEN Voucherdet.Quantity IS NULL THEN 0 ELSE Voucherdet.Quantity END, CASE WHEN Voucherdet.Rate_am IS NULL THEN 0 ELSE Voucherdet.Rate_am END,dbo.Journal.Sno HAVING (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "') order by journal.sno";
                }
                else
                {
                    sql = "SELECT Journal.Vdate, VOUCHERINFO.Invoiceno, VOUCHERTYPE.Type AS vtype, '' AS ToBy, ACCOUNT_1.Name AS Particular, Journal.Narr, 0.001 AS Amount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr, 0.001 AS RunningBalance, '' AS Dr_Cr, Journal.Vi_id FROM VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Opp_acid = ACCOUNT_1.Ac_id ON ACCOUNT.Ac_id = Journal.Ac_id ON VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (VOUCHERTYPE.B = 'true') GROUP BY Journal.Vdate, VOUCHERINFO.Invoiceno, Journal.Vi_id, Journal.Narr, ACCOUNT.Name, ACCOUNT_1.Name, VOUCHERTYPE.Type HAVING (Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (ACCOUNT.Name = '" + accnm + "') ORDER BY MAX(Journal.Sno)";
                }
            }           

            opening = op1 + op2;

            tdt = new DataTable();
            Database.GetSqlData(sql, tdt);

            if (opening > 0.00)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker1.Value.ToString(Database.dformat);
                tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Opening Balance";
                tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";

                if (checkBox1.Checked == true)
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                    
                    tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                }
                else
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                }

                tdt.Rows[tdt.Rows.Count - 1]["Amount"] = opening;
                tdt.Rows[tdt.Rows.Count - 1]["Dr"] = opening;
                tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
            }
            else if (opening < 0)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker1.Value.ToString(Database.dformat);
                tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Opening Balance";
                tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";

                if (checkBox1.Checked == true)
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                    
                    tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                }
                else
                {
                    tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                }

                tdt.Rows[tdt.Rows.Count - 1]["Amount"] = -1 * opening;
                tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                tdt.Rows[tdt.Rows.Count - 1]["Cr"] = -1 * opening;
                tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
            }

            DataView view = tdt.DefaultView;
            view.Sort = "Vdate";
            tdt = view.ToTable();

            string lastvid = "-1";

            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                if (double.Parse(tdt.Rows[i]["Dr"].ToString()) > 0)
                {
                    tdt.Rows[i]["ToBy"] = "To";
                    tdt.Rows[i]["Amount"] = tdt.Rows[i]["Dr"].ToString();
                }
                else if (double.Parse(tdt.Rows[i]["Cr"].ToString()) > 0)
                {
                    tdt.Rows[i]["ToBy"] = "By";
                    tdt.Rows[i]["Amount"] = tdt.Rows[i]["Cr"].ToString();
                }

                if (checkBox1.Checked == false)
                {
                    totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                    totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());

                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                        tdt.Rows[i]["Dr_Cr"] = "Dr.";
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                        tdt.Rows[i]["Dr_Cr"] = "Cr.";
                    }
                    else
                    {
                        tdt.Rows[i]["RunningBalance"] = "0";
                    }
                }

                //if (DateTime.Parse(tdt.Rows[i]["Vdate"].ToString()).Year.ToString() == "1801")
                //{
                //    tdt.Rows[i]["Dr"] = 0;
                //    tdt.Rows[i]["Cr"] = 0;
                //}

                //if (lastvid == int.Parse(tdt.Rows[i]["Vi_id"].ToString()))
                //{
                //    tdt.Rows[i]["Dr"] = "0";
                //    tdt.Rows[i]["Cr"] = "0";
                //}
                //else
                //{                        
                //    double amtdr = double.Parse(tdt.Compute("sum(Dr)", "Vi_id=" + int.Parse(tdt.Rows[i]["Vi_id"].ToString()) + "").ToString());
                //    double amtcr = double.Parse(tdt.Compute("sum(Cr)", "Vi_id=" + int.Parse(tdt.Rows[i]["Vi_id"].ToString()) + "").ToString());
                //    if (amtdr > amtcr)
                //    {
                //        tdt.Rows[i]["Dr"] = amtdr - amtcr;
                //        tdt.Rows[i]["Cr"] = "0";
                //    }
                //    else if (amtcr > amtdr)
                //    {
                //        tdt.Rows[i]["Dr"] = "0";
                //        tdt.Rows[i]["Cr"] = amtcr - amtdr;
                //    }
                //}



                lastvid = tdt.Rows[i]["Vi_id"].ToString();
            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            if (checkBox1.Checked == true)
            {
                double sumdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
                double sumcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());

                if (sumdr > sumcr)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "By";
                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    }
                    else
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    }
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumdr - sumcr;
                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = sumdr - sumcr;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
                else if (sumcr > sumdr)
                {
                    tdt.Rows.Add();
                    tdt.Rows[tdt.Rows.Count - 1]["Vdate"] = dateTimePicker2.Value.ToString(Database.dformat);
                    tdt.Rows[tdt.Rows.Count - 1]["Invoiceno"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["Particular"] = "Closing Balance";
                    tdt.Rows[tdt.Rows.Count - 1]["vtype"] = "";
                    tdt.Rows[tdt.Rows.Count - 1]["ToBy"] = "To";
                    if (checkBox1.Checked == true)
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Description"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["packing"] = "";
                        tdt.Rows[tdt.Rows.Count - 1]["Quantity"] = 0;
                        
                        tdt.Rows[tdt.Rows.Count - 1]["Rate_am"] = 0;
                    }
                    else
                    {
                        tdt.Rows[tdt.Rows.Count - 1]["Narr"] = "";
                    }
                    tdt.Rows[tdt.Rows.Count - 1]["Amount"] = sumcr - sumdr;
                    tdt.Rows[tdt.Rows.Count - 1]["Dr"] = sumcr - sumdr;
                    tdt.Rows[tdt.Rows.Count - 1]["Cr"] = 0;
                    tdt.Rows[tdt.Rows.Count - 1]["Vi_id"] = 0;
                }
            }

            string[,] col = new string[2, 3] { { "Vdate", "1", "0" }, { "Invoiceno", "0", "0" } };

            if (checkBox1.Checked == true)
            {
                    string[,] Cwidth = new string[13, 8] { 
                        { "Vdate", "0", "0","" ,"","","",""},
                        { "Vch No", "150", "0","" ,"","","",""  },
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "", "50", "0","" ,"","","",""  }, 
                        { "Particular", "200", "0","" ,"","","",""  },
                        { "Item", "200", "0","" ,"","","",""  },
                        { "Pack", "70", "0","" ,"","","",""  },
                        { "Qty", "70", "1","" ,"","","",""  },
                        { "Rate", "80", "1","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "120", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "120", "1","|sum(Cr)" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                    CreateReport(tdt, col, Cwidth);                
            }
            else
            {
                string[,] Cwidth = new string[12, 8] { 
                        { "Vdate", "0", "0","" ,"","","",""},
                        { "Vch No", "150", "0","" ,"","","",""  },
                        { "Vch Type", "100", "0","" ,"","","",""  },
                        { "", "50", "0","" ,"","","",""  }, 
                        { "Particular", "250", "0","" ,"","","",""  },
                        { "Narration", "250", "0","" ,"","","",""  },
                        { "Amount", "100", "0","","" ,"","",""  },
                        { "Debit", "120", "1","|sum(Dr)","" ,"","",""  },
                        { "Credit", "120", "1","|sum(Cr)" ,"" ,"","","" },
                        { "Running Balance", "120", "1","","" ,"","",""  },
                        { "Dr/Cr", "50", "1","" ,"" ,"","","" },
                        { "vid", "0", "0","","" ,"","",""  },
                    };
                CreateReport(tdt, col, Cwidth);
            }

            return true;
        }
        public bool adjtest(DateTime DateFrom, DateTime DateTo, string accname)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Outstanding Report";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            dateTimePicker1.Enabled = false;
            dateTimePicker2.Enabled = false;
            textBox1.Text = accname;
            this.Text = frmptyp;
            DecsOfReport = "Outstanding Report "+ textBox1.Text+", for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            textBox1.Enabled = true;
            //  sql = "SELECT VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(Voucherinfo.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, VOUCHERINFO.Totalamount,  iif(Sum(BILLADJEST.Amount)  >0, Sum(BILLADJEST.Amount) ,0)  AS Dr,iif(Sum(BILLADJEST.Amount)  <0, -1*Sum(BILLADJEST.Amount) ,0)  AS Cr FROM (BILLADJEST LEFT JOIN VOUCHERINFO ON BILLADJEST.Reff_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((BILLADJEST.Ac_id)="+funs.Select_ac_id(textBox1.Text)+")) GROUP BY VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(Voucherinfo.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber), VOUCHERINFO.Totalamount HAVING (((Sum(BILLADJEST.Amount))<>0)) ORDER BY VOUCHERINFO.Vdate;";
            sql = "SELECT VOUCHERINFO.Vdate, " + access_sql.Docnumber + " AS DocNumber,  Sum(BILLADJEST.Amount) AS amt FROM (BILLADJEST LEFT JOIN VOUCHERINFO ON BILLADJEST.Reff_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((BILLADJEST.Ac_id)='" + funs.Select_ac_id(textBox1.Text) + "') And BILLADJEST." + Database.BMode + "='true') GROUP BY VOUCHERINFO.Vdate, " + access_sql.Docnumber + " HAVING (((Sum(BILLADJEST.Amount))<>0)) ORDER BY VOUCHERINFO.Vdate; ";
            dt.Clear();
            Database.GetSqlData(sql, dt);
            
            if (dt.Rows.Count == 0)
            {
                return false;
            }
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["vdate"].ToString() == "")
                {

                    // dt.Rows[i]["docnumber"] = "Opening Balance";
                    dt.Rows[i]["Vdate"] = "01-02-1801";

                }
                if (dt.Rows[i]["docnumber"].ToString() == "")
                {

                    dt.Rows[i]["docnumber"] = "Opening Balance";


                }
            }
            string[,] col = new string[0, 0];


            string[,] Cwidth = new string[3, 6] { 
            { "Vdate", "200", "0","","","" }, 
            { "Docnumber", "400", "0","","","" },
             { "Amount", "400", "0","|sum(amt)","","" }
             
          };

            CreateReport(dt, col, Cwidth);

            return true;
        }
        public bool AccSale(DateTime DateFrom, DateTime DateTo)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Accountant Sale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;

            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Accountant Sale, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
          
            sql = "SELECT     VOUCHERTYPE.Type,  VOUCHERTYPE.Name,  VOUCHERINFO.Vdate,  VOUCHERINFO.Invoiceno,  VOUCHERINFO.CashCredit,     ACCOUNT.Tin_number, SUM( Voucherdet.Taxabelamount) AS Taxabelamount, SUM( Voucherdet.taxamt1) AS CGST, SUM( Voucherdet.taxamt2) AS SGST,   SUM( Voucherdet.taxamt3) AS IGST FROM          ACCOUNT RIGHT OUTER JOIN  VOUCHERINFO ON  ACCOUNT.Ac_id =  VOUCHERINFO.Ac_id LEFT OUTER JOIN  Voucherdet ON  VOUCHERINFO.Vi_id =  Voucherdet.Vi_id RIGHT OUTER JOIN VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE     ( VOUCHERTYPE.A = 1) AND ( ACCOUNT.RegStatus = N'Regular Registration')";
            sql += " GROUP BY  VOUCHERTYPE.Type,  VOUCHERTYPE.Name,  VOUCHERINFO.Invoiceno,  VOUCHERINFO.CashCredit,  VOUCHERINFO.Vdate,     ACCOUNT.Tin_number HAVING      ( VOUCHERTYPE.Type = 'Sale') AND ( VOUCHERINFO.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND    ( VOUCHERINFO.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') ORDER BY  VOUCHERTYPE.Name,  VOUCHERINFO.Invoiceno ";
            dt.Clear();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[1, 3]{ { "Type", "1", "1" }};


            string[,] Cwidth = new string[10, 8] { 
            { "Type", "0", "0","","","","","" }, 
            { "Name", "100", "0","","","" ,"","" },
            { "Vdate", "150", "0","","","","","" },
            { "Invoiceno", "100", "0","Total","","","",""  },
            { "Cash/Credit", "100", "0","","","","",""  },
            { "GSTIN", "150", "0","","","","",""  },
            { "TaxableAmt", "100", "0","|sum(TaxabelAmount)","|sum(TaxabelAmount)","","",""  },
             { "CGST", "100", "0","|sum(CGST)","|sum(CGST)","" ,"","" },
             { "SGST", "100", "0","|sum(SGST)","|sum(SGST)","","",""  },
             { "IGST", "100", "0","|sum(IGST)","|sum(IGST)","","",""  }
             
          };

            CreateReport(dt, col, Cwidth);

            return true;
        }
        //public bool Ledger(DateTime DateFrom, DateTime DateTo, string accnm)
        //{

        //    dataGridView1.Rows.Clear();
        //    dataGridView1.Columns.Clear();
        //    double totdr = 0;
        //    double totcr = 0;
        //    stdt = DateFrom;
        //    endt = DateTo;
        //    dateTimePicker1.Value = DateFrom;
        //    dateTimePicker2.Value = DateTo;
        //    label3.Enabled = true;
        //    textBox1.Enabled = true;
        //    textBox1.Text = accnm;
        //    frmptyp = "Ledger";
        //    this.Text = frmptyp;
        //    DecsOfReport = "Ledger, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);

        //    if (Database.IsKacha == false)
        //    {
        //        //sql = "SELECT Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name,   " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance<0", "-1*(ACCOUNT.Balance)", "0") + " AS Cr From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal.A HAVING (((QryJournal.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name,  " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS aman ORDER BY Vdate, Short, Vnumber";
        //        sql = "SELECT Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM (SELECT " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name,   " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance<0", "-1*(ACCOUNT.Balance)", "0") + " AS Cr From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal.A HAVING (((QryJournal.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name,  " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Journal.Narr, " + access_sql.Docnumber + " AS DocNumber FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS aman ORDER BY Vdate, Short, Vnumber";
        //    }
        //    else
        //    {
        //        //sql = "SELECT Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM (SELECT " + access_sql.Hash + "2/1/1801" + access_sql.Hash + " AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name,   " + access_sql.fnstring("ACCOUNT.Balance2>0", "ACCOUNT.Balance2", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance2<0", "-1*(ACCOUNT.Balance2)", "0") + " AS Cr From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Voucherinfo.Narr, " + access_sql.Docnumber + " AS DocNumber FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS aman ORDER BY aman.Vdate, aman.Short, aman.Vnumber";
        //        sql = "SELECT Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM (SELECT "+access_sql.Hash + DateFrom.ToString(Database.dformat) +  access_sql.Hash+" AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name as Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM (SELECT 0 AS sr, ACCOUNT.Name,   " + access_sql.fnstring("ACCOUNT.Balance2>0", "ACCOUNT.Balance2", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance2<0", "-1*(ACCOUNT.Balance2)", "0") + " AS Cr From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS X GROUP BY X.Name) AS Y Union ALL SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, " + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr, Journal.Narr, " + access_sql.Docnumber + " AS DocNumber FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS aman ORDER BY aman.Vdate, aman.Short, aman.Vnumber";
        //    }

        //    dt.Clear();
        //    Database.GetSqlData(sql, dt);
        //    DataRow[] drow;
        //    if (accnm == "/*All*/")
        //    {
        //        drow = dt.Select("Vdate<=" +access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash +" ");
        //    }
        //    else  
        //    {
        //        drow = dt.Select("Name='" + accnm + "' and Vdate<="+ access_sql.Hash + DateTo.ToString(Database.dformat) +  access_sql.Hash+"");
        //    }

        //    tdt.Clear();
        //    if (drow.GetLength(0) > 0)
        //    {
        //        tdt = drow.CopyToDataTable();
        //        tdt.DefaultView.Sort = "Vdate";
        //        tdt.Columns.Add("RunningBalance", typeof(decimal));
        //        tdt.Columns.Add("Dr/Cr", typeof(string));
        //        for (int i = 0; i < tdt.Rows.Count; i++)
        //        {
        //            totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
        //            totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());
        //            if (totdr > totcr)
        //            {
        //                tdt.Rows[i]["RunningBalance"] = totdr - totcr;
        //                tdt.Rows[i]["Dr/Cr"] = "Dr.";
        //            }
        //            else if (totcr > totdr)
        //            {
        //                tdt.Rows[i]["RunningBalance"] = totcr - totdr;
        //                tdt.Rows[i]["Dr/Cr"] = "Cr.";
        //            }
        //            else
        //            {
        //                tdt.Rows[i]["RunningBalance"] = "0";
        //            }

        //            if (DateTime.Parse(tdt.Rows[i]["Vdate"].ToString()).Year.ToString() == "1801")
        //            {
        //                tdt.Rows[i]["Dr"] = 0;
        //                tdt.Rows[i]["Cr"] = 0;
        //            }
        //        }

        //    }
           
        //    if (tdt.Rows.Count == 0)
        //    {
        //        return false;
        //    }
        //    tdt.DefaultView.Sort = "Vdate";
         
        //    string[,] col = new string[2, 3] { { "Name", "1", "0" }, { "Vdate", "1", "0" } };

        //    string[,] Cwidth = new string[8, 8] { 
        //    { "Acoount", "0", "0","","","","","" },
        //    { "Vdate", "0", "0","" ,"","","",""},
        //    { "Document No.", "200", "0","" ,"","","",""},
        //    { "Particular", "330", "0","" ,"","","",""  },
        //    { "Amount Dr.", "140", "1","|sum(Dr)","" ,"","",""  },
        //    { "Amount Cr.", "140", "1","|sum(Cr)" ,"" ,"","","" },
        //    { "Running Balance", "140", "0","" ,"" ,"","","" }, 
        //    { "Dr./Cr.", "50", "0","","" ,"","",""  } };

        //    CreateReport(tdt, col, Cwidth);
        //    return true;
        //}


        public bool GodownInOut(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            frmptyp = "GodownInOut";
            this.Text = frmptyp;
            DecsOfReport = "Godown In/Out, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);


            sql = "SELECT Department, Vdate, type, Docnumber, Description, Pack, Quantity FROM (SELECT     OTHER.Name AS Department, VOUCHERINFO.Vdate, 'Stock Outward' AS type, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) AS Docnumber, Description.Description, Description.Pack, Stock.Issue AS Quantity FROM         Description LEFT OUTER JOIN     OTHER ON Description.Department_id = OTHER.Oth_id RIGHT OUTER JOIN    Stock ON Description.Des_id = Stock.Did LEFT OUTER JOIN      VOUCHERTYPE RIGHT OUTER JOIN  VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE     (VOUCHERINFO.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERINFO.Vdate <=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (Stock.Issue <> 0) AND (Stock.Branch_id = '"+Database.BranchId+"') AND   (Stock.godown_id = '"+funs.Select_ac_id(accnm)+"') AND (VOUCHERTYPE."+Database.BMode+" = 1) union all SELECT     OTHER.Name AS Department, VOUCHERINFO.Vdate, 'Stock Inward' AS type, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate,   112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) AS Docnumber, Description.Description, Description.Pack,   Stock.Receive AS Quantity";
            sql += " FROM Description LEFT OUTER JOIN  OTHER ON Description.Department_id = OTHER.Oth_id RIGHT OUTER JOIN   Stock ON Description.Des_id = Stock.Did LEFT OUTER JOIN     VOUCHERTYPE RIGHT OUTER JOIN   VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE     (VOUCHERINFO.Vdate >=  " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND (Stock.Branch_id = '"+Database.BranchId+"') AND       (Stock.godown_id = '"+funs.Select_ac_id(accnm)+"') AND (Stock.Receive <> 0) AND (VOUCHERTYPE."+Database.BMode+" = 1)) AS X";


            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            if (dt.Rows.Count == 0)
            {
                return false;
            }




            dt.Columns.Remove("Department");
            dt.DefaultView.Sort = "Vdate, type, Docnumber";
            dt.DefaultView.ToTable();


            string[,] col = new string[0, 0] ;
            string[,] Cwidth = new string[6, 8] {
            { "Vdate", "200", "0","" ,"","","",""},
            { "Type", "300", "0","" ,"","","",""  },
            { "Docnumber", "150", "0","","" ,"","",""  },
            { "Description", "150", "0","" ,"" ,"","","" },
            { "Pack", "150", "0","" ,"" ,"","","" }, 
            { "Quantity", "50", "1","","" ,"","",""  }
            };
            CreateReport(dt, col, Cwidth);
            return true;
        }


        public bool CashCreditSale(DateTime DateFrom, DateTime DateTo,string type)
        {
        //    label3.Visible = false;
        //    textBox1.Visible = false;
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            stdt = DateFrom;
            endt = DateTo;
            textBox1.Text = type;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;           
            frmptyp = "CashCreditSale";
            this.Text = frmptyp;
            DecsOfReport = "Cash/Credit Sale, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
           
                sql = "SELECT VOUCHERINFO.CashCredit as Cash,  VOUCHERINFO.Vdate,  VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112)  + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS Docnumber,  ACCOUNT.Name AS AccName,   CASE WHEN VOUCHERTYPE.Type = 'Sale' THEN VOUCHERINFO.Totalamount ELSE - 1 * VOUCHERINFO.Totalamount END AS amt FROM  VOUCHERTYPE RIGHT OUTER JOIN  ACCOUNT RIGHT OUTER JOIN   VOUCHERINFO ON  ACCOUNT.Ac_id =  VOUCHERINFO.Ac_id ON  VOUCHERTYPE.Vt_id =  VOUCHERINFO.Vt_id WHERE     ( VOUCHERTYPE.Type = 'Sale' OR VOUCHERTYPE.Type = 'Return') AND ( ACCOUNT.Branch_id = '" + Database.BranchId + "') AND ( VOUCHERTYPE."+Database.BMode+" = 'true') AND ( VOUCHERINFO.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ")   AND ( VOUCHERINFO.Vdate <=  " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")";

                dt = new DataTable();
            Database.GetSqlData(sql, dt);


            DataRow[] drow;
            drow = dt.Select("Cash is not null", "");
            if (type == "Cash" || type=="Credit")
            {
                drow = dt.Select("Cash='"+ type+"'", "");
            }

           

            tdt = new DataTable();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }


            tdt.DefaultView.Sort = "Cash,Vdate,DocNumber";
            tdt = tdt.DefaultView.ToTable();
            string[,] col = new string[1, 3] { { "Cash", "1", "1" } };
            string[,] Cwidth = new string[5, 8] {
            { "Cash", "0", "0","" ,"","","",""},
            { "Vdate", "200", "0","" ,"","","",""  },
            { "Docnumber", "200", "0","","" ,"","",""  },
            { "Account Name", "400", "0","Grand Total" ,"Total" ,"","","" },
            { "Amount", "200", "0","|sum(amt)" ,"|sum(amt)" ,"","","" } };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool GroupLedger(DateTime DateFrom, DateTime DateTo)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = false;
         
            frmptyp = "GroupLedger";
            this.Text = frmptyp;
            DecsOfReport = "GroupLedger, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);

            sql = "Select Name,Vdate,DocNumber,Narr as Particular,Dr,Cr FROM QryLedger where AccountType=10 or AccountType=9 or AccountType=5 or AccountType=12 or AccountType=11 or AccountType=20 or AccountType=28 order by AccountType,Name";
            dt.Clear();
            Database.GetSqlData(sql, dt);

            DataRow[] drow;
           
          
            drow = dt.Select("Vdate<=#" + DateTo.ToString(Database.dformat) + "#");
           

            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt.DefaultView.Sort = "Vdate";
                tdt.Columns.Add("RunningBalance", typeof(decimal));
                tdt.Columns.Add("Dr/Cr", typeof(string));
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                    totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());
                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                        tdt.Rows[i]["Dr/Cr"] = "Dr.";
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                        tdt.Rows[i]["Dr/Cr"] = "Cr.";
                    }
                    else
                    {
                        tdt.Rows[i]["RunningBalance"] = "0";
                    }
                    
                }

            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] { { "Name", "1", "0" }, { "Vdate", "1", "0" } };

            string[,] Cwidth = new string[8, 8] { 
            { "Account", "0", "0","","","" ,"",""},
            { "Vdate", "0", "0","" ,"","","",""},
            { "Document No.", "200", "0","" ,"","","",""},
            { "Particular", "330", "0","" ,"","" ,"","" },
            { "Amount Dr.", "140", "1","|sum(Dr)","" ,"","",""  },
            { "Amount Cr.", "140", "1","|sum(Cr)" ,"" ,"" ,"",""},
            { "Running Balance", "140", "0","" ,"" ,"" ,"",""}, 
            { "Dr./Cr.", "50", "0","","" ,"","",""  } };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool SingleGroupedTrial(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Grouped Trial Balance";
            this.Text = frmptyp;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            DecsOfReport = "Group Balance, as on " + DateTo.ToString(Database.dformat);

            if (Database.BMode=="A")
            {
                sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE,X.Name as Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal.A HAVING (((QryJournal.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr as Dr, QryAccountinfo.Cr as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY X.Name, ACCOUNTYPE.Name";
            }
            else if (Database.BMode == "B")
            {
                sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE,X.Name as Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr2 as Dr, QryAccountinfo.Cr2 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY X.Name, ACCOUNTYPE.Name";
            }

            else if (Database.BMode == "AB")
            {
                sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE,X.Name as Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal.AB HAVING (((QryJournal.AB)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr12 as Dr, QryAccountinfo.Cr12 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY X.Name, ACCOUNTYPE.Name";
            }
           


            dt = new DataTable();
            Database.GetSqlData(sql, dt);


            tdt.Clear();


            dt.DefaultView.Sort = "ACCOUNTYPE,Name";

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                totdr = double.Parse(dt.Rows[i]["Dr"].ToString());
                totcr = double.Parse(dt.Rows[i]["Cr"].ToString());
                if (totdr > totcr)
                {
                    dt.Rows[i]["Dr"] = totdr - totcr;
                    dt.Rows[i]["Cr"] = 0;
                }
                else if (totcr > totdr)
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = totcr - totdr;
                }
                else
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                }
            }




            if (dt.Select("ACCOUNTYPE='" + accnm + "'").Length == 0)
            {
                return false;
            }
            tdt = dt.Select("ACCOUNTYPE='" + accnm + "'").CopyToDataTable();
            tdt.DefaultView.Sort = "ACCOUNTYPE,Name";

            if (tdt.Select("not (Dr=0 and Cr=0)").Length == 0)
            {
                return false;
            }
            tdt = tdt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            string[,] col = new string[1, 3] { { "ACCOUNTYPE", "1", "1" } };
            string[,] Cwidth = new string[4, 8] { 
            { "Name", "0", "0" ,"","" ,"" ,"",""}, 
            { "Account", "700", "0" ,"Total Amount","" ,"","","" }, 
            { "Amount (Dr.)", "150", "1","|sum(Dr)","","","","" }, 
            { "Amount (Cr.)", "150", "1","|sum(Cr)","","" ,"",""} };
            CreateReport(tdt, col, Cwidth);
            return true;

        }



        public bool GroupedTrial(DateTime DateFrom, DateTime DateTo)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Grouped Trial Balance";
            this.Text = frmptyp;
            label3.Enabled = false;
            textBox1.Enabled = false;
            checkBox1.Visible = true;
            DecsOfReport = "Group Trial Balance, as on " + DateTo.ToString(Database.dformat);
            if (checkBox1.Checked == true)
            {

                if (Database.BMode=="A")
                {
                    sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE,X.Name as Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal."+Database.BMode+" HAVING (((QryJournal."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr as Dr, QryAccountinfo.Cr as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY X.Name, ACCOUNTYPE.Name";
                }
                else if (Database.BMode == "B")
                {
                    sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE,X.Name as Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr2 as Dr, QryAccountinfo.Cr2 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY X.Name, ACCOUNTYPE.Name";
                }
                else if (Database.BMode == "AB")
                {
                    sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE,X.Name as Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr12 as Dr, QryAccountinfo.Cr12 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY X.Name, ACCOUNTYPE.Name";
                }
            }
            else
            {
                if (Database.BMode == "A")
                {
                    sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr as Dr, QryAccountinfo.Cr as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name";
                }
                else if (Database.BMode == "B")
                {
                    sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr2 as Dr, QryAccountinfo.Cr2 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name";
                }
                else if (Database.BMode == "AB")
                {
                    sql = "SELECT ACCOUNTYPE.Name as ACCOUNTYPE, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr  FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr12 as Dr, QryAccountinfo.Cr12 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name";
                }
            }
            dt=new DataTable();
            Database.GetSqlData(sql, dt);


            tdt.Clear();


            dt.DefaultView.Sort = "ACCOUNTYPE";

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                totdr = double.Parse(dt.Rows[i]["Dr"].ToString());
                totcr = double.Parse(dt.Rows[i]["Cr"].ToString());
                if (totdr > totcr)
                {
                    dt.Rows[i]["Dr"] = totdr - totcr;
                    dt.Rows[i]["Cr"] = 0;
                }
                else if (totcr > totdr)
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = totcr - totdr;
                }
                else
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                }
            }
            if (dt.Select("not (Dr=0 and Cr=0)").Length == 0)
            {
                return false;
            }


            tdt = dt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            totdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
            totcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());


            if (checkBox1.Checked == true)
            {
                if (totdr > totcr)
                {
                    tdt.Rows.Add("", "Difference in Opening Trial", "0", totdr - totcr);
                }
                else
                {
                    tdt.Rows.Add("", "Difference in Opening Trial", totcr - totdr, "0");
                }

                string[,] col = new string[1, 3] { { "ACCOUNTYPE", "1", "1" } };
                string[,] Cwidth = new string[4, 8] { 
                { "Name", "0", "0" ,"","" ,"","","" }, 
                { "Account", "700", "0" ,"Total Amount","" ,"" ,"",""}, 
                { "Amount (Dr.)", "150", "1","|sum(Dr)","+sum(Dr)-sum(Cr)","","","" }, 
                { "Amount (Cr.)", "150", "1","|sum(Cr)","+sum(Cr)-sum(Dr)","" ,"",""} };
                CreateReport(tdt, col, Cwidth);
            }
            else
            {
                if (totdr > totcr)
                {
                    tdt.Rows.Add("Difference in Opening Trial", "0", totdr - totcr);
                }
                else
                {
                    tdt.Rows.Add("Difference in Opening Trial", totcr - totdr, "0");
                }
                string[,] col = new string[0, 0];
                string[,] Cwidth = new string[3, 8] { 
                { "Account", "700", "0" ,"Total Amount","" ,"","","" }, 
                { "Amount (Dr.)", "150", "1","|sum(Dr)","+sum(Dr)-sum(Cr)","" ,"",""}, 
                { "Amount (Cr.)", "150", "1","|sum(Cr)","+sum(Cr)-sum(Dr)","" ,"",""} };
               
                CreateReport(tdt, col, Cwidth);
            }
            

            return true;

        }


        private int FillTFormat(DataTable dtReport, string AccountType,string Caption, char Side, int Counter)
        {
            tdt.Clear();
            if (Caption == "Closing Stock")
            {
                double closing = 0;
                int closingcounter;
                if (Counter == dtReport.Rows.Count)
                {
                    dtReport.Rows.Add();
                    dtReport.Rows[Counter]["AmtL"] = 0;
                    dtReport.Rows[Counter]["AmtL2"] = 0;
                    dtReport.Rows[Counter]["AmtR"] = 0;
                    dtReport.Rows[Counter]["AmtR2"] = 0;
                }
               
                    dtReport.Rows[Counter]["NameR"] = "<b>" + Caption;
                    closingcounter = Counter;
                    Counter++;
                 
                    DataTable dtStock = new DataTable();
                    Database.GetSqlData("SELECT ACCOUNT.Name , ACCOUNT.Balance as Balance, ACCOUNT.Balance2 as Balance2, ACCOUNT.Closing_Bal, ACCOUNT.Closing_Bal2 FROM ACCOUNT LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Name)='STOCK-IN-HAND')) ORDER BY ACCOUNT.Name", dtStock);

                    for (int x = 0; x < dtStock.Rows.Count; x++)
                    {
                        double closingchk=0;
                        if (Database.BMode=="A")
                        {
                            if (dtStock.Rows[x]["Closing_Bal"].ToString() == "")
                            {
                                closingchk = double.Parse(dtStock.Rows[x]["Balance"].ToString());
                            }
                            else
                            {
                                closingchk = double.Parse(dtStock.Rows[x]["Closing_Bal"].ToString());
                            }
                        }
                        else if (Database.BMode == "B")
                        {
                            if (dtStock.Rows[x]["Closing_Bal2"].ToString() == "")
                            {
                                closingchk = double.Parse(dtStock.Rows[x]["Balance2"].ToString());
                            }
                            else
                            {
                                closingchk = double.Parse(dtStock.Rows[x]["Closing_Bal2"].ToString());
                            }
                        }
                        else if (Database.BMode == "AB")
                        {
                            if (dtStock.Rows[x]["Closing_Bal"].ToString() == "")
                            {
                                closingchk = double.Parse(dtStock.Rows[x]["Balance"].ToString());
                            }
                            else
                            {
                                closingchk = double.Parse(dtStock.Rows[x]["Closing_Bal"].ToString());
                            }
                            if (dtStock.Rows[x]["Closing_Bal2"].ToString() == "")
                            {
                                closingchk += double.Parse(dtStock.Rows[x]["Balance2"].ToString());
                            }
                            else
                            {
                                closingchk += double.Parse(dtStock.Rows[x]["Closing_Bal2"].ToString());
                            }
                        }
                        if (closingchk == 0)
                        {
                            continue;
                        }
                            if (Counter == dtReport.Rows.Count)
                            {
                                dtReport.Rows.Add();
                                dtReport.Rows[Counter]["AmtL"] = 0;
                                dtReport.Rows[Counter]["AmtL2"] = 0;
                                dtReport.Rows[Counter]["AmtR"] = 0;
                                dtReport.Rows[Counter]["AmtR2"] = 0;
                            }

                            dtReport.Rows[Counter]["NameR"] = dtStock.Rows[x]["Name"].ToString();
                            dtReport.Rows[Counter]["AmtR"] = closingchk;
                            closing = closing + closingchk;                        
                            Counter++;
                       
                    }

                    dtReport.Rows[closingcounter]["AmtR2"] = closing;

            }

            else if (Caption == "Opening Stock")
            {
                double closing = 0;
                int closingcounter;
                if (Counter == dtReport.Rows.Count)
                {
                    dtReport.Rows.Add();
                    dtReport.Rows[Counter]["AmtL"] = 0;
                    dtReport.Rows[Counter]["AmtL2"] = 0;
                    dtReport.Rows[Counter]["AmtR"] = 0;
                    dtReport.Rows[Counter]["AmtR2"] = 0;
                }

                dtReport.Rows[Counter]["NameL"] = "<b>" + Caption;
                closingcounter = Counter;
                Counter++;

                DataTable dtStock = new DataTable();
                Database.GetSqlData("SELECT ACCOUNT.Name , ACCOUNT.Balance as Balance, ACCOUNT.Balance2 as Balance2 FROM ACCOUNT LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Name)='STOCK-IN-HAND')) ORDER BY ACCOUNT.Name", dtStock);

                for (int x = 0; x < dtStock.Rows.Count; x++)
                {
                    double closingchk=0;
                    if (Database.BMode=="A")
                    {
                        if (dtStock.Rows[x]["Balance"].ToString() == "")
                        {
                            dtStock.Rows[x]["Balance"] = 0;
                            closingchk = double.Parse(dtStock.Rows[x]["Balance"].ToString());
                        }
                        else
                        {
                            closingchk = double.Parse(dtStock.Rows[x]["Balance"].ToString());
                        }
                    }
                    else if (Database.BMode=="B")
                    {
                        if (dtStock.Rows[x]["Balance2"].ToString() == "")
                        {
                            dtStock.Rows[x]["Balance2"] = 0;
                            closingchk = double.Parse(dtStock.Rows[x]["Balance2"].ToString());
                        }
                        else
                        {
                            closingchk = double.Parse(dtStock.Rows[x]["Balance2"].ToString());
                        }
                    }
                    else if (Database.BMode == "AB")
                    {
                        if (dtStock.Rows[x]["Balance"].ToString() == "")
                        {
                            dtStock.Rows[x]["Balance"] = 0;
                            closingchk = double.Parse(dtStock.Rows[x]["Balance"].ToString());
                        }
                        else
                        {
                            closingchk = double.Parse(dtStock.Rows[x]["Balance"].ToString());
                        }
                        if (dtStock.Rows[x]["Balance2"].ToString() == "")
                        {
                            dtStock.Rows[x]["Balance2"] = 0;
                            closingchk += double.Parse(dtStock.Rows[x]["Balance2"].ToString());
                        }
                        else
                        {
                            closingchk += double.Parse(dtStock.Rows[x]["Balance2"].ToString());
                        }
                    }

                    if (closingchk == 0)
                    {
                        continue;
                    }
                    if (Counter == dtReport.Rows.Count)
                    {
                        dtReport.Rows.Add();
                        dtReport.Rows[Counter]["AmtL"] = 0;
                        dtReport.Rows[Counter]["AmtL2"] = 0;
                        dtReport.Rows[Counter]["AmtR"] = 0;
                        dtReport.Rows[Counter]["AmtR2"] = 0;
                    }

                    dtReport.Rows[Counter]["NameL"] = dtStock.Rows[x]["Name"].ToString();
                    dtReport.Rows[Counter]["AmtL"] = closingchk;
                    closing = closing + closingchk;
                    Counter++;

                }

                dtReport.Rows[closingcounter]["AmtL2"] = closing;

            }




            else
            {
                if (dt.Select("Aname in(" + AccountType + ") And Amount<>0").Length > 0)
                {
                    tdt = dt.Select("Aname in(" + AccountType + ") And Amount<>0").CopyToDataTable();
                    tdt.DefaultView.Sort = "Name";
                    tdt = tdt.DefaultView.ToTable();
                }
                if (tdt.Rows.Count > 0)
                {
                    if (Counter == dtReport.Rows.Count)
                    {
                        dtReport.Rows.Add();
                        dtReport.Rows[Counter]["AmtL"] = 0;
                        dtReport.Rows[Counter]["AmtL2"] = 0;
                        dtReport.Rows[Counter]["AmtR"] = 0;
                        dtReport.Rows[Counter]["AmtR2"] = 0;
                    }

                    if (Side == 'L')
                    {
                        dtReport.Rows[Counter]["NameL"] = "<b>" + Caption;
                        dtReport.Rows[Counter]["AmtL2"] = tdt.Compute("sum(Amount)", "").ToString();
                    }

                    else if (Side == 'R')
                    {
                        dtReport.Rows[Counter]["NameR"] = "<b>" + Caption;
                        dtReport.Rows[Counter]["AmtR2"] = double.Parse(tdt.Compute("sum(Amount)", "").ToString()) * -1;
                    }

                    Counter++;
                }

                for (int x = 0; x < tdt.Rows.Count; x++)
                {
                    if (Counter == dtReport.Rows.Count)
                    {
                        dtReport.Rows.Add();
                        dtReport.Rows[Counter]["AmtL"] = 0;
                        dtReport.Rows[Counter]["AmtL2"] = 0;
                        dtReport.Rows[Counter]["AmtR"] = 0;
                        dtReport.Rows[Counter]["AmtR2"] = 0;
                    }

                    if (Side == 'L')
                    {
                        dtReport.Rows[Counter]["NameL"] = tdt.Rows[x]["Name"].ToString();
                        dtReport.Rows[Counter]["AmtL"] = tdt.Rows[x]["Amount"].ToString();
                    }

                    else if (Side == 'R')
                    {
                        dtReport.Rows[Counter]["NameR"] = tdt.Rows[x]["Name"].ToString();
                        dtReport.Rows[Counter]["AmtR"] = double.Parse(tdt.Rows[x]["Amount"].ToString()) * -1;
                    }

                    Counter++;
                }

            }
               
            return Counter;
        }


     
        public bool ProfitAndLoss(DateTime DateFrom, DateTime DateTo)
        {
             button8.Visible = true;
            DataTable dtReport = new DataTable();
            int RcL = 0;
            int RcR = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Profit And Loss";
           
            this.Text = frmptyp;
            label3.Enabled = false;
            textBox1.Enabled = false;
            DecsOfReport = "Profit and Loss, From  " + DateFrom.ToString(Database.dformat) + " To  " + DateTo.ToString(Database.dformat);
            
            //if (Database.IsKacha == false)
            //{

            sql = "SELECT ACCOUNTYPE.Name AS Aname, X.Name,Sum(X.Dr)-Sum(X.Cr) AS Amount FROM ( (SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where  QryJournal.Vdate  >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And QryJournal.Vdate  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) )  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name, X.Name ORDER BY ACCOUNTYPE.Name, X.Name";
            //}
            //else
            //{
            //    sql = "SELECT ACCOUNTYPE.Name AS Aname, X.Name,Sum(X.Dr)-Sum(X.Cr) AS Amount FROM ( (SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where  QryJournal.Vdate  >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And QryJournal.Vdate  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " GROUP BY QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) )  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name, X.Name ORDER BY ACCOUNTYPE.Name, X.Name";
            //}

            dt.Clear();
            Database.GetSqlData(sql, dt); 
            dtReport.Columns.Add("NameL", typeof(string));
            dtReport.Columns.Add("AmtL", typeof(decimal));
            dtReport.Columns.Add("AmtL2", typeof(decimal));
            dtReport.Columns.Add("NameR", typeof(string));
            dtReport.Columns.Add("AmtR", typeof(decimal));
            dtReport.Columns.Add("AmtR2", typeof(decimal));
            

           //Trading Expenses
            RcL = FillTFormat(dtReport, "'STOCK-IN-HAND'", "Opening Stock", 'L', RcL);
            RcL = FillTFormat(dtReport, "'PURCHASE ACCOUNTS'", "Purchase", 'L', RcL);
            RcL = FillTFormat(dtReport, "'EXPENDITURE ACCOUNT (Direct)'", "Direct Expenses", 'L', RcL);

           //Trading Income
            RcR = FillTFormat(dtReport, "'SALES ACCOUNTS'", "Sales", 'R', RcR);
            RcR = FillTFormat(dtReport, "'INCOME (Direct)'", "Direct Income", 'R', RcR);
            RcR = FillTFormat(dtReport, "'STOCK-IN-HAND'", "Closing Stock", 'R', RcR);


            int Trows = 0;
            if (RcL > RcR)
            {
                Trows = RcL;
            }
            else
            {
                Trows = RcR;
            }
           
            double TradingExpence=double.Parse(dtReport.Compute("sum(AmtL2)","").ToString());
            double TradingIncome=double.Parse(dtReport.Compute("sum(AmtR2)","").ToString());
            double GrossProfit = 0;
            double GrossLoss = 0;

            if(TradingIncome>TradingExpence)
            {
                GrossProfit=TradingIncome - TradingExpence;
                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Gross Income";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = GrossProfit;
                dtReport.Rows[Trows]["NameR"] = "";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = 0;
                Trows++;

                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Gross Total";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = TradingExpence + GrossProfit;
                dtReport.Rows[Trows]["NameR"] = "<b>Gross Total";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = TradingExpence + GrossProfit;
                Trows++;

                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = 0;
                dtReport.Rows[Trows]["NameR"] = "";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = 0;
                Trows++;

                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = 0;
                dtReport.Rows[Trows]["NameR"] = "<b>Gross Income";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = GrossProfit;
                Trows++;
                RcL = Trows - 1;
                RcR = Trows;
            }

            else if(TradingExpence>TradingIncome) //if gross loss
            {
                GrossLoss = TradingExpence-TradingIncome ;
                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = 0;
                dtReport.Rows[Trows]["NameR"] = "<b>Gross Loss";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = GrossLoss;
                Trows++;
                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Gross Total";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = TradingIncome + GrossLoss;
                dtReport.Rows[Trows]["NameR"] = "<b>Gross Total";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = TradingIncome + GrossLoss;
                Trows++;

                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = 0;
                dtReport.Rows[Trows]["NameR"] = "";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = 0;
                Trows++;

                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Gross Loss";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = GrossLoss;
                dtReport.Rows[Trows]["NameR"] = "";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = 0 ;
                Trows++;
                RcL = Trows;
                RcR = Trows-1;
            }

            

            //P&L Expenses
            RcL = FillTFormat(dtReport, "'EXPENDITURE ACCOUNT (Indirect )'", "Indirect Expenses", 'L', RcL);
            //P&L Income
            RcR = FillTFormat(dtReport, "'INCOME (Indirect)'", "Indirect Income", 'R', RcR);

            double NetExp = GrossLoss + double.Parse(dt.Compute("sum(Amount)", "Aname='EXPENDITURE ACCOUNT (Indirect )'").ToString());
            double NetIncome = 0;
            if (dt.Compute("sum(Amount)", "Aname='INCOME (Indirect)'").ToString().Length > 0)
            {
                NetIncome = GrossProfit + (-1 * double.Parse(dt.Compute("sum(Amount)", "Aname='INCOME (Indirect)'").ToString()));
            }
            else
            {
                NetIncome = GrossProfit;
            }
            if (RcL > RcR)
            {
                Trows = RcL;
            }
            else
            {
                Trows = RcR;
            }
            if (NetIncome > NetExp)
            {
                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Net Profit";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = NetIncome - NetExp;
                dtReport.Rows[Trows]["NameR"] = "";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = 0;
                Trows++;
                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Net Total";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = NetIncome;
                dtReport.Rows[Trows]["NameR"] = "<b>Net Total";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = NetIncome;
                Trows++;
            }
            else if (NetExp > NetIncome)
            {
                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = 0;
                dtReport.Rows[Trows]["NameR"] = "<b>Net Loss";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = NetExp - NetIncome;
                Trows++;


                dtReport.Rows.Add();
                dtReport.Rows[Trows]["NameL"] = "<b>Net Total";
                dtReport.Rows[Trows]["AmtL"] = 0;
                dtReport.Rows[Trows]["AmtL2"] = NetExp;
                dtReport.Rows[Trows]["NameR"] = "<b>Net Total";
                dtReport.Rows[Trows]["AmtR"] = 0;
                dtReport.Rows[Trows]["AmtR2"] = NetExp;
                Trows++;
            }


            string[,] col = new string[0, 0];
            string[,] Cwidth = new string[6, 8] { 
          
            { "Account", "260", "0","","","","","" }, 
            { "", "120", "1","" ,"","","",""}, 
            { "Expenses", "120", "1","" ,"","","",""}, 
         
            { "Account", "260", "0","","","" ,"",""}, 
            { "", "120", "1","" ,"","","",""},
            { "Income", "120", "1","" ,"","","",""}
            };

            CreateReport(dtReport, col, Cwidth);
            return true;

        }

       

        public bool BalanceSheet(DateTime DateFrom, DateTime DateTo)
        {
             button8.Visible = true;
            DataTable dtReport = new DataTable();
            int RcL = 0;
            int RcR = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Balance Sheet";
            this.Text = frmptyp;
            label3.Enabled = false;
            textBox1.Enabled = false;
            DecsOfReport = "Balance Sheet, as on " + DateTo.ToString(Database.dformat);

            if (Database.BMode=="A")
            {
                sql = "SELECT ACCOUNTYPE.Name AS Aname, X.Name,Sum(X.Cr)-Sum(X.Dr) AS Amount FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr as Dr, QryAccountinfo.Cr as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name,  X.Name ORDER BY ACCOUNTYPE.Name, X.Name";

            }
            else if (Database.BMode == "B")
            {
                sql = "SELECT  ACCOUNTYPE.Name AS Aname, X.Name,Sum(X.Cr)-Sum(X.Dr) AS Amount FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr2 as Dr, QryAccountinfo.Cr2 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name,  X.Name ORDER BY ACCOUNTYPE.Name, X.Name";
            }
            else if (Database.BMode == "AB")
            {
                sql = "SELECT  ACCOUNTYPE.Name AS Aname, X.Name,Sum(X.Cr)-Sum(X.Dr) AS Amount FROM ((SELECT QryJournal.Name, sum(QryJournal.Dr) as Dr, sum(QryJournal.Cr) as Cr From QryJournal Where (((QryJournal.Vdate)  <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr12 as Dr, QryAccountinfo.Cr12 as Cr FROM QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Name,  X.Name ORDER BY ACCOUNTYPE.Name, X.Name";
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            dtReport.Columns.Add("NameL", typeof(string));
            dtReport.Columns.Add("AmtL", typeof(decimal));
            dtReport.Columns.Add("AmtL2", typeof(decimal));
            dtReport.Columns.Add("NameR", typeof(string));
            dtReport.Columns.Add("AmtR", typeof(decimal));
            dtReport.Columns.Add("AmtR2", typeof(decimal));

            //Libilities
            RcL = FillTFormat(dtReport, "'CAPITAL ACCOUNT'", "Capital", 'L', RcL);

            int PnL = RcL;
            dtReport.Rows.Add();
            dtReport.Rows[RcL]["NameL"] = "Profit/Loss";
            dtReport.Rows[RcL]["AmtL"] = 0;
            dtReport.Rows[RcL]["AmtL2"] = 0;
            dtReport.Rows[RcL]["NameR"] = "";
            dtReport.Rows[RcL]["AmtR"] = 0;
            dtReport.Rows[RcL]["AmtR2"] = 0;
            RcL++;
            RcL = FillTFormat(dtReport, "'CURRENT LIABILITIES'", "Current Libilities", 'L', RcL);
            RcL = FillTFormat(dtReport, "'LOAN (LIABILITIES)'", "LOAN (LIABILITIES)", 'L', RcL);
            RcL = FillTFormat(dtReport, "'DUTIES & TAXES'", "Duties & Taxes", 'L', RcL);
            RcL = FillTFormat(dtReport, "'SUNDRY CREDITORS'", "Sundry Creditors", 'L', RcL);
            RcL = FillTFormat(dtReport, "'RESERVES  & SURPLUS'", "Reserves & Surplus", 'L', RcL);
            RcL = FillTFormat(dtReport, "'SUSPENSE ACCOUNT (Temporary A/C)'", "Suspense", 'L', RcL);
            RcL = FillTFormat(dtReport, "'BANK OCC A/C'", "Bank Occ A/c", 'L', RcL);
            RcL = FillTFormat(dtReport, "'PROVISIONS'", "Provisions", 'L', RcL);
            RcL = FillTFormat(dtReport, "'SECURE LOANS'", "Secure Loans", 'L', RcL);
            RcL = FillTFormat(dtReport, "'UNSECURE LOANS'", "Unsecure Loans", 'L', RcL);

            double dif = Database.GetScalarDecimal("SELECT Sum(ACCOUNT.Balance) AS Diff FROM ACCOUNT");
            if (dif != 0)
            {
                if (RcL == dtReport.Rows.Count)
                {
                    dtReport.Rows.Add();
                    dtReport.Rows[RcL]["AmtL"] = 0;
                    dtReport.Rows[RcL]["AmtL2"] = 0;
                    dtReport.Rows[RcL]["AmtR"]  = 0;
                    dtReport.Rows[RcL]["AmtR2"] = 0;
                }
                dtReport.Rows[RcL]["NameL"] = "<b>" + "Difference in Opening Trial";
                dtReport.Rows[RcL]["AmtL2"] = dif;
                RcL++;
            }

            //Assets
            RcR = FillTFormat(dtReport, "'FIXED ASSETS'", "Fixed Assets", 'R', RcR);
            RcR = FillTFormat(dtReport, "'CURRENT ASSETS'", "Currents Assets", 'R', RcR);
            RcR = FillTFormat(dtReport, "'INVESTMENTS'", "Investments", 'R', RcR);
            RcR = FillTFormat(dtReport, "'SUNDRY DEBTORS'", "Sundry Debitors", 'R', RcR);
            RcR = FillTFormat(dtReport, "'SECURITY & DEPOSITS (Assets)'", "Security & Deposits", 'R', RcR);
            RcR = FillTFormat(dtReport, "'LOAN & ADVANCES (Assests)'", "Loan & Advances", 'R', RcR);
            RcR = FillTFormat(dtReport, "'STOCK-IN-HAND'", "Closing Stock", 'R', RcR);
            RcR = FillTFormat(dtReport, "'CASH-IN-HAND'", "Cash in Hand", 'R', RcR);
            RcR = FillTFormat(dtReport, "'BANK ACCOUNTS'", "Bank in Hand", 'R', RcR);


            double TLibilities = double.Parse(dtReport.Compute("sum(AmtL2)", "").ToString());
            double TAssets = double.Parse(dtReport.Compute("sum(AmtR2)", "").ToString());
            double Profit = 0;
            double Loss = 0;
            if (TAssets > TLibilities)
            {
                Profit = TAssets - TLibilities;
                
                dtReport.Rows[PnL]["NameL"] = "<b>Net Profit";
                dtReport.Rows[PnL]["AmtL"] = 0;
                dtReport.Rows[PnL]["AmtL2"] = Profit;

            }
            else if (TLibilities > TAssets)
            {
                Loss = TLibilities - TAssets;
                dtReport.Rows[PnL]["NameL"] = "<b>Net Loss";
                dtReport.Rows[PnL]["AmtL"] = 0;
                dtReport.Rows[PnL]["AmtL2"] = Loss * -1;
            }

            string[,] col = new string[0, 0];
            string[,] Cwidth = new string[6, 8] { 
          
            { "Libilities", "260", "0","Total","","" ,"",""}, 
            { "", "120", "1","" ,"","","",""}, 
            { "Amount", "120", "1","|Sum(AmtL2)" ,"","","",""}, 
         
            { "Assets", "260", "0","Total","","" ,"",""}, 
            { "", "120", "1","" ,"","","",""},
            { "Amount", "120", "1","|Sum(AmtR2)" ,"","","",""}
            };

            CreateReport(dtReport, col, Cwidth);
            return true;


        }
        public bool AllGstReport(DateTime DateFrom, DateTime DateTo, string str, string type)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "GST Report";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label1.Visible = false;
            label2.Visible = false;
            label3.Visible = false;
            button3.Visible = false;
            button7.Visible = true;
            textBox1.Visible = false;
            dateTimePicker1.Visible = false;
            dateTimePicker2.Visible = false;
            this.Text = frmptyp;
            groupBox2.Visible = true;
            DecsOfReport = "GST " + type + " Register, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();


            if (Feature.Available("GST Reports on ShipTo").ToUpper() == "YES")
            {

                //  sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Composition Dealer')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE." + Database.BMode + " HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
                sql = "SELECT   VOUCHERTYPE.Type,VOUCHERTYPE.Name as VName, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, State.Sname,VOUCHERINFO.vnumber, VOUCHERINFO.vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST, Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST, Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id GROUP BY  VOUCHERTYPE.Name,VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.vnumber, VOUCHERINFO.vdate,VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer, ACCOUNT.RegStatus,  VOUCHERTYPE." + Database.BMode + " HAVING Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote + str;
            }
            else
            {

                sql = "SELECT   VOUCHERTYPE.Type,VOUCHERTYPE.Name as VName, ACCOUNT.Name, ACCOUNT.Tin_number AS TIN, State.Sname,VOUCHERINFO.vnumber, VOUCHERINFO.vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST , Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN State ON ACCOUNT.State_id = State.State_id GROUP BY  VOUCHERTYPE.Name, VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Tin_number, State.Sname,VOUCHERINFO.vnumber, VOUCHERINFO.vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE." + Database.BMode + ", ACCOUNT.RegStatus HAVING Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote + str;
            }



            dt = new DataTable();

            Database.GetSqlData(sql, dt);
            if (dt.Rows.Count == 0)
            {
                return false;
            }
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return" || dt.Rows[i]["Type"].ToString() == "JIssue")
                {
                    dt.Rows[i]["Qty"] = double.Parse(dt.Rows[i]["Qty"].ToString()) * -1;
                    dt.Rows[i]["VoucherNetAmt"] = double.Parse(dt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                    dt.Rows[i]["ItemTaxable"] = double.Parse(dt.Rows[i]["ItemTaxable"].ToString()) * -1;
                    dt.Rows[i]["CGST"] = double.Parse(dt.Rows[i]["CGST"].ToString()) * -1;
                    dt.Rows[i]["SGST"] = double.Parse(dt.Rows[i]["SGST"].ToString()) * -1;
                    dt.Rows[i]["IGST"] = double.Parse(dt.Rows[i]["IGST"].ToString()) * -1;
                    dt.Rows[i]["Cess"] = double.Parse(dt.Rows[i]["Cess"].ToString()) * -1;
                }
            }
            // tdt = tdt.DefaultView.ToTable();

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            if (type == "Sale" || type == "JobWork")
            {
                dt.Columns.Remove("Svdate");
                dt.Columns.Remove("Svnum");
                dt.DefaultView.Sort = "vdate,vnumber";
                dt = dt.DefaultView.ToTable();

            }
            else
            {
                //dt.Columns.Remove("vdate");
                dt.Columns.Remove("vnumber");
                dt.DefaultView.Sort = "Svdate,Svnum";
                dt = dt.DefaultView.ToTable();
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "1", "1" }
            };

            if (type == "Sale" || type == "JobWork")
            {
                string[,] Cwidth = new string[15, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "Name", "", "0" ,"","","","",""},
            { "PartyName", "250", "0","" ,"","","",""},
            { "GSTIN", "120", "0","" ,"","","",""},
            { "StateName", "200", "0","" ,"","","",""},
           
            { "vnumber", "100", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","","","" },
            { "TaxSlab%", "100", "0","Grand Total","Total","","","" },
        

            { "Qty", "100", "0","","","","" ,""},
            
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","|sum(ItemTaxable)","","" },
            { taxname3, "150", "0","|sum(IGST)","|sum(IGST)","|sum(IGST)" ,"",""},
            { taxname1, "150", "0","|sum(CGST)","|sum(CGST)","|sum(CGST)" ,"",""},
            { taxname2, "150", "0","|sum(SGST)","|sum(SGST)","|sum(SGST)" ,"",""},
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","|sum(Cess)","" ,""},
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","" },
            };
                CreateReport(dt, col, Cwidth);
            }

            else
            {
                string[,] Cwidth = new string[16, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "Name", "", "0" ,"","","","",""},
            { "PartyName", "200", "0","" ,"","","",""},
            { "GSTIN", "120", "0","" ,"","","",""},
            { "StateName", "150", "0","" ,"","","",""},
            { "Entry Date", "125", "0","" ,"","","",""}, 
            { "vnumber", "100", "0","" ,"","","",""},
          
            { "Voucher Date", "125", "0","","","","","" },
            { "TaxSlab%", "100", "0","Grand Total","Total","","","" },
        

            { "Qty", "100", "0","","","","" ,""},
            
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","|sum(ItemTaxable)","","" },
            { taxname3, "150", "0","|sum(IGST)","|sum(IGST)","|sum(IGST)" ,"",""},
            { taxname1, "150", "0","|sum(CGST)","|sum(CGST)","|sum(CGST)" ,"",""},
            { taxname2, "150", "0","|sum(SGST)","|sum(SGST)","|sum(SGST)" ,"",""},
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","|sum(Cess)","" ,""},
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","" },
            };
                CreateReport(dt, col, Cwidth);
            }
         
            return true;
        }




        public bool AccountGroupBalance(DateTime DateFrom, DateTime DateTo, string grpname)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker1.Visible = false;
            label1.Visible = false;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Payment Collector Balance";
            this.Text = frmptyp;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = grpname;
            DecsOfReport = "Payment Collector Balance Report, As On  " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Database.BMode=="A")
            {

                //sql = "SELECT isnull(AccountGroup,'') as AccountGroup, X.AccountName, ACCOUNT_1.Phone, SUM(X.Dr) AS Dr, SUM(X.Cr) AS Cr FROM  (SELECT      OTHER.Name AS AccountGroup,  QryJournal.Name AS AccountName, SUM( QryJournal.Dr) AS Dr, SUM( QryJournal.Cr) AS Cr  FROM           ACCOUNT RIGHT OUTER JOIN                                               QryJournal ON  ACCOUNT.Name =  QryJournal.Name LEFT OUTER JOIN    OTHER ON  ACCOUNT.Loc_id =  OTHER.Oth_id    WHERE      ( QryJournal.Vdate <=  " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")   GROUP BY  QryJournal.Name,  QryJournal." + Database.BMode + ",  OTHER.Name,  ACCOUNT.Branch_id    HAVING      ( QryJournal." + Database.BMode + " = " + access_sql.Singlequote + "True" + access_sql.Singlequote + ")  AND ( ACCOUNT.Branch_id = '" + Database.BranchId + "') ";
                //sql += " UNION ALL  SELECT     OTHER_1.Name AS AccountGroup,  QryAccountinfo.Name AS AccountName,  QryAccountinfo.Dr,  QryAccountinfo.Cr   FROM          QryAccountinfo LEFT OUTER JOIN                             OTHER AS OTHER_1 ON  QryAccountinfo.Loc_id = OTHER_1.Oth_id  WHERE     ( QryAccountinfo.Branch_id = '" + Database.BranchId + "')) AS X LEFT OUTER JOIN   ACCOUNT AS ACCOUNT_1 ON X.AccountName = ACCOUNT_1.Name GROUP BY X.AccountGroup, X.AccountName, ACCOUNT_1.Phone HAVING      (NOT (SUM(X.Dr) = 0)) OR  (NOT (SUM(X.Cr) = 0)) ORDER BY X.AccountGroup, X.AccountName";
                sql = " SELECT   ISNULL(X.AccountGroup, N'') AS AccountGroup, X.AccountName, ACCOUNT_1.Phone, SUM(X.Dr) AS Dr, SUM(X.Cr) AS Cr,'' as Remark FROM         (SELECT     AccountGroup, AccountName, SUM(Dr) AS Dr, SUM(Cr) AS Cr FROM         (SELECT     OTHER.Name AS AccountGroup, ACCOUNT.Name AS AccountName,          CASE WHEN Journal.Amount >= 0 THEN Journal.Amount ELSE 0 END AS Dr,      CASE WHEN Journal.Amount < 0 THEN - 1 * Journal.Amount ELSE 0 END AS Cr FROM          ACCOUNT LEFT OUTER JOIN         OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id RIGHT OUTER JOIN       Journal ON ACCOUNT.Ac_id = Journal.Ac_id WHERE      (Journal.Vdate <= '"+DateTo.ToString(Database.dformat)+"') AND (Journal."+Database.BMode+" = 'true') AND (ACCOUNT.Branch_id = '"+ Database.BranchId+"')) AS XY GROUP BY AccountGroup, AccountName   UNION ALL    SELECT     OTHER_1.Name AS AccountGroup, QryAccountinfo.Name AS AccountName, QryAccountinfo.Dr, QryAccountinfo.Cr                FROM         QryAccountinfo LEFT OUTER JOIN           OTHER AS OTHER_1 ON QryAccountinfo.Loc_id = OTHER_1.Oth_id  WHERE     (QryAccountinfo.Branch_id = '"+Database.BranchId+"')) AS X LEFT OUTER JOIN     ACCOUNT AS ACCOUNT_1 ON X.AccountName = ACCOUNT_1.Name GROUP BY X.AccountGroup, X.AccountName, ACCOUNT_1.Phone HAVING      (NOT (SUM(X.Dr) = 0)) OR     (NOT (SUM(X.Cr) = 0)) ORDER BY AccountGroup, X.AccountName";
            }
            else if (Database.BMode == "B")
            {
                //sql = "SELECT   isnull(AccountGroup,'') as AccountGroup, X.AccountName, ACCOUNT_1.Phone, SUM(X.Dr) AS Dr, SUM(X.Cr) AS Cr FROM  (SELECT      OTHER.Name AS AccountGroup,  QryJournal.Name AS AccountName, SUM( QryJournal.Dr) AS Dr, SUM( QryJournal.Cr) AS Cr  FROM           ACCOUNT RIGHT OUTER JOIN                                               QryJournal ON  ACCOUNT.Name =  QryJournal.Name LEFT OUTER JOIN    OTHER ON  ACCOUNT.Loc_id =  OTHER.Oth_id    WHERE      ( QryJournal.Vdate <=  " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")   GROUP BY  QryJournal.Name,  QryJournal." + Database.BMode + ",  OTHER.Name,  ACCOUNT.Branch_id    HAVING      ( QryJournal." + Database.BMode + " = " + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND  ( ACCOUNT.Branch_id = '" + Database.BranchId + "') ";
                //sql += " UNION ALL  SELECT     OTHER_1.Name AS AccountGroup,  QryAccountinfo.Name AS AccountName,  QryAccountinfo.Dr2 as Dr,  QryAccountinfo.Cr2 As Cr   FROM          QryAccountinfo LEFT OUTER JOIN                             OTHER AS OTHER_1 ON  QryAccountinfo.Loc_id = OTHER_1.Oth_id  WHERE      ( QryAccountinfo.Branch_id = '" + Database.BranchId + "')) AS X LEFT OUTER JOIN   ACCOUNT AS ACCOUNT_1 ON X.AccountName = ACCOUNT_1.Name GROUP BY X.AccountGroup, X.AccountName, ACCOUNT_1.Phone HAVING      (NOT (SUM(X.Dr) = 0)) OR  (NOT (SUM(X.Cr) = 0)) ORDER BY X.AccountGroup, X.AccountName";
                sql = " SELECT   ISNULL(X.AccountGroup, N'') AS AccountGroup, X.AccountName, ACCOUNT_1.Phone, SUM(X.Dr) AS Dr, SUM(X.Cr) AS Cr,'' as Remark FROM         (SELECT     AccountGroup, AccountName, SUM(Dr) AS Dr, SUM(Cr) AS Cr FROM         (SELECT     OTHER.Name AS AccountGroup, ACCOUNT.Name AS AccountName,          CASE WHEN Journal.Amount >= 0 THEN Journal.Amount ELSE 0 END AS Dr,      CASE WHEN Journal.Amount < 0 THEN - 1 * Journal.Amount ELSE 0 END AS Cr FROM          ACCOUNT LEFT OUTER JOIN         OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id RIGHT OUTER JOIN       Journal ON ACCOUNT.Ac_id = Journal.Ac_id WHERE      (Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (Journal." + Database.BMode + " = 'true') AND (ACCOUNT.Branch_id = '" + Database.BranchId + "')) AS XY GROUP BY AccountGroup, AccountName   UNION ALL    SELECT     OTHER_1.Name AS AccountGroup, QryAccountinfo.Name AS AccountName, QryAccountinfo.Dr2 as Dr, QryAccountinfo.Cr2 as Cr                FROM         QryAccountinfo LEFT OUTER JOIN           OTHER AS OTHER_1 ON QryAccountinfo.Loc_id = OTHER_1.Oth_id  WHERE     (QryAccountinfo.Branch_id = '" + Database.BranchId + "')) AS X LEFT OUTER JOIN     ACCOUNT AS ACCOUNT_1 ON X.AccountName = ACCOUNT_1.Name GROUP BY X.AccountGroup, X.AccountName, ACCOUNT_1.Phone HAVING      (NOT (SUM(X.Dr) = 0)) OR     (NOT (SUM(X.Cr) = 0)) ORDER BY AccountGroup, X.AccountName";
            }
            else if (Database.BMode == "AB")
            {
               
                //sql = "SELECT  isnull(X.AccountGroup,'') as AccountGroup, X.AccountName, ACCOUNT_2.Phone, SUM(X.Buisness) AS B, SUM(X.Personal) AS P,0 as Total FROM (SELECT OTHER.Name AS AccountGroup, QryJournal.Name AS AccountName, SUM(QryJournal.Dr) - SUM(QryJournal.Cr) AS Buisness,  0 AS Personal  FROM ACCOUNT RIGHT OUTER JOIN  QryJournal ON ACCOUNT.Name = QryJournal.Name LEFT OUTER JOIN  OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id  WHERE (QryJournal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY QryJournal.Name, QryJournal.A, OTHER.Name, ACCOUNT.Branch_id HAVING  (ACCOUNT.Branch_id = '" + Database.BranchId + "') AND (QryJournal.A = 'True')  UNION ALL  SELECT OTHER_1.Name AS AccountGroup, QryAccountinfo.Name AS AccountName, QryAccountinfo.Dr - QryAccountinfo.Cr AS Buisness,   0 AS Personal  FROM QryAccountinfo LEFT OUTER JOIN  OTHER AS OTHER_1 ON QryAccountinfo.Loc_id = OTHER_1.Oth_id  WHERE (OTHER_1.Name = '" + grpname + "') AND (QryAccountinfo.Branch_id = '" + Database.BranchId + "') ";
                //sql += " UNION ALL SELECT OTHER_2.Name AS AccountGroup, QryJournal_1.Name AS AccountName, 0 AS Buisness, SUM(QryJournal_1.Dr) - SUM(QryJournal_1.Cr) AS Personal  FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN  QryJournal AS QryJournal_1 ON ACCOUNT_1.Name = QryJournal_1.Name LEFT OUTER JOIN  OTHER AS OTHER_2 ON ACCOUNT_1.Loc_id = OTHER_2.Oth_id  WHERE (QryJournal_1.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")  GROUP BY QryJournal_1.Name, QryJournal_1.B, OTHER_2.Name, ACCOUNT_1.Branch_id HAVING  (ACCOUNT_1.Branch_id = '" + Database.BranchId + "') AND (QryJournal_1.B = 'True')  UNION ALL  SELECT OTHER_1.Name AS AccountGroup, QryAccountinfo_1.Name AS AccountName, 0 AS Buisness,  QryAccountinfo_1.Dr2 - QryAccountinfo_1.Cr2 AS Personal  FROM QryAccountinfo AS QryAccountinfo_1 LEFT OUTER JOIN OTHER AS OTHER_1 ON QryAccountinfo_1.Loc_id = OTHER_1.Oth_id  WHERE (OTHER_1.Name = '" + grpname + "') AND (QryAccountinfo_1.Branch_id = '" + Database.BranchId + "')) AS X LEFT OUTER JOIN";
                //sql += " ACCOUNT AS ACCOUNT_2 ON X.AccountName = ACCOUNT_2.Name GROUP BY X.AccountGroup, X.AccountName, ACCOUNT_2.Phone HAVING (NOT (SUM(X.Buisness) = 0)) OR  (NOT (SUM(X.Personal) = 0)) ORDER BY X.AccountGroup, X.AccountName";


                sql = "SELECT  isnull(X.AccountGroup,'') as AccountGroup, X.AccountName, ACCOUNT_2.Phone, SUM(X.Buisness) AS B, SUM(X.Personal) AS P,0 as Total,'' as Remark FROM (SELECT     AccountGroup, AccountName, SUM(Dr) -SUM(Cr) AS Buisness,0 as Personal  FROM         (SELECT     OTHER.Name AS AccountGroup, ACCOUNT.Name AS AccountName,  CASE WHEN Journal.Amount >= 0 THEN Journal.Amount ELSE 0 END AS Dr,  CASE WHEN Journal.Amount < 0 THEN - 1 * Journal.Amount ELSE 0 END AS Cr  FROM          ACCOUNT LEFT OUTER JOIN         OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id RIGHT OUTER JOIN       Journal ON ACCOUNT.Ac_id = Journal.Ac_id    WHERE      (Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (Journal.A = 'true') AND (ACCOUNT.Branch_id = '" + Database.BranchId + "')) AS XY GROUP BY AccountGroup, AccountName UNION ALL    SELECT     OTHER_1.Name AS AccountGroup, QryAccountinfo.Name AS AccountName, QryAccountinfo.Dr- QryAccountinfo.Cr as Buisness,0 as Personal                FROM         QryAccountinfo LEFT OUTER JOIN";
                sql += "  OTHER AS OTHER_1 ON QryAccountinfo.Loc_id = OTHER_1.Oth_id WHERE     (QryAccountinfo.Branch_id = '" + Database.BranchId + "') UNION ALL  SELECT     AccountGroup, AccountName, 0 as Buisness,SUM(Dr) -SUM(Cr) AS Personal  FROM         (SELECT     OTHER.Name AS AccountGroup, ACCOUNT.Name AS AccountName,    CASE WHEN Journal.Amount >= 0 THEN Journal.Amount ELSE 0 END AS Dr,    CASE WHEN Journal.Amount < 0 THEN - 1 * Journal.Amount ELSE 0 END AS Cr   FROM          ACCOUNT LEFT OUTER JOIN         OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id RIGHT OUTER JOIN       Journal ON ACCOUNT.Ac_id = Journal.Ac_id   WHERE      (Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (Journal.B= 'true') AND (ACCOUNT.Branch_id = '" + Database.BranchId + "')) AS XY GROUP BY AccountGroup, AccountName   UNION ALL    SELECT     OTHER_1.Name AS AccountGroup, QryAccountinfo.Name AS AccountName, 0 as Buisness,             QryAccountinfo.Dr2- QryAccountinfo.Cr2  as Personal  FROM         QryAccountinfo LEFT OUTER JOIN  OTHER AS OTHER_1 ON QryAccountinfo.Loc_id = OTHER_1.Oth_id     WHERE     (QryAccountinfo.Branch_id = '" + Database.BranchId + "')) AS X LEFT OUTER JOIN ACCOUNT AS ACCOUNT_2 ON X.AccountName = ACCOUNT_2.Name GROUP BY X.AccountGroup, X.AccountName, ACCOUNT_2.Phone HAVING (NOT (SUM(X.Buisness) = 0)) OR  (NOT (SUM(X.Personal) = 0)) ORDER BY X.AccountGroup, X.AccountName";

            }

            dt = new DataTable();
            Database.GetSqlData(sql, dt);




         
            DataRow[] drow; 

             if (grpname == "")
            {
                drow = dt.Select("[AccountGroup] is not null", "AccountGroup,AccountName");
            }
            else
            {
                drow = dt.Select("[AccountGroup]='" + grpname + "'", "AccountGroup,AccountName");
            }

            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
            }

            if (Database.BMode != "AB")
            {
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    totdr = double.Parse(tdt.Rows[i]["Dr"].ToString());
                    totcr = double.Parse(tdt.Rows[i]["Cr"].ToString());
                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["Dr"] = totdr - totcr;
                        tdt.Rows[i]["Cr"] = 0;
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = totcr - totdr;
                    }
                    else
                    {
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = 0;
                    }
                }
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }
                if (tdt.Select("not (Dr=0 and Cr=0)").Length == 0)
                {
                    return false;
                }
            }
            else
            {
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    totdr = double.Parse(tdt.Rows[i]["P"].ToString());
                    totcr = double.Parse(tdt.Rows[i]["B"].ToString());
                   
                    tdt.Rows[i]["Total"] = totdr + totcr;
                       
                    
                }
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }
                if (tdt.Select("not (Total=0)").Length == 0)
                {
                    return false;
                }
            }

            DataTable dt2 = new DataTable();
            if (Database.BMode != "AB")
            {
                dt2 = tdt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            }
            else
            {
                dt2 = tdt.Select("not (Total=0)").CopyToDataTable();
            }
            if (dt2.Rows.Count == 0)
            {
                return false;
            }

            dt2.DefaultView.Sort = "AccountGroup,AccountName";
            dt2 = dt2.DefaultView.ToTable();


            string[,] col = new string[1, 3] { { "AccountGroup", "1", "1" } };

            if (Database.BMode != "AB")
            {
                string[,] Cwidth = new string[6, 8] { 
            { "Account Group", "0", "0","","","","","" }, 
            { "Account Name", "350", "0","Total Amount","","","","" }, 
            { "Contact No", "150", "0","","","","","" }, 
            { "Amount (Dr.)", "150", "1","|sum(Dr)","","","","" }, 
            { "Amount (Cr.)", "150", "1","|sum(Cr)","","","","" },
            { "Remark", "200", "0","","","","","" }};
              CreateReport(dt2, col, Cwidth);
            }
            else
            {
                string[,] Cwidth = new string[7, 8] { 
            { "Account Group", "0", "0","","","","","" }, 
            { "Account Name", "350", "0","Total Amount","","","","" }, 
            { "Contact No", "150", "0","","","","","" }, 
            { "Buisness", "150", "1","|sum(B)","","","","" }, 
            { "Personal", "150", "1","|sum(P)","","","","" } ,
                   { "Total", "150", "1","","","","","" },
                  { "Remark", "200", "0","","","","","" }};
                CreateReport(dt2, col, Cwidth);
            }
            return true;
        }

        public bool AccountGroupBalanceOLd(DateTime DateFrom, DateTime DateTo)
        {

            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker1.Visible = false;
            label1.Visible = false;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Payment Collector Balance";
            this.Text = frmptyp;
            label3.Enabled = false;
            textBox1.Enabled = false;

           
            if (Database.IsKacha== false)
            {

                sql = "SELECT " + access_sql.fnstring("[GroupName]=null", "ActName", "[GroupName]") + " AS AccountGroup, Test.Name, Sum(Test.Dr) AS Dr, Sum(Test.Cr) AS Cr FROM (SELECT ACCOUNTYPE.Name as ActName, OTHER.Name as GroupName, ACCOUNT.Name,  " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance<0", "-1*(ACCOUNT.Balance)", "0") + " AS Cr FROM (ACCOUNT LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id union all SELECT ACCOUNTYPE.Name as ActName, OTHER.Name AS GroupName, ACCOUNT.Name," + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN (((JOURNAL LEFT JOIN ACCOUNT ON JOURNAL.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id) ON VOUCHERINFO.Vi_id = JOURNAL.Vi_id WHERE (((JOURNAL.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS Test GROUP BY " + access_sql.fnstring("[GroupName]=null", "ActName", "[GroupName]") + ", Test.Name";
            }
            else
            {
                sql = "SELECT " + access_sql.fnstring("[GroupName]=null", "ActName", "[GroupName]") + " AS AccountGroup, Test.Name, Sum(Test.Dr) AS Dr, Sum(Test.Cr) AS Cr FROM (SELECT ACCOUNTYPE.Name as ActName, OTHER.Name as GroupName, ACCOUNT.Name,  " + access_sql.fnstring("ACCOUNT.Balance2>0", "ACCOUNT.Balance2", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance2<0", "-1*(ACCOUNT.Balance2)", "0") + " AS Cr FROM (ACCOUNT LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id union all SELECT ACCOUNTYPE.Name as ActName, OTHER.Name AS GroupName, ACCOUNT.Name," + access_sql.fnstring("JOURNAL.Amount>0", "JOURNAL.Amount", "0") + " AS Dr, " + access_sql.fnstring("JOURNAL.Amount<0", "-1*(JOURNAL.Amount)", "0") + " AS Cr FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN (((JOURNAL LEFT JOIN ACCOUNT ON JOURNAL.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id) ON VOUCHERINFO.Vi_id = JOURNAL.Vi_id WHERE (((JOURNAL.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")))  AS Test GROUP BY " + access_sql.fnstring("[GroupName]=null", "ActName", "[GroupName]") + ", Test.Name";
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            dt.DefaultView.Sort = "AccountGroup,Name";
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                totdr = double.Parse(dt.Rows[i]["Dr"].ToString());
                totcr = double.Parse(dt.Rows[i]["Cr"].ToString());
                if (totdr > totcr)
                {
                    dt.Rows[i]["Dr"] = totdr - totcr;
                    dt.Rows[i]["Cr"] = 0;
                }
                else if (totcr > totdr)
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = totcr - totdr;
                }
                else
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                }
            }

            if (dt.Select("not (Dr=0 and Cr=0)").Length == 0)
            {
                return false;
            }

            tdt = dt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            totdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
            totcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());
            if (totdr > totcr)
            {
                tdt.Rows.Add("", "Difference in Opening Trial", "0", totdr - totcr);
            }
            else if (totdr <= totcr)
            {
                tdt.Rows.Add("", "Difference in Opening Trial", totcr - totdr, "0");
            }

            string[,] col = new string[1, 3] { { "AccountGroup", "1", "1" } };
            string[,] Cwidth = new string[4, 8] { 
            { "Account Group", "0", "0","","","","","" }, 
            { "Account Name", "700", "0","Total Amount","","","","" }, 
            { "Amount (Dr.)", "150", "1","|sum(Dr)","+sum(Dr)-sum(Cr)","","","" }, 
            { "Amount (Cr.)", "150", "1","|sum(Cr)","+sum(Cr)-sum(Dr)","","","" } };
            CreateReport(tdt, col, Cwidth);
            return true;

        }


        public bool CashierReport(DateTime DateFrom, DateTime DateTo,string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Cashier Report";
            this.Text = frmptyp;
            textBox1.Visible = true;
            label3.Visible = true;
            textBox1.Text = accnm;

            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            //sql = "SELECT      VOUCHERTYPE.Name,  Journal.Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112)   + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber,SUM( Journal.Amount) AS Amount,   ACCOUNT.Name AS Debit,                       ACCOUNT_2.Name AS Credit FROM          VOUCHERTYPE RIGHT OUTER JOIN                       ACCOUNT AS ACCOUNT_2 RIGHT OUTER JOIN   ACCOUNT RIGHT OUTER JOIN                        VOUCHERINFO ON  ACCOUNT.Ac_id =  VOUCHERINFO.Dr_Ac_id ON ACCOUNT_2.Ac_id =  VOUCHERINFO.Cr_Ac_id ON  VOUCHERTYPE.Vt_id =  VOUCHERINFO.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN   ACCOUNT AS ACCOUNT_1 LEFT OUTER JOIN  ACCOUNTYPE ON ACCOUNT_1.Act_id =  ACCOUNTYPE.Act_id ON  Journal.Ac_id = ACCOUNT_1.Ac_id ON                       VOUCHERINFO.Vi_id =  Journal.Vi_id WHERE     ( ACCOUNTYPE.Name = 'CASH-IN-HAND') AND ( VOUCHERINFO.Branch_id = '" + Database.BranchId + "') AND ( VOUCHERINFO.Cashier_approved = 'true') AND ( VOUCHERTYPE."+Database.BMode+" = 'true') GROUP BY  VOUCHERTYPE.Name,  VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112)   + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)),  Journal.Vdate,   ACCOUNT_2.Name,  ACCOUNT.Name HAVING      (dbo.Journal.Vdate >= '"+DateFrom.ToString(Database.dformat)+"') AND (dbo.Journal.Vdate <= '"+DateTo.ToString(Database.dformat)+"') ORDER BY DocNumber";
            sql = "SELECT Userinfo.Uname, VOUCHERTYPE.Name, Journal.Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber, SUM(Journal.Amount) AS Amount,   ACCOUNT.Name AS Debit, ACCOUNT_2.Name AS Credit FROM ACCOUNT AS ACCOUNT_2 RIGHT OUTER JOIN  ACCOUNT RIGHT OUTER JOIN  Userinfo RIGHT OUTER JOIN  VOUCHERINFO ON Userinfo.U_id = VOUCHERINFO.Cashier_id ON ACCOUNT.Ac_id = VOUCHERINFO.Dr_Ac_id ON   ACCOUNT_2.Ac_id = VOUCHERINFO.Cr_Ac_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN Journal LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 LEFT OUTER JOIN  ACCOUNTYPE ON ACCOUNT_1.Act_id = ACCOUNTYPE.Act_id ON Journal.Ac_id = ACCOUNT_1.Ac_id ON   VOUCHERINFO.Vi_id = Journal.Vi_id WHERE (ACCOUNTYPE.Name = 'CASH-IN-HAND') AND (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') AND (VOUCHERINFO.Cashier_approved = 'true') AND   (VOUCHERTYPE." + Database.BMode + " = 'true') GROUP BY VOUCHERINFO.Vnumber,VOUCHERTYPE.Name, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112)   + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)), Journal.Vdate, ACCOUNT_2.Name, ACCOUNT.Name, Userinfo.Uname HAVING (Journal.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (Journal.Vdate <= '" + DateTo.ToString(Database.dformat) + "') ORDER BY VOUCHERTYPE.Name,VOUCHERINFO.Vnumber,DocNumber ";


            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            DataRow[] drow;
            
            drow = dt.Select("Uname is not null", "");
            if (accnm == "All" || accnm=="")
            {
                drow = dt.Select("Uname is not null", "");
            }
            else if (accnm != "All")
            {
                drow = dt.Select("Uname='" + accnm + "' ", "");
            }


            tdt = new DataTable();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();


            }
            else
            {
                return false;
            }
           


            tdt.DefaultView.Sort = "Name,Docnumber";
            tdt = tdt.DefaultView.ToTable();
         

            string[,] col = new string[2, 3] {{ "UName", "1", "1" }, { "Name", "0", "1" } };
            string[,] Cwidth = new string[7, 8] { 
            { "UName", "0", "0","","","","","" }, 
            { "Name", "200", "0","","","","","" }, 
            { "Date", "150", "1","","","","","" }, 
            { "Document Nummber", "200", "0","","","","","" },
            { "Amount", "150", "1","|sum(Amount)","|sum(Amount)","|sum(Amount)","","" },
            { "Debit A/c", "150", "0","","","","","" },
            { "Credit A/c", "150", "0","","","","","" }
            };
            CreateReport(tdt, col, Cwidth);
            return true;

        }

        public bool StandardTrial(DateTime DateFrom, DateTime DateTo)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Standard Trial Balance";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Trial Balance, as on " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if(Database.BMode=="A")
            {
                sql = "SELECT X.Name, sum(X.Dr) AS Dr, sum(X.Cr) AS Cr FROM (SELECT QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr as Dr, QryAccountinfo.Cr as Cr FROM QryAccountinfo)  AS X GROUP BY x.Name having (not sum(X.Dr)=0 or not sum(X.Cr)=0)";
            }
            else if (Database.BMode == "B")
            {
                sql = "SELECT X.Name, sum(X.Dr) AS Dr, sum(X.Cr) AS Cr FROM (SELECT QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr2 as Dr, QryAccountinfo.Cr2 as Cr FROM QryAccountinfo)  AS X GROUP BY x.Name having (not sum(X.Dr)=0 or not sum(X.Cr)=0)";
            }
            else if (Database.BMode == "AB")
            {
                sql = "SELECT X.Name, sum(X.Dr) AS Dr, sum(X.Cr) AS Cr FROM (SELECT QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal WHERE (((QryJournal.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryJournal.Name, QryJournal." + Database.BMode + " HAVING (((QryJournal." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) UNION ALL SELECT QryAccountinfo.Name, QryAccountinfo.Dr12 as Dr, QryAccountinfo.Cr12 as Cr FROM QryAccountinfo)  AS X GROUP BY x.Name having (not sum(X.Dr)=0 or not sum(X.Cr)=0)";
            }
            dt.Clear();
            Database.GetSqlData(sql, dt);

            dt.DefaultView.Sort = "Name";
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                totdr = double.Parse(dt.Rows[i]["Dr"].ToString());
                totcr = double.Parse(dt.Rows[i]["Cr"].ToString());
                if (totdr > totcr)
                {
                    dt.Rows[i]["Dr"] = totdr - totcr;
                    dt.Rows[i]["Cr"] = 0;
                }
                else if (totcr > totdr)
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = totcr - totdr;
                }
                else
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                }
            }
            if (dt.Rows.Count == 0)
            {
                return false;
            }

            tdt = dt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            totdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
            totcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());
            if (totdr > totcr)
            {
                tdt.Rows.Add("Difference in Opening Trial", "0", totdr - totcr);
            }
            else if (totdr < totcr)
            {
                tdt.Rows.Add("Difference n Opening Trial", totcr - totdr, "0");
            }

            string[,] col = new string[0, 0];
            string[,] Cwidth = new string[3, 8] { 
            { "Account", "700", "0","Total Amount" ,"","","",""}, 
            { "Amount (Dr.)", "150", "1","|sum(Dr)","","","","" }, 
            { "Amount (Cr.)", "150", "1","|sum(Cr)" ,"","","",""} };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool UnRegisteredPurchaseList(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "UnRegistered Purchase List";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "UnRegistered Purchase List, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
         
            if (Database.IsKacha == false)
            {
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Category_Name, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Vdate, QryItemTranjection.Vnumber, QryItemTranjection.Quantity, QryItemTranjection.Packing, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection.[Unregistered])=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((QryItemTranjection."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
            }
            else
            {
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Category_Name, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Vdate, QryItemTranjection.Vnumber, QryItemTranjection.Quantity, QryItemTranjection.Packing, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection.[Unregistered])=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
            }
            dt.Clear();
            Database.GetSqlData(sql, dt);
            dt.DefaultView.Sort = "Vdate";
            if (dt.Rows.Count == 0)
            {
                return false;
            }

            tdt = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "").CopyToDataTable();

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            { "Type", "1", "0" }, 
            { "Category_Name", "1", "0" } };

            string[,] Cwidth = new string[8, 8] { 
            { "Type", "", "0" ,"","","","",""}, 
            { "Category_Name", "", "0","","","","","" }, 
            { "ACCOUNT.Name", "200", "0","","","","","" },
            { "Vdate", "150", "0","","","","",""},
            { "Vnumber", "150", "0" ,"","","","",""},
            { "Quantity", "150", "0","","","" ,"",""},
            { "Packing", "150", "0","","","","","" },
            { "ItemAmount", "200", "0","","","","","" }
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool StockSummarycross(DateTime DateFrom, DateTime DateTo, string accnm, string companyname)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Summary Cross";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            gGodownName = accnm;
            textBox1.Text = companyname;
            label3.Enabled = true;
            textBox1.Enabled = true;
            checkBox1.Visible = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Feature.Available("Multi-Godown") == "Yes")
            {
                if (Database.DatabaseType == "access")
                {


                    if (Database.IsKacha == false)
                    {
                        sql = "TRANSFORM iif(Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null,0,Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale)) AS stock  SELECT IIf(ACCOUNT.Name Is Null,'<MAIN>',ACCOUNT.Name) AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description  FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock WHERE (((stock.Vid)='0') AND ((stock.marked)=False)) GROUP BY stock.Did, stock.godown_id   Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)=False)) GROUP BY stock.Did, stock.godown_id, VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=False)) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY 'Opening Balance', opn.Did, 0, 0, opn.godown_id Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=False)) GROUP BY stock.Did, 0, 0, stock.godown_id";
                        sql += " Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=False) AND ((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#)) GROUP BY stock.Did, 0, 0, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id GROUP BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, final.godown_id, ACCOUNT.Name ORDER BY Description.Pvalue desc PIVOT Description.Pvalue";

                    }
                    else
                    {

                        sql = "TRANSFORM iif(Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null,0,Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale)) AS stock  SELECT IIf(ACCOUNT.Name Is Null,'<MAIN>',ACCOUNT.Name) AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description  FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock WHERE (((stock.Vid)='0') AND ((stock.marked)=True)) GROUP BY stock.Did, stock.godown_id   Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)=True)) GROUP BY stock.Did, stock.godown_id, VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=True)) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY 'Opening Balance', opn.Did, 0, 0, opn.godown_id Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=True)) GROUP BY stock.Did, 0, 0, stock.godown_id";
                        sql += " Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=True) AND ((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#)) GROUP BY stock.Did, 0, 0, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id GROUP BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, final.godown_id, ACCOUNT.Name ORDER BY Description.Pvalue desc PIVOT Description.Pvalue";
                    }
                }
                else
                {
                    DataTable dtother = new DataTable();
                    if (companyname == "")
                    {
                        Database.GetSqlData("SELECT DESCRIPTION.Pvalue as Pvalue FROM OTHER LEFT OUTER JOIN  DESCRIPTION ON  OTHER.Oth_id =  DESCRIPTION.Company_id  GROUP BY  DESCRIPTION.Pvalue ORDER BY DESCRIPTION.Pvalue DESC", dtother);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT DESCRIPTION.Pvalue as Pvalue FROM OTHER LEFT OUTER JOIN  DESCRIPTION ON  OTHER.Oth_id =  DESCRIPTION.Company_id WHERE OTHER.Name = '" + companyname + "' GROUP BY  DESCRIPTION.Pvalue ORDER BY DESCRIPTION.Pvalue DESC", dtother);
                    }
                    string strColumns = "";

                    for (int i = 0; i < dtother.Rows.Count; i++)
                    {
                        strColumns += "[" + dtother.Rows[i]["Pvalue"].ToString() + "],";
                    }
                    strColumns = strColumns.TrimEnd(',');
                    //if (Database.IsKacha == false)
                    //{

                        //sql = "SELECT   Godown, Company,Item , Description," + strColumns + "  FROM ( SELECT  case when ACCOUNT.Name Is Null then '<MAIN>' Else ACCOUNT.Name End AS Godown,OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description,Description.Pvalue,case when  Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null then 0 Else Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) End AS stock   FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock WHERE (((stock.Vid)='0') AND ((stock.marked)='False')) GROUP BY stock.Did, stock.godown_id ";
                        //sql += " Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)='False')) GROUP BY stock.Did, stock.godown_id, VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "'))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='False')) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY opn.Did,  opn.godown_id ";
                        //sql += " Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='False')) GROUP BY stock.Did, stock.godown_id Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)='False') AND ((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "'))";
                        //sql += " GROUP BY stock.Did, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name,OTHER.Name, OTHER_1.Name, DESCRIPTION.Description,Description.Pvalue)AS res PIVOT (sum(stock) For Pvalue in (" + strColumns + " )) as Pivoting";
                    sql = "SELECT   Godown, Company,Item , Description," + strColumns + "  FROM (SELECT  case when ACCOUNT.Name Is Null then '<MAIN>' Else ACCOUNT.Name End AS Godown,OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description,Description.Pvalue,case when  Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null then 0 Else Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) End AS stock   FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM (SELECT      Stock.Did, SUM( Stock.Issue) AS Amount,  Stock.godown_id FROM          VOUCHERTYPE RIGHT OUTER JOIN   VOUCHERINFO ON  VOUCHERTYPE.Vt_id =  VOUCHERINFO.Vt_id RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid WHERE     ( VOUCHERTYPE."+Database.BMode+" = 1) GROUP BY  Stock.Did,  Stock.godown_id,  VOUCHERINFO.Vdate HAVING      ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "')";
                    sql += " union all SELECT   Stock.Did, SUM( Stock.Receive) AS Amount,  Stock.godown_id FROM          VOUCHERTYPE RIGHT OUTER JOIN     VOUCHERINFO ON  VOUCHERTYPE.Vt_id =  VOUCHERINFO.Vt_id RIGHT OUTER JOIN    Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid WHERE     ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ( VOUCHERTYPE." + Database.BMode + " = 1) GROUP BY  Stock.Did,  Stock.godown_id )  AS opn GROUP BY opn.Did,  opn.godown_id  Union all SELECT      Stock.Did, 0 AS Opening, SUM( Stock.Receive) AS Purchase, 0 AS Sale,  Stock.godown_id FROM          VOUCHERINFO LEFT OUTER JOIN     VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id LEFT OUTER JOIN     Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid WHERE     ( VOUCHERINFO.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ( VOUCHERINFO.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND ( VOUCHERTYPE." + Database.BMode + " = 1) GROUP BY  Stock.Did,  Stock.godown_id Union all  SELECT      Stock.Did, 0 AS Opening, 0 AS Purchase, SUM( Stock.Issue) AS Sale,  Stock.godown_id";
                    sql += " FROM  VOUCHERINFO LEFT OUTER JOIN  VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id LEFT OUTER JOIN       Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid WHERE     ( VOUCHERINFO.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ( VOUCHERINFO.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND ( VOUCHERTYPE." + Database.BMode + " = 1) GROUP BY  Stock.Did,  Stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name,OTHER.Name, OTHER_1.Name, DESCRIPTION.Description,Description.Pvalue) AS res PIVOT (sum(stock) For Pvalue in (" + strColumns + " )) as Pivoting    ";


                    //}
                    //else
                    //{
                    //    sql = "SELECT   Godown, Company,Item , Description," + strColumns + "  FROM ( SELECT  case when ACCOUNT.Name Is Null then '<MAIN>' Else ACCOUNT.Name End AS Godown,OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description,Description.Pvalue,case when  Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null then 0 Else Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) End AS stock   FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock WHERE (((stock.Vid)='0') AND ((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id ";
                    //    sql += " Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id, VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "'))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY opn.Did,  opn.godown_id ";
                    //    sql += " Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)='true') AND ((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "'))";
                    //    sql += " GROUP BY stock.Did, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name,OTHER.Name, OTHER_1.Name, DESCRIPTION.Description,Description.Pvalue)AS res PIVOT (sum(stock) For Pvalue in (" + strColumns + " )) as Pivoting";
                    //}

                }
            }
            else
            {


                if (Database.DatabaseType == "access")
                {


                    if (Database.IsKacha == false)
                    {
                        sql = "TRANSFORM iif(Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null,0,Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale)) AS stock  SELECT '<MAIN>' AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description  FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount FROM stock WHERE (((stock.Vid)=0) AND ((stock.marked)=False)) GROUP BY stock.Did   Union all SELECT stock.Did, Sum(stock.Issue) AS Amount FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)=False)) GROUP BY stock.Did,  VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=False)) GROUP BY stock.Did )  AS opn GROUP BY 'Opening Balance', opn.Did, 0, 0 Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=False)) GROUP BY stock.Did, 0, 0";
                        sql += " Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=False) AND ((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#)) GROUP BY stock.Did, 0, 0)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id)  GROUP BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description ORDER BY Description.Pvalue desc  PIVOT Description.Pvalue";

                    }
                    else
                    {

                        sql = "TRANSFORM iif(Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null,0,Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale)) AS stock  SELECT '<MAIN>' AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description  FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount FROM stock WHERE (((stock.Vid)=0) AND ((stock.marked)=true)) GROUP BY stock.Did   Union all SELECT stock.Did, Sum(stock.Issue) AS Amount FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)=true)) GROUP BY stock.Did,  VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=true)) GROUP BY stock.Did )  AS opn GROUP BY 'Opening Balance', opn.Did, 0, 0 Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#) AND ((stock.marked)=true)) GROUP BY stock.Did, 0, 0";
                        sql += " Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=true) AND ((VOUCHERINFO.Vdate)>=#" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "#)) GROUP BY stock.Did, 0, 0)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id)  GROUP BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description ORDER BY Description.Pvalue desc PIVOT Description.Pvalue";

                    }
                }
                else
                {
                    DataTable dtother = new DataTable();
                    if (companyname == "")
                    {
                        Database.GetSqlData("SELECT DESCRIPTION.Pvalue as Pvalue FROM OTHER LEFT OUTER JOIN  DESCRIPTION ON  OTHER.Oth_id =  DESCRIPTION.Company_id  GROUP BY  DESCRIPTION.Pvalue ORDER BY DESCRIPTION.Pvalue DESC", dtother);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT DESCRIPTION.Pvalue as Pvalue FROM OTHER LEFT OUTER JOIN  DESCRIPTION ON  OTHER.Oth_id =  DESCRIPTION.Company_id WHERE OTHER.Name = '" + companyname + "' GROUP BY  DESCRIPTION.Pvalue ORDER BY DESCRIPTION.Pvalue DESC", dtother);
                    }
                    string strColumns = "";

                    for (int i = 0; i < dtother.Rows.Count; i++)
                    {
                        strColumns += "[" + dtother.Rows[i]["Pvalue"].ToString() + "],";
                    }
                    strColumns = strColumns.TrimEnd(',');
                    if (Database.IsKacha == false)
                    {

                        sql = "SELECT  Godown, Company,Item , Description," + strColumns + "  FROM ( SELECT '<MAIN>' AS Godown,OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description,Description.Pvalue,case when  Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null then 0 Else Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) End AS stock   FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount FROM stock WHERE (((stock.Vid)='0') AND ((stock.marked)='False')) GROUP BY stock.Did ";
                        sql += " Union all SELECT stock.Did, Sum(stock.Issue) AS Amount FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)='False')) GROUP BY stock.Did VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "'))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='False')) GROUP BY stock.Did)  AS opn GROUP BY opn.Did ";
                        sql += " Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='False')) GROUP BY stock.Did Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)='False') AND ((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "'))";
                        sql += " GROUP BY stock.Did)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id)  GROUP BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description,Description.Pvalue)AS res PIVOT (sum(stock) For Pvalue in (" + strColumns + " )) as Pivoting";

                    }
                    else
                    {
                        sql = "SELECT   Godown, Company,Item , Description," + strColumns + "  FROM ( SELECT  case when ACCOUNT.Name Is Null then '<MAIN>' Else ACCOUNT.Name End AS Godown,OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description,Description.Pvalue,case when  Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) Is null then 0 Else Sum(final.Opening)+Sum(final.Purchase)-Sum(final.Sale) End AS stock   FROM (((((SELECT opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM (SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock WHERE (((stock.Vid)='0') AND ((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id ";
                        sql += " Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id, VOUCHERINFO.Vdate HAVING (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "'))  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<'" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY opn.Did,  opn.godown_id ";
                        sql += " Union all SELECT stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND ((stock.marked)='true')) GROUP BY stock.Did, stock.godown_id Union all  SELECT stock.Did, 0 AS Opening, 0 AS Purchase,Sum(stock.Issue) AS Sale, stock.godown_id FROM VOUCHERINFO LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)='true') AND ((VOUCHERINFO.Vdate)>='" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "' And (VOUCHERINFO.Vdate)<='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "'))";
                        sql += " GROUP BY stock.Did, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id)) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name,OTHER.Name, OTHER_1.Name, DESCRIPTION.Description,Description.Pvalue)AS res PIVOT (sum(stock) For Pvalue in (" + strColumns + " )) as Pivoting";

                    }

                }

            }


            dt.Clear();
            Database.GetSqlData(sql, dt);

            DataRow[] drow;
            if (accnm == "" && companyname == "")
            {
                drow = dt.Select("Godown is not null And Company is not null", "");
            }
            else if (accnm == "" && companyname != "")
            {
                drow = dt.Select("Godown is not null And Company='" + companyname + "' ", "");
            }
            else if (accnm != "" && companyname != "")
            {
                drow = dt.Select("Godown='" + accnm + "' And Company='" + companyname + "'", "");
            }
            else
            {
                drow = dt.Select("Godown='" + accnm + "' And Company is not null", "");
            }

            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();


            }
            else
            {
                return false;
            }


            tdt.DefaultView.Sort = "Godown,Company,Item,Description";
            tdt = tdt.DefaultView.ToTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            for (int i = 0; i < tdt.Columns.Count; i++)
            {
                tdt.Columns[i].ColumnName = tdt.Columns[i].ColumnName.Replace('_', '.');

                for(int j=0;j<tdt.Rows.Count; j++)
                {
                    if (tdt.Columns[i].DataType.Name == "Decimal" && tdt.Rows[j][i].ToString() == "")
                    {
                        tdt.Rows[j][i] = 0;
                    }
                }
            }
          


            string[,] col = new string[2, 3]
                { 
                    {"Godown","1","0"},
                    {"Company","1","0"}
                };


            string[,] Cwidth = new string[tdt.Columns.Count + 4, 8];
            for (int i = 0; i < tdt.Columns.Count; i++)
            {

                Cwidth[i, 0] = tdt.Columns[i].ColumnName;
                if (i == 0)
                {
                    Cwidth[i, 1] = "0";

                }
                else if (i == 1)
                {
                    Cwidth[i, 1] = "0";

                }

                else if (i == 2)
                {
                    Cwidth[i, 1] = "200";


                }
                else if (i == 3)
                {
                    Cwidth[i, 1] = "200";

                }

                else
                {
                    Cwidth[i, 1] = (1200 / (tdt.Columns.Count - 2)).ToString();


                }
                Cwidth[i, 2] = "1";
                Cwidth[i, 3] = "";
                Cwidth[i, 4] = "";
                Cwidth[i, 5] = "";
                Cwidth[i, 6] = "";
                Cwidth[i, 7] = "";

            }

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool CustomerDetailBillWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {  
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer Detail Bill Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Customer Detail Bill Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Vdate,QryItemTranjection.DocNumber,  [ACCOUNT.Name] , QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount, QryItemTranjection.VoucherNetAmt FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            //else
            //{
            //    sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Vdate, QryItemTranjection.DocNumber, [ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount, QryItemTranjection.VoucherNetAmt FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            dt = new DataTable();
            Database.GetSqlData(sql, dt);


            dt.Columns.Add("TAmount", typeof(decimal));
            DataRow[] drow;
            if (accnm == "")
            {
                drow = dt.Select("[ACCOUNT.Name] is not null and Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "", "Type,DocNumber");
            }
            else
            {
                drow = dt.Select("[ACCOUNT.Name]='" + accnm + "' and Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "", "Type,DocNumber");
            }
            tdt.Clear();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (Database.IsKacha == false)
                    {
                        tdt.Rows[i]["Tamount"] = Database.GetScalarDecimal("SELECT Sum(" + access_sql.fnstring("type='Sale' Or type='Purchase'", "VOUCHERINFO.Totalamount", "-1*(VOUCHERINFO.Totalamount)") + ") AS total FROM VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((VOUCHERINFO.Ac_id)='" + funs.Select_ac_id(accnm) + "') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))");
                    }
                    else
                    {
                        tdt.Rows[i]["Tamount"] = Database.GetScalarDecimal("SELECT Sum(" + access_sql.fnstring("type='Sale' Or type='Purchase'", "VOUCHERINFO.Totalamount", "-1*(VOUCHERINFO.Totalamount)") + ") AS total FROM VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((VOUCHERINFO.Ac_id)='" + funs.Select_ac_id(accnm) + "') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))");
                    }
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }
                }

                tdt.Columns.Remove("Type");
                tdt.DefaultView.Sort = "Vdate";
                tdt = tdt.DefaultView.ToTable();

            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            
            {"Vdate", "1", "0" },
            {"DocNumber", "0", "1" } };


            string[,] Cwidth = new string[10, 8] { 
            { "Vdate", "", "0","","","" ,"",""},
            { "DocNumber", "200", "0","","","","","" },
            { "Party Name", "150", "0","","","","","" },
            { "Description", "250", "0","TotalAmount","","Amount","","" },
            { "Quantity", "100", "0","","","|sum(ItemAmount)","","" },
            { "Rate_am", "100", "0","","","(+)","","" },
            { "Packing", "100", "0","","","|max(VoucherNetAmt)-sum(ItemAmount)","","" },
            { "ItemAmount", "100", "0","|max(Tamount)","","|max(VoucherNetAmt)","","" },
            { "VoucherNetAmt", "0", "0","0","","","",""},
            { "TAmount", "0", "0","0","","","",""}
            };


            CreateReport(tdt, col, Cwidth);
            return true;

        }

        public bool ReceiptRegister(DateTime DateFrom, DateTime DateTo,string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Receipt Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;

            this.Text = frmptyp;
            DecsOfReport = "Receipt Registor, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            sql = "SELECT VOUCHERTYPE.Name AS VoucherType, VOUCHERINFO.Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) as DocNumber, ACCOUNT_1.Name AS CashBankAcc, ACCOUNT.Name AS PartyAcc, VOUCHERACTOTAL.Chkno AS ChequeNo, VOUCHERACTOTAL.Cdate AS ChequeDate, VOUCHERACTOTAL.Amount AS Amount FROM (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) INNER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + "" + DateFrom.ToString(Database.dformat) + "" + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + "" + DateTo.ToString(Database.dformat) + "" + access_sql.Hash + ") AND ((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Receipt')) AND (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') ORDER BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate,VOUCHERINFO.Vnumber, ACCOUNT_1.Name";
            

            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }
            
            DataRow[] drow;
            if (accnm != "")
            {
                drow = dt.Select("CashBankAcc='" + accnm + "'", "Vouchertype,Vdate");
            }
            else
            {
                drow = dt.Select("CashBankAcc is not null", "Vouchertype,Vdate");
            }
            tdt.Clear();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            string[,] col = new string[2, 3] {            
            {"VoucherType", "1", "0" },
            {"Vdate", "0", "0" } };

            string[,] Cwidth = new string[8, 8] { 
            { "VoucherType", "", "0","","","","","" },
            { "Vdate", "200", "0","","","","","" },
            { "DocNumber", "150", "0","","","","","" },
            { "CashBankAcc", "250", "0","","","","","" },
            { "PartyAcc", "250", "0","","","","","" },
            { "ChequeNo", "100", "0","","","","","" },
            { "ChequeDate", "100", "0","","","","","" },
            { "Amount", "100", "0","|sum(Amount)","","","","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool PaymentRegister(DateTime DateFrom, DateTime DateTo,string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Payment Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = accnm;

            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Payment Registor, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{

            sql = "SELECT VOUCHERTYPE.Name AS VoucherType, VOUCHERINFO.Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) as DocNumber, ACCOUNT_1.Name AS CashBankAcc, ACCOUNT.Name AS PartyAcc, VOUCHERACTOTAL.Chkno AS ChequeNo, VOUCHERACTOTAL.Cdate AS ChequeDate, VOUCHERACTOTAL.Amount AS Amount FROM (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) INNER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + "" + DateFrom.ToString(Database.dformat) + "" + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + "" + DateTo.ToString(Database.dformat) + "" + access_sql.Hash + ") AND ((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Payment')) AND (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') ORDER BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate,VOUCHERINFO.Vnumber, ACCOUNT_1.Name";

            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Name AS VoucherType, VOUCHERINFO.Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) as DocNumber, ACCOUNT_1.Name AS CashBankAcc, ACCOUNT.Name AS PartyAcc, VOUCHERACTOTAL.Chkno AS ChequeNo, VOUCHERACTOTAL.Cdate AS ChequeDate, VOUCHERACTOTAL.Amount AS Amount FROM (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) INNER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + "" + DateFrom.ToString(Database.dformat) + "" + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + "" + DateTo.ToString(Database.dformat) + "" + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Payment')) AND (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') ORDER BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT_1.Name";
            //}
            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }
            DataRow[] drow;
            if (accnm != "")
            {
                drow = dt.Select("CashBankAcc='" + accnm + "'", "Vouchertype,Vdate");
            }
            else
            {
                drow = dt.Select("CashBankAcc is not null", "Vouchertype,Vdate");
            }
            tdt.Clear();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            
            {"VoucherType", "1", "0" },
            {"Vdate", "0", "0" } };


            string[,] Cwidth = new string[8, 8] { 
            { "VoucherType", "", "0","","","","","" },
            { "Vdate", "200", "0","","","","","" },
            { "DocNumber", "150", "0","","","","","" },
            { "CashBankAcc", "250", "0","","","","","" },
            { "PartyAcc", "250", "0","","","","","" },
            { "ChequeNo", "100", "0","","","","","" },
            { "ChequeDate", "100", "0","","","","","" },
            { "Amount", "100", "0","|sum(Amount)","","","","" }
            };


            CreateReport(tdt, col, Cwidth);
            return true;

        }

        public bool CustomerProfit(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer Profit";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Customer Profit, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Vdate, QryItemTranjection.ACCOUNT.Name, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Packing, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.cost, QryItemTranjection.ItemAmount, 0 AS CostAmt, QryItemTranjection.VoucherNetAmt";
                sql += " FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
                sql += " union all SELECT VOUCHERTYPE.Name AS Type, VOUCHERINFO.Vdate, ACCOUNT.Name AS Name, [VOUCHERTYPE].[Short] & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & [VOUCHERINFO].[Vnumber]) AS DocNumber, ACCOUNT_1.Name AS Description, '' AS Packing, 1 AS Quantity, VOUCHERACTOTAL.Amount AS Rate_am, Sum(ITEMCHARGES.Amount+VOUCHERACTOTAL.Amount) AS cost, VOUCHERACTOTAL.Amount AS ItemAmount, Sum(ITEMCHARGES.Amount+VOUCHERACTOTAL.Amount) AS CostAmt, Sum(ITEMCHARGES.Amount+VOUCHERACTOTAL.Amount) AS VoucherNetAmt FROM (VOUCHERTYPE INNER JOIN (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) AND (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ITEMCHARGES ON (VOUCHERACTOTAL.Srno = ITEMCHARGES.Itemsr) AND (VOUCHERACTOTAL.Vi_id = ITEMCHARGES.Vi_id)) ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT.Name, [VOUCHERTYPE].[Short] & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & [VOUCHERINFO].[Vnumber]), ACCOUNT_1.Name, '', 1, VOUCHERACTOTAL.Amount, VOUCHERACTOTAL.Amount";
            }
            else
            {
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Vdate, QryItemTranjection.ACCOUNT.Name, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Packing, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.cost, QryItemTranjection.ItemAmount, 0 AS CostAmt, QryItemTranjection.VoucherNetAmt";
                sql += " FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
                sql += " union all SELECT VOUCHERTYPE.Name AS Type, VOUCHERINFO.Vdate, ACCOUNT.Name AS Name, [VOUCHERTYPE].[Short] & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & [VOUCHERINFO].[Vnumber]) AS DocNumber, ACCOUNT_1.Name AS Description, '' AS Packing, 1 AS Quantity, VOUCHERACTOTAL.Amount AS Rate_am, Sum(ITEMCHARGES.Amount+VOUCHERACTOTAL.Amount) AS cost, VOUCHERACTOTAL.Amount AS ItemAmount, Sum(ITEMCHARGES.Amount+VOUCHERACTOTAL.Amount) AS CostAmt, Sum(ITEMCHARGES.Amount+VOUCHERACTOTAL.Amount) AS VoucherNetAmt FROM (VOUCHERTYPE INNER JOIN (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) AND (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ITEMCHARGES ON (VOUCHERACTOTAL.Srno = ITEMCHARGES.Itemsr) AND (VOUCHERACTOTAL.Vi_id = ITEMCHARGES.Vi_id)) ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT.Name, [VOUCHERTYPE].[Short] & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & [VOUCHERINFO].[Vnumber]), ACCOUNT_1.Name, '', 1, VOUCHERACTOTAL.Amount, VOUCHERACTOTAL.Amount";
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Name='" + accnm + "' and Vdate>=#" + DateFrom.ToString(Database.dformat) + "# and Vdate<=#" + DateTo.ToString(Database.dformat) + "#", "Type,DocNumber");
            tdt.Clear();
            
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }
                    tdt.Rows[i]["CostAmt"] = double.Parse(tdt.Rows[i]["cost"].ToString()) * double.Parse(tdt.Rows[i]["Quantity"].ToString());

                    if (double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) > double.Parse(tdt.Rows[i]["CostAmt"].ToString()))
                    {
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) - double.Parse(tdt.Rows[i]["CostAmt"].ToString());
                    }
                    else if (double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) < double.Parse(tdt.Rows[i]["CostAmt"].ToString()))
                    {
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) - double.Parse(tdt.Rows[i]["CostAmt"].ToString());
                    }
                }

                tdt.Columns.Remove("Type");
                tdt.Columns.Remove("Name");
                tdt.Columns.Remove("CostAmt");
                tdt.Columns.Remove("VoucherNetAmt");
                tdt.DefaultView.Sort = "Vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            
            {"Vdate", "1", "0" },
            {"DocNumber", "0", "1" } };


            string[,] Cwidth = new string[10, 8] { 
            { "Vdate", "", "0","","","","","" },
            { "DocNumber", "200", "0","","","","","" },
            { "Description", "200", "0","Total Amount","","Amount","","" },
            { "Packing", "100", "0","","","","","" },
            { "Quantity", "100", "0","","","","","" },
            { "Rate_am", "150", "0","","","" ,"",""},
            { "Cost", "100", "0","","","","","" },
            { "Profit", "150", "0","|sum(ItemAmount)","","|sum(ItemAmount)","","" },
            { "CostAmt", "0", "0","","","","","" },
            { "VoucherNetAmt", "0", "0","","","","","" }            
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool CustomerwiseProfit(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customerwise Profit";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;            
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Customerwise Profit, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
       
            if (Database.IsKacha == false)
            {
                sql = "SELECT Final.Vdate, Final.Name, Sum(Final.Profit) AS SumOfProfit  FROM (select Type,Vdate,ACCOUNT.Name, iif(Type='Return',-1* (ItemAmount-Quantity*cost), (ItemAmount-Quantity*cost) ) as Profit  from QryItemTranjection where Type='Sale' or Type='Return' union all  SELECT VOUCHERTYPE.Name AS Type, VOUCHERINFO.Vdate, ACCOUNT.Name AS Name, Sum(-1*ITEMCHARGES.Amount) AS Profit";
                sql +=" FROM (VOUCHERTYPE INNER JOIN (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) AND (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ITEMCHARGES ON (VOUCHERACTOTAL.Srno = ITEMCHARGES.Itemsr) AND (VOUCHERACTOTAL.Vi_id = ITEMCHARGES.Vi_id)) ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERACTOTAL.Amount, VOUCHERTYPE.A";
                sql +=" HAVING (((VOUCHERTYPE.A)=True)))  AS Final GROUP BY Final.Name, Final.Vdate HAVING Final.Vdate>=#"+ DateFrom.ToString(Database.dformat) +"# and  Final.Vdate<=#"+ DateTo.ToString(Database.dformat) +"#";
            }
            else
            {
                sql = "SELECT Final.Vdate, Final.Name, Sum(Final.Profit) AS SumOfProfit  FROM (select Type,Vdate,ACCOUNT.Name, iif(Type='Return',-1* (ItemAmount-Quantity*cost), (ItemAmount-Quantity*cost) ) as Profit  from QryItemTranjection where Type='Sale' or Type='Return' union all  SELECT VOUCHERTYPE.Name AS Type, VOUCHERINFO.Vdate, ACCOUNT.Name AS Name, Sum(-1*ITEMCHARGES.Amount) AS Profit";
                sql += " FROM (VOUCHERTYPE INNER JOIN (((VOUCHERINFO INNER JOIN VOUCHERACTOTAL ON (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id) AND (VOUCHERINFO.Vi_id = VOUCHERACTOTAL.Vi_id)) INNER JOIN ACCOUNT ON VOUCHERACTOTAL.Accid = ACCOUNT.Ac_id) INNER JOIN ITEMCHARGES ON (VOUCHERACTOTAL.Srno = ITEMCHARGES.Itemsr) AND (VOUCHERACTOTAL.Vi_id = ITEMCHARGES.Vi_id)) ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id) INNER JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERACTOTAL.Amount, VOUCHERTYPE.B";
                sql += " HAVING (((VOUCHERTYPE.B)=True)))  AS Final GROUP BY Final.Name, Final.Vdate HAVING Final.Vdate>=#" + DateFrom.ToString(Database.dformat) + "# and  Final.Vdate<=#" + DateTo.ToString(Database.dformat) + "#";
            }
            dt.Clear();
            Database.GetSqlData(sql, dt);
            dt.DefaultView.Sort = "Vdate";
            dt = dt.DefaultView.ToTable();
            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[3, 8] {
            { "Vdate", "100", "0","","","","","" },
            { "Name", "500", "0","Total","","","","" },
            { "Profit", "400", "0","|sum(SumOfProfit)","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool ItemLifting(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Item Lifting";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Item Lifting, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            
            //if(Database.IsKacha==false)
            //{
                sql = "SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Item, QryItemTranjection.Type, Sum([Quantity]*[Pvalue]) AS QTY FROM QryItemTranjection";
                sql += " WHERE (((QryItemTranjection.Company)='" + accnm + "') AND ((QryItemTranjection.Svdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Svdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Item, QryItemTranjection.Type, QryItemTranjection." + Database.BMode + "";
                sql += " HAVING (((QryItemTranjection.Type)='Purchase' Or (QryItemTranjection.Type)='P Return') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";

            //}
            //else
            //{
            //    sql = "SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Item, QryItemTranjection.Type, Sum([Quantity]*[Pvalue]) AS QTY FROM QryItemTranjection";
            //    sql +=" WHERE (((QryItemTranjection.Company)='"+ accnm +"') AND ((QryItemTranjection.Svdate)>="+ access_sql.Hash+ DateFrom.ToString(Database.dformat)+ access_sql.Hash+" And (QryItemTranjection.Svdate)<="+ access_sql.Hash+ DateTo.ToString(Database.dformat)+ access_sql.Hash+")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Item, QryItemTranjection.Type, QryItemTranjection.B";
            //    sql +=" HAVING (((QryItemTranjection.Type)='Purchase' Or (QryItemTranjection.Type)='P Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);
           
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["QTY"] = double.Parse(dt.Rows[i]["QTY"].ToString()) * -1;
                }
                if (dt.Rows[i]["Item"].ToString() == "")
                {
                    dt.Rows[i]["Item"] = "Unclassified";
                }
            }

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {            
            {"Acc", "1", "0" },
            {"Item", "0", "1" } };

            string[,] Cwidth = new string[4, 8] { 
            { "Account Name", "0", "0","","","","","" },
            { "Item", "400", "0","","","","","" },
            { "Type", "300", "0","","","Total","","" },
            { "Quantity", "300", "0","","","|sum(QTY)","","" } 
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool ItemSoldDetail(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Item Lifting Detail Sale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Item Lifting Detail Sale , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Description, QryItemTranjection.Packing, QryItemTranjection.Vdate, QryItemTranjection.DocNumber, QryItemTranjection.Type, Sum(Quantity) AS Quantity, (Sum([Quantity])*[Pvalue]) AS Weight FROM QryItemTranjection WHERE (((QryItemTranjection.Company)='" + accnm + "') AND ((QryItemTranjection.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Packing, QryItemTranjection.Vdate, QryItemTranjection.DocNumber, QryItemTranjection.Type, Pvalue, QryItemTranjection."+Database.BMode+", Quantity HAVING (((QryItemTranjection.Type)='Sale' Or (QryItemTranjection.Type)='Return') AND ((QryItemTranjection."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Vdate";
            //}
            //else
            //{
            //    sql = "SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Description, QryItemTranjection.Packing, QryItemTranjection.Vdate, QryItemTranjection.DocNumber, QryItemTranjection.Type, Sum(Quantity) AS Quantity, (Sum([Quantity])*[Pvalue]) AS Weight FROM QryItemTranjection WHERE (((QryItemTranjection.Company)='" + accnm + "') AND ((QryItemTranjection.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Packing, QryItemTranjection.Vdate, QryItemTranjection.DocNumber, QryItemTranjection.Type, Pvalue, QryItemTranjection.B, Quantity HAVING (((QryItemTranjection.Type)='Sale' Or (QryItemTranjection.Type)='Return') AND ((QryItemTranjection.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Vdate";
            //}
            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["Quantity"] = double.Parse(dt.Rows[i]["Quantity"].ToString()) * -1;
                    dt.Rows[i]["Weight"] = double.Parse(dt.Rows[i]["Weight"].ToString()) * -1;
                }
            }

            if (dt.Rows.Count == 0)
            {
                return false;
            }           
            string[,] col = new string[2, 3] {            
            {"Acc", "1", "0" },     {"Description", "1", "1" },
            };

            string[,] Cwidth = new string[8, 8] { 
             { "Account Name", "0", "0","","","","","" },
             { "Description", "0", "0","","","","","" },
             { "Packing", "400", "0","","","Total","","" },
             { "Vdate", "100", "0","","","","","" },
            { "DocNumber", "200", "0","Grand Total","","Total","","" },
            { "Type", "100", "0","","","","","" },      
            { "Quantity", "100", "0","|sum(Quantity)","","|sum(Quantity)","","" },
            { "Weight", "100", "0","|sum(Weight)","","|sum(Weight)","","" } 
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool ItemSold(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Item Lifting Sale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Item Lifting Sale, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
            sql = "SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Item, QryItemTranjection.Type, Sum([Quantity]*[Pvalue]) AS QTY FROM QryItemTranjection WHERE (((QryItemTranjection.Company)='" + accnm + "') AND ((QryItemTranjection.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Item, QryItemTranjection.Type, QryItemTranjection." + Database.BMode + " HAVING (((QryItemTranjection.Type)='Sale' Or (QryItemTranjection.Type)='Return') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
            //}
            //else
            //{
            //    sql = "SELECT QryItemTranjection.[ACCOUNT.Name]AS Acc, QryItemTranjection.Item, QryItemTranjection.Type, Sum([Quantity]*[Pvalue]) AS QTY FROM QryItemTranjection WHERE (((QryItemTranjection.Company)='" + accnm + "') AND ((QryItemTranjection.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Item, QryItemTranjection.Type, QryItemTranjection.B HAVING (((QryItemTranjection.Type)='Sale' Or (QryItemTranjection.Type)='Return') AND ((QryItemTranjection.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["QTY"] = double.Parse(dt.Rows[i]["QTY"].ToString()) * -1;
                }
                if (dt.Rows[i]["Item"].ToString() == "")
                {
                    dt.Rows[i]["Item"] = "Unclassified";
                }
            }

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {            
            {"Acc", "1", "0" },
            {"Item", "0", "1" } };

            string[,] Cwidth = new string[4, 8] { 
            { "Account Name", "0", "0","","","","","" },
            { "Item", "400", "0","","","","","" },
            { "Type", "300", "0","","","Total","","" },
            { "Quantity", "300", "0","","","|sum(QTY)","","" } 
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool StockSummary(DateTime DateFrom, DateTime DateTo, string accnm,string companyname)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            gGodownName = accnm;
            textBox1.Text = companyname;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Feature.Available("Multi-Godown") == "Yes" && accnm!="")
            {
                if (Database.IsKacha == false)
                {
                    sql = " SELECT " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did, final.godown_id FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid='0' GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id ";
                    sql += " Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))  GROUP BY  stock.Did, stock.godown_id";
                    sql += " )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did, final.godown_id ORDER BY " + access_sql.fnstring("ACCOUNT.Name Is Null", "'<MAIN>'", "ACCOUNT.Name") + ", OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK ";
                }
                else
                {
                    sql = " SELECT " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did, final.godown_id FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock where Vid='0' GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") ) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") ) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id ";
                    sql += " Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "))  GROUP BY  stock.Did, stock.godown_id";
                    sql += " )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id  WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did, final.godown_id ORDER BY " + access_sql.fnstring("ACCOUNT.Name Is Null", "'<MAIN>'", "ACCOUNT.Name") + ", OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK ";
                }
                dt.Clear();
                Database.GetSqlData(sql, dt);

                DataRow[] drow;
                if (accnm == "" && companyname == "")
                {
                    drow = dt.Select("Godown is not null And Company is not null", "");
                }
                else if (accnm == "" && companyname != "")
                {
                    drow = dt.Select("Godown is not null And Company='" + companyname + "' ", "");
                }
                else if (accnm != "" && companyname != "")
                {
                    drow = dt.Select("Godown='" + accnm + "' And Company='" + companyname + "'", "");
                }
                else
                {
                    drow = dt.Select("Godown='" + accnm + "' And Company is not null", "");
                }
                tdt.Clear();
                tdt = new DataTable();


                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    tdt.Columns.Add("Stock", typeof(decimal));
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        double opening = double.Parse(tdt.Rows[i]["Opening"].ToString());
                        double purchase = double.Parse(tdt.Rows[i]["Purchase"].ToString());
                      
                        double sale = double.Parse(tdt.Rows[i]["Sale"].ToString());
                      

                        tdt.Rows[i]["Stock"] = opening + purchase -  sale ;
                    }
                }
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }


                tdt.DefaultView.Sort = "Godown,Company,Item,Description,Packing";
                tdt = tdt.DefaultView.ToTable();
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }



                string[,] col = new string[2, 3]
                { 
                {"Godown","1","1"},
                  {"Company","1","0"} };


                string[,] Cwidth = new string[11, 8] 
            {
            { "Godown", "", "0","","","","","" },
            { "Company", "", "0","","","","","" },
            { "Item", "150", "0","","","","","" },
            { "Description", "300", "0","","Total","","","" },
            { "Packing", "100", "0","","","","","" },
            { "Opening", "100", "1","","","","","" },
            { "Inflow", "100", "1","","","","","" },
           

            { "Outflow", "100", "1","","","","","" },
          

            { "Did", "0", "0","","","","","" },
            { "Godown_id", "0", "0","","","","","" },
            { "Stock", "150", "0","","","","","" }
            };

                CreateReport(tdt, col, Cwidth);
                return true;

            }
            else
            {


                if (Database.IsKacha == false)
                {
                    sql = "SELECT '<MAIN>' AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase,  0 AS Sale, opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid='0' GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + "))";
                    sql += " GROUP BY  stock.Did, stock.godown_id )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY  OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did ORDER BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK";
                }
                else
                {
                    sql = "SELECT '<MAIN>' AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase,  0 AS Sale, opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "true" + access_sql.Singlequote + " and Vid='0' GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + "))";
                    sql += " GROUP BY  stock.Did, stock.godown_id )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY  OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did ORDER BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK";
                }
                    dt.Clear();
                    Database.GetSqlData(sql, dt);



                    DataRow[] drow;
                    if (accnm == "" && companyname == "")
                    {
                        drow = dt.Select("Godown is not null And Company is not null", "");
                    }
                    else if (accnm == "" && companyname != "")
                    {
                        drow = dt.Select("Godown is not null And Company='" + companyname + "' ", "");
                    }
                    else if (accnm != "" && companyname != "")
                    {
                        drow = dt.Select("Godown='" + accnm + "' And Company='" + companyname + "'", "");
                    }
                    else
                    {
                        drow = dt.Select("Godown='" + accnm + "' And Company is not null", "");
                    }
                    tdt.Clear();
                    tdt = new DataTable();


                    if (drow.GetLength(0) > 0)
                    {
                        tdt = drow.CopyToDataTable();
                        tdt.Columns.Add("Stock", typeof(decimal));
                        for (int i = 0; i < tdt.Rows.Count; i++)
                        {
                            double opening = double.Parse(tdt.Rows[i]["Opening"].ToString());
                            double purchase = double.Parse(tdt.Rows[i]["Purchase"].ToString());
                          

                            double sale = double.Parse(tdt.Rows[i]["Sale"].ToString());
                          

                            tdt.Rows[i]["Stock"] = opening + purchase - sale;
                        }
                    }
                    if (tdt.Rows.Count == 0)
                    {
                        return false;
                    }


                    tdt.DefaultView.Sort = "Godown,Company,Item,Description,Packing";
                    tdt = tdt.DefaultView.ToTable();
                    if (tdt.Rows.Count == 0)
                    {
                        return false;
                    }



                    string[,] col = new string[2, 3]
                { 
                {"Godown","1","0"},
                  {"Company","1","0"} };


                    string[,] Cwidth = new string[10, 8] 
            {
            { "Godown", "", "0","","","","","" },
            { "Company", "", "0","","","","","" },
            { "Item", "150", "0","","","Total","","" },
            { "Description", "300", "0","","","Total","","" },
            { "Packing", "100", "0","","","","","" },
            { "Opening", "100", "1","","","","","" },
            { "Inflow", "100", "1","","","","","" },
          

            { "Outflow", "100", "1","","","","","" },
           

            { "Did", "0", "0","","","","","" },
          
            { "Stock", "150", "0","","","","","" }
            };

                    CreateReport(tdt, col, Cwidth);
                    return true;
            }
        }

        public bool Stock(DateTime DateFrom, DateTime DateTo, string godownname)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;

            textBox1.Text = godownname;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Feature.Available("Multi-Godown") == "Yes")
            {
                if (Database.IsKacha == false)
                {
                    sql = "SELECT " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale,  final.Did, final.godown_id FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  Union all SELECT 'ABC' As Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id";
                    sql += " FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + "))";
                    sql += " GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ))) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did, final.godown_id ORDER BY " + access_sql.fnstring("ACCOUNT.Name Is Null", "'<MAIN>'", "ACCOUNT.Name") + ", DESCRIPTION.Description, DESCRIPTION.PACK";



                  
                }
                else
                {
                    sql = "SELECT " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale,  final.Did, final.godown_id FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + true + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  Union all SELECT 'ABC' As Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id";
                    sql += " FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + "))";
                    sql += " GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ))) LEFT JOIN ACCOUNT ON final.godown_id = ACCOUNT.Ac_id WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did, final.godown_id ORDER BY " + access_sql.fnstring("ACCOUNT.Name Is Null", "'<MAIN>'", "ACCOUNT.Name") + ", DESCRIPTION.Description, DESCRIPTION.PACK";

                }


                dt = new DataTable();
                Database.GetSqlData(sql, dt);

                DataRow[] drow;
                if (godownname == "")
                {
                    drow = dt.Select("Godown is not null", "");
                }
                else
                {
                    drow = dt.Select("Godown='" + godownname + "'", "");
                }
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    tdt.Columns.Add("Stock", typeof(decimal));
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        double opening = double.Parse(tdt.Rows[i]["Opening"].ToString());
                        double purchase = double.Parse(tdt.Rows[i]["Purchase"].ToString());


                        double sale = double.Parse(tdt.Rows[i]["Sale"].ToString());


                        tdt.Rows[i]["Stock"] = opening + purchase - sale;
                    }

                }
                else
                {
                    return false;
                }



                tdt = tdt.DefaultView.ToTable();
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }


                string[,] col = new string[1, 3] { { "Godown", "1", "1" } };


                string[,] Cwidth = new string[9, 8] { 
            { "Godown", "0", "0","","","","","" },
            { "Description", "400", "0","","","Total","","" },
            { "Packing", "150", "0","","","","","" },
            { "Opening", "100", "1","","","","","" },
            { "Inflow", "100", "1","","","","","" },
            

            { "Outflow", "100", "1","","","","","" },
          
              { "Did", "0", "0","","","","","" },
            { "godown_id", "0", "0","","","","","" },
        

            { "Stock", "150", "0","","","","","" }
            };

                CreateReport(tdt, col, Cwidth);

            }
            else
            {
                if (Database.IsKacha == false)
                {
                    sql = " SELECT '<MAIN>' AS Godown,DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase,  0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  ";
                    sql += " Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id ";

                    sql += " Union all SELECT ' ' As Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>="+access_sql.Hash + DateFrom.ToString(Database.dformat)+ access_sql.Hash+" And (VOUCHERINFO.Vdate)<="+ access_sql.Hash+ DateTo.ToString(Database.dformat)+ access_sql.Hash+")) GROUP BY VOUCHERTYPE.A, stock.Did, stock.godown_id";
                    sql += " )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) )))  WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY  DESCRIPTION.Description, DESCRIPTION.PACK, final.Did ORDER BY  DESCRIPTION.Description, DESCRIPTION.PACK";

                    //sql = "SELECT '<MAIN>' AS Godown,DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.PurchaseReturn) AS PurchaseReturn, Sum(final.Sale) AS Sale, Sum(final.SaleReturn) AS SaleReturn, final.Did FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS PurchaseReturn, 0 AS Sale, 0 AS SaleReturn, opn.godown_id FROM (";
                    //sql += " SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id";
                    //sql += " WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  Union all SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS PurchaseReturn, 0 AS Sale, 0 AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did,stock.godown_id HAVING (((VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='receive' Or (VOUCHERTYPE.Type)='Transfer'))";
                    //sql += " Union All SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, 0 AS Purchase, Sum(stock.Issue) AS PurchaseReturn, 0 AS Sale, 0 AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id HAVING (((VOUCHERTYPE.Type)='P Return')) Union all  SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, 0 AS Purchase, 0 AS PurchaseReturn, Sum(stock.Issue) AS Sale, 0 AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='issue' Or (VOUCHERTYPE.Type)='Transfer'))";
                    //sql += " Union All  SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, 0 AS Purchase, 0 AS PurchaseReturn, 0 AS Sale, Sum(stock.Receive) AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id HAVING (((VOUCHERTYPE.Type)='Return')) )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) )))  GROUP BY  DESCRIPTION.Description, DESCRIPTION.PACK, final.Did ORDER BY  DESCRIPTION.Description, DESCRIPTION.PACK";

                }
                else
                {
                    sql = " SELECT '<MAIN>' AS Godown,DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase,  0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "true" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  ";
                    sql += " Union all SELECT stock.Did, Sum(stock.Issue)*-1 AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id ";

                    sql += " Union all SELECT ' ' As Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.A, stock.Did, stock.godown_id";
                    sql += " )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ))) WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY  DESCRIPTION.Description, DESCRIPTION.PACK, final.Did ORDER BY  DESCRIPTION.Description, DESCRIPTION.PACK";

                }
                dt = new DataTable();
                Database.GetSqlData(sql, dt);

                DataRow[] drow;
                if (godownname == "")
                {
                    drow = dt.Select("Godown is not null", "");
                }
                else
                {
                    drow = dt.Select("Godown='" + godownname + "'", "");
                }
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    tdt.Columns.Add("Stock", typeof(decimal));
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        double opening = double.Parse(tdt.Rows[i]["Opening"].ToString());
                        double purchase = double.Parse(tdt.Rows[i]["Purchase"].ToString());


                        double sale = double.Parse(tdt.Rows[i]["Sale"].ToString());


                        tdt.Rows[i]["Stock"] = opening + purchase - sale;
                    }

                }
                else
                {
                    return false;
                }



                tdt = tdt.DefaultView.ToTable();
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }


                string[,] col = new string[1, 3] { { "Godown", "1", "1" } };


                string[,] Cwidth = new string[8, 8] { 
            { "Godown", "0", "0","","","" ,"",""},
            { "Description", "400", "0","","","Total","","" },
            { "Packing", "150", "0","","","","","" },
            { "Opening", "100", "1","","","","","" },
            { "Inflow", "100", "1","","","","","" },
            

            { "Outflow", "100", "1","","","","","" },
          

            { "Did", "0", "0","","","","","" },
        

            { "Stock", "150", "0","","","","","" }
            };

                CreateReport(tdt, col, Cwidth);
            }

           
            return true;
        }

        public bool StockTaxSlabWise(DateTime DateFrom, DateTime DateTo, string accnm,string taxslab)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock TaxSlab Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            gGodownName = accnm;
            textBox1.Text = taxslab;
            dateTimePicker1.Enabled = false;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock TaxSlab Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            if (Database.DatabaseType == "access")
            {

                strqyery = " Sum(TAXCATEGORYDETAIL.Tax_Rate)  " + access_sql.Concat + " '%' ";
            }
            else
            {
                strqyery = "CAST(Sum(TAXCATEGORYDETAIL.Tax_Rate) AS nvarchar(10)) + '%' ";
            }
            //if (Database.IsKacha == false)
            //{

                //sql = "SELECT '<MAIN>' AS Godown," + strqyery + "  AS TaxPer,  DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, final.Opening AS Opening, final.Purchase AS Purchase, final.PurchaseReturn AS PurchaseReturn, final.Sale AS Sale, final.SaleReturn AS SaleReturn, DESCRIPTION.Purchase_rate, final.Did";
                //sql += " FROM ((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS PurchaseReturn, 0 AS Sale, 0 AS SaleReturn, opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  Union all SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, 0 AS PurchaseReturn, 0 AS Sale, 0 AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did,stock.godown_id HAVING (((VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='receive')) Union All SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, 0 AS Purchase, Sum(stock.Issue) AS PurchaseReturn, 0 AS Sale, 0 AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id HAVING (((VOUCHERTYPE.Type)='P Return')) Union all  SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, 0 AS Purchase, 0 AS PurchaseReturn, Sum(stock.Issue) AS Sale, 0 AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='issue')) Union All  SELECT VOUCHERTYPE.Type, stock.Did, 0 AS Opening, 0 AS Purchase, 0 AS PurchaseReturn, 0 AS Sale, Sum(stock.Receive) AS SaleReturn, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY VOUCHERTYPE.Type, stock.Did, stock.godown_id HAVING (((VOUCHERTYPE.Type)='Return')) )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) LEFT JOIN TAXCATEGORYDETAIL ON DESCRIPTION.Tax_Cat_id = TAXCATEGORYDETAIL.Category_Id";
                //sql +=" WHERE (((TAXCATEGORYDETAIL.SubCategory_Name)='Local Sale')) GROUP BY '<MAIN>', DESCRIPTION.Description, DESCRIPTION.Pack, final.Opening, final.Purchase, final.PurchaseReturn, final.Sale, final.SaleReturn, DESCRIPTION.Purchase_rate, final.Did ORDER BY DESCRIPTION.Description, DESCRIPTION.Pack;";
                sql = "SELECT '<MAIN>' AS Godown, " + strqyery + "   AS TaxPer,  DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, final.Opening AS Opening, final.Purchase AS Purchase,  final.Sale AS Sale, DESCRIPTION.Purchase_rate, final.Did FROM ((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id";
                sql += " Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY  stock.Did, stock.godown_id  )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) LEFT JOIN TAXCATEGORYDETAIL ON DESCRIPTION.Tax_Cat_id = TAXCATEGORYDETAIL.Category_Id WHERE (((TAXCATEGORYDETAIL.SubCategory_Name)='Local Sale')) GROUP BY DESCRIPTION.Description, DESCRIPTION.Pack, final.Opening, final.Purchase,  final.Sale, DESCRIPTION.Purchase_rate, final.Did ORDER BY DESCRIPTION.Description, DESCRIPTION.Pack";

               
            //}
            //else
            //{

            //    sql = "SELECT '<MAIN>' AS Godown, " + strqyery + "   AS TaxPer,  DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, final.Opening AS Opening, final.Purchase AS Purchase,  final.Sale AS Sale, DESCRIPTION.Purchase_rate, final.Did FROM ((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase, 0 AS Sale, opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "true" + access_sql.Singlequote + " and Vid=0 GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id";
            //    sql += " Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY  stock.Did, stock.godown_id  )  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) LEFT JOIN TAXCATEGORYDETAIL ON DESCRIPTION.Tax_Cat_id = TAXCATEGORYDETAIL.Category_Id WHERE (((TAXCATEGORYDETAIL.SubCategory_Name)='Local Sale')) GROUP BY  DESCRIPTION.Description, DESCRIPTION.Pack, final.Opening, final.Purchase, final.Sale, DESCRIPTION.Purchase_rate, final.Did ORDER BY DESCRIPTION.Description, DESCRIPTION.Pack";

               
            //}

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;

            if (taxslab == "")
            {
                drow = dt.Select("TaxPer is not null", "");
            }
            else
            {
                drow = dt.Select("TaxPer='" + taxslab + "' ", "");
            }
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                    tdt.Columns.Add("Stock", typeof(decimal));
                    tdt.Columns.Add("Amount", typeof(decimal));
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        double opening = double.Parse(tdt.Rows[i]["Opening"].ToString());
                        double purchase = double.Parse(tdt.Rows[i]["Purchase"].ToString());
                      

                        double sale = double.Parse(tdt.Rows[i]["Sale"].ToString());
                        

                        tdt.Rows[i]["Stock"] = opening + purchase - sale ;
                        tdt.Rows[i]["Amount"] = double.Parse(tdt.Rows[i]["Purchase_rate"].ToString()) * double.Parse(tdt.Rows[i]["Stock"].ToString());


                    }

                    tdt.Columns.Remove("Opening");
                    tdt.Columns.Remove("Purchase");
                   

                    tdt.Columns.Remove("Sale");
                    


            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            tdt.DefaultView.Sort = "Description";
            tdt = tdt.DefaultView.ToTable();

            string[,] col = new string[2, 3]
                { 
                {"Godown","1","0"},
                {"TaxPer","1","0"},
                  };


            string[,] Cwidth = new string[8, 8] {
            { "Godown", "", "0","","","" ,"",""},
            { "TaxSlab", "", "0","","","","","" },

            { "Description", "350", "0","Total Amount","","","","" },
            { "Packing", "150", "0","","","","","" },
           
            { "Purchase Rate", "150", "0","","","" ,"",""},
             { "Did", "0", "0","","","","","" },
              { "Stock", "150", "0","","","","","" },
            { "Amount", "200", "0","|sum(Amount)","","","","" }
          
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool StockValuation(DateTime DateFrom, DateTime DateTo, string accnm, string companyname)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Valuation";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            gGodownName = accnm;
            textBox1.Text = companyname;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock Valuation, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            if (Feature.Available("Multi-Godown") == "Yes")
            {

                if (Database.DatabaseType == "access")
                {


                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.00 AS Rate, 0.00 AS Amount, Stock.Did FROM ((((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN OTHER ON Description.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON Description.Item_id = OTHER_1.Oth_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=False) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") ) GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, Description.Description, Description.Pack, 0.00, 0.00, Stock.Did";

                    }
                    else
                    {

                        sql = "SELECT  " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.00 AS Rate, 0.00 AS Amount, Stock.Did FROM ((((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN OTHER ON Description.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON Description.Item_id = OTHER_1.Oth_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=true) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";


                    }

                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT   " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,   OTHER.Name AS Company, OTHER_1.Name AS Item,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM           VOUCHERINFO RIGHT OUTER JOIN     Stock ON   VOUCHERINFO.Vi_id =   Stock.Vid LEFT OUTER JOIN    OTHER AS OTHER_1 RIGHT OUTER JOIN          Description ON OTHER_1.Oth_id =   Description.Item_id LEFT OUTER JOIN               OTHER ON   Description.Company_id =   OTHER.Oth_id ON   Stock.Did =   Description.Des_id LEFT OUTER JOIN  ACCOUNT ON   Stock.godown_id =   ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, Description.Description, Description.Pack, Stock.Did";

                    }
                    else
                    {

                        sql = "SELECT   " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,   OTHER.Name AS Company, OTHER_1.Name AS Item,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM           VOUCHERINFO RIGHT OUTER JOIN     Stock ON   VOUCHERINFO.Vi_id =   Stock.Vid LEFT OUTER JOIN    OTHER AS OTHER_1 RIGHT OUTER JOIN          Description ON OTHER_1.Oth_id =   Description.Item_id LEFT OUTER JOIN               OTHER ON   Description.Company_id =   OTHER.Oth_id ON   Stock.Did =   Description.Des_id LEFT OUTER JOIN  ACCOUNT ON   Stock.godown_id =   ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")  GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name,Description.Description, Description.Pack, Stock.Did";

                    }
                }
                dt.Clear();
                Database.GetSqlData(sql, dt);



                DataRow[] drow;
                if (accnm == "" && companyname == "")
                {
                    drow = dt.Select("Godown is not null And Company is not null", "");
                }
                else if (accnm == "" && companyname != "")
                {
                    drow = dt.Select("Godown is not null And Company='" + companyname + "' ", "");
                }
                else if (accnm != "" && companyname != "")
                {
                    drow = dt.Select("Godown='" + accnm + "' And Company='" + companyname + "'", "");
                }
                else
                {
                    drow = dt.Select("Godown='" + accnm + "' And Company is not null", "");
                }

                DataTable dt2 = new DataTable();
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }

                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }
                tdt.Clear();
                tdt = new DataTable();

                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                }
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (dt2.Select("Did='" + tdt.Rows[i]["Did"].ToString()+"' ", "").Length <= 0)
                    {
                        tdt.Rows[i]["Rate"] = 0;
                        tdt.Rows[i]["Amount"] = 0;
                    }
                    else
                    {
                        tdt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + tdt.Rows[i]["Did"].ToString()+"' ", "").FirstOrDefault()["Rate"].ToString());
                        tdt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(tdt.Rows[i]["Rate"].ToString()) * double.Parse(tdt.Rows[i]["Stock"].ToString()), 2));
                    }
                }
                if (tdt.Rows.Count == 0)
                {
                    return false;
                }

                tdt.DefaultView.Sort = "Godown,Company,Item,Description,Packing";
                tdt = tdt.DefaultView.ToTable();

                string[,] col = new string[2, 3]{ 
                {"Godown","1","0"},
                {"Company","1","0"} };

                string[,] Cwidth = new string[9, 8]{
            { "Godown", "", "0","","","" ,"",""},
            { "Company", "", "0","","","","","" },
            { "Item", "150", "0","","","Total","","" },
            { "Description", "250", "0","","","Total","","" },
            { "Packing", "100", "0","","","","","" },        
            { "Stock Qty", "100", "0","","","","","" },
            { "Rate", "200", "0","","","","","" },
            { "Amount", "200", "0","|sum(Amount)","","","","" },
            { "Did", "0", "0","","","","","" }
            };
                CreateReport(tdt, col, Cwidth);
                return true;
            }
            else
            {
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT  '<MAIN>' AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.00 AS Rate, 0.00 AS Amount, Stock.Did FROM ((((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN OTHER ON Description.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON Description.Item_id = OTHER_1.Oth_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=False) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
                    }
                    else
                    {
                        sql = "SELECT  '<MAIN>' AS Godown, OTHER.Name AS Company, OTHER_1.Name AS Item, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN OTHER ON Description.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON Description.Item_id = OTHER_1.Oth_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=true) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
                    }
                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT    '<MAIN>' AS Godown,   OTHER.Name AS Company, OTHER_1.Name AS Item,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM           VOUCHERINFO RIGHT OUTER JOIN     Stock ON   VOUCHERINFO.Vi_id =   Stock.Vid LEFT OUTER JOIN    OTHER AS OTHER_1 RIGHT OUTER JOIN          Description ON OTHER_1.Oth_id =   Description.Item_id LEFT OUTER JOIN               OTHER ON   Description.Company_id =   OTHER.Oth_id ON   Stock.Did =   Description.Des_id LEFT OUTER JOIN  ACCOUNT ON   Stock.godown_id =   ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL))  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name, Description.Description, Description.Pack, Stock.Did";
                    }
                    else
                    {
                        sql = "SELECT    '<MAIN>' AS Godown,   OTHER.Name AS Company, OTHER_1.Name AS Item,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM           VOUCHERINFO RIGHT OUTER JOIN     Stock ON   VOUCHERINFO.Vi_id =   Stock.Vid LEFT OUTER JOIN    OTHER AS OTHER_1 RIGHT OUTER JOIN          Description ON OTHER_1.Oth_id =   Description.Item_id LEFT OUTER JOIN               OTHER ON   Description.Company_id =   OTHER.Oth_id ON   Stock.Did =   Description.Des_id LEFT OUTER JOIN  ACCOUNT ON   Stock.godown_id =   ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL))  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, OTHER.Name, OTHER_1.Name,Description.Description, Description.Pack, Stock.Did";
                    }
                }
                dt.Clear();
                Database.GetSqlData(sql, dt);

                DataRow[] drow;
                if (accnm == "" && companyname == "")
                {
                    drow = dt.Select("Godown is not null And Company is not null", "");
                }
                else if (accnm == "" && companyname != "")
                {
                    drow = dt.Select("Godown is not null And Company='" + companyname + "' ", "");
                }
                else if (accnm != "" && companyname != "")
                {
                    drow = dt.Select("Godown='" + accnm + "' And Company='" + companyname + "'", "");
                }
                else
                {
                    drow = dt.Select("Godown='" + accnm + "' And Company is not null", "");
                }

                DataTable dt2 = new DataTable();
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }

                tdt.Clear();
                tdt = new DataTable();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                }
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (dt2.Select("Did=" + tdt.Rows[i]["Did"], "").Length <= 0)
                    {
                        tdt.Rows[i]["Rate"] = 0;
                        tdt.Rows[i]["Amount"] = 0;
                    }
                    else
                    {
                        tdt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did=" + tdt.Rows[i]["Did"], "").FirstOrDefault()["Rate"].ToString());
                        tdt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(tdt.Rows[i]["Rate"].ToString()) * double.Parse(tdt.Rows[i]["Stock"].ToString()), 2));
                    }
                }

                if (tdt.Rows.Count == 0)
                {
                    return false;
                }

                tdt.DefaultView.Sort = "Godown,Company,Item,Description,Packing";
                tdt = tdt.DefaultView.ToTable();

                string[,] col = new string[2, 3]{ 
                {"Godown","1","0"},
                  {"Company","1","0"} 
                };

                string[,] Cwidth = new string[9, 8]{
            { "Godown", "", "0","","","","","" },
            { "Company", "", "0","","","","","" },
            { "Item", "150", "0","","","Total","","" },
            { "Description", "250", "0","","","Total","","" },
            { "Packing", "100", "0","","","" ,"",""},
            { "Stock Qty", "100", "0","","","","","" },
            { "Rate", "200", "0","","","","","" },
            { "Amount", "200", "0","|sum(Amount)","","","","" },
            { "Did", "0", "0","","","","","" }
            };
                CreateReport(tdt, col, Cwidth);
                return true;
            }
        }

        public bool StockVal(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Valuation ";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            gGodownName = accnm;
            textBox1.Text = gGodownName;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock Valuation, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            if (Feature.Available("Multi-Godown") == "Yes")
            {
                textBox1.Enabled = false;
                if (Database.DatabaseType == "sql")
                {
                    //if (Database.IsKacha == false)
                    //{
                        sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS Godown, OTHER.Name AS Department, Description.Description, Description.Pack AS Packing, SUM(Stock.Receive - Stock.Issue) AS stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ACCOUNT RIGHT OUTER JOIN Stock ON ACCOUNT.Ac_id = Stock.godown_id LEFT OUTER JOIN OTHER RIGHT OUTER JOIN Description ON OTHER.Oth_id = Description.Department_id ON Stock.Did = Description.Des_id LEFT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE (VOUCHERTYPE."+Database.BMode+" = 1) AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Description.Description, Description.Pack, Stock.Did, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END, OTHER.Name";
                    //}
                    //else
                    //{
                    //    sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS Godown, OTHER.Name AS Department, Description.Description, Description.Pack AS Packing, SUM(Stock.Receive - Stock.Issue) AS stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ACCOUNT RIGHT OUTER JOIN Stock ON ACCOUNT.Ac_id = Stock.godown_id LEFT OUTER JOIN OTHER RIGHT OUTER JOIN Description ON OTHER.Oth_id = Description.Department_id ON Stock.Did = Description.Des_id LEFT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE (VOUCHERTYPE.B = 1) AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Description.Description, Description.Pack, Stock.Did, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END, OTHER.Name";
                    //}
                }
                dt.Clear();
                Database.GetSqlData(sql, dt);

                DataRow[] drow;
                if (accnm == "")
                {
                    drow = dt.Select("Godown is not null", "");
                }

                else
                {
                    drow = dt.Select("Godown='" + accnm + "' ", "");
                }

                DataTable dt2 = new DataTable();
               
                Database.GetSqlData("SELECT  Stock.Did, Stock.ReceiveAmt /   Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL THEN datediff(day, - 1,   01 - 00 - 2018) ELSE VOUCHERINFO.Vdate END AS Vdate FROM         VOUCHERTYPE RIGHT OUTER JOIN      VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN   Stock ON VOUCHERINFO.Vi_id = Stock.Vid WHERE     (Stock.Receive <> 0) AND (Stock.ReceiveAmt > 0) AND (VOUCHERTYPE."+Database.BMode+" = 1) ORDER BY Stock.Did, Vdate DESC",dt2);
                   
               
                tdt.Clear();
                tdt = new DataTable();

                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                }

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (dt2.Select("Did='" + tdt.Rows[i]["Did"] + "' ", "").Length <= 0)
                    {
                        tdt.Rows[i]["Rate"] = 0;
                        tdt.Rows[i]["Amount"] = 0;
                    }
                    else
                    {
                        tdt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + tdt.Rows[i]["Did"] + "' ", "").FirstOrDefault()["Rate"].ToString());
                        tdt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(tdt.Rows[i]["Rate"].ToString()) * double.Parse(tdt.Rows[i]["Stock"].ToString()), 2));
                    }
                }

                tdt.DefaultView.Sort = "Godown,Description,Packing";
                tdt = tdt.DefaultView.ToTable();

                string[,] col = new string[1, 3]
                { 
                {"Godown","1","0"}
                };

                string[,] Cwidth = new string[8, 8]{
            { "Godown", "", "0","","","","","" },
            { "Department", "150", "0","","","Total","","" },
            { "Description", "350", "0","","","Total","","" },
            { "Packing", "100", "0","","","" ,"",""},
            { "Stock Qty", "100", "0","","","","","" },
            { "Last Purchase Rate", "150", "0","","","","","" },
            { "Amount", "150", "0","|sum(Amount)","","","","" },
            { "Did", "0", "0","","","","","" }
                };

                CreateReport(tdt, col, Cwidth);
                return true;
            }
            else
            {
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT  '<MAIN>' AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=False) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name,  Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
                    }
                    else
                    {
                        sql = "SELECT  '<MAIN>' AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=true) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name,Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
                    }
                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT  '<MAIN>' AS Godown,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
                    }
                    else
                    {
                        sql = "SELECT  '<MAIN>' AS Godown,   Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
                    }
                }
                dt.Clear();
                Database.GetSqlData(sql, dt);

                DataTable dt2 = new DataTable();
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt2.Select("Did='" + dt.Rows[i]["Did"] + "' ", "").Length <= 0)
                    {
                        dt.Rows[i]["Rate"] = 0;
                        dt.Rows[i]["Amount"] = 0;
                    }
                    else
                    {
                        dt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + dt.Rows[i]["Did"] + "' ", "").FirstOrDefault()["Rate"].ToString());
                        dt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(dt.Rows[i]["Rate"].ToString()) * double.Parse(dt.Rows[i]["Stock"].ToString()), 2));
                    }
                }

                if (dt.Rows.Count == 0)
                {
                    return false;
                }

                dt.DefaultView.Sort = "Godown,Description,Packing";
                dt = dt.DefaultView.ToTable();

                string[,] col = new string[1, 3]{ 
                {"Godown","1","0"}
                };

                string[,] Cwidth = new string[7, 8]{
            { "Godown", "", "0","","","","","" },          
            { "Description", "350", "0","","","Total","","" },
            { "Packing", "150", "0","","","","","" },
            { "Stock Qty", "100", "0","","","","","" },
            { "Last Purchase Rate", "200", "0","","","","","" },
            { "Amount", "200", "0","|sum(Amount)","","" ,"",""},
            { "Did", "0", "0","","","","","" }
            };

                CreateReport(dt, col, Cwidth);
                return true;
            }
        }


        //public bool StockVal(DateTime DateFrom, DateTime DateTo, string accnm)
        //{
        //    stdt = DateFrom;
        //    endt = DateTo;
        //    frmptyp = "Stock Valuation ";
        //    dateTimePicker1.Value = DateFrom;
        //    dateTimePicker2.Value = DateTo;
        //    gGodownName = accnm;
        //    textBox1.Text = gGodownName;
        //    label3.Enabled = true;
        //    textBox1.Enabled = true;
        //    this.Text = frmptyp;
        //    DecsOfReport = "Stock Valuation, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
        //    dataGridView1.Rows.Clear();

        //    if (Feature.Available("Multi-Godown") == "Yes")
        //    {
        //        textBox1.Enabled = false;
        //        if (Database.DatabaseType == "access")
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                sql = "SELECT " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,  Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=False) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)) GROUP BY ACCOUNT.Name,  Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
        //            }
        //            else
        //            {
        //                sql = "SELECT  " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=true) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)) GROUP BY ACCOUNT.Name,  Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
        //            }
        //        }
        //        else
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS Godown, Description.Description, Description.Pack AS Packing, SUM(Stock.Receive - Stock.Issue) AS stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM         VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Stock ON ACCOUNT.Ac_id = Stock.godown_id LEFT OUTER JOIN Description ON Stock.Did = Description.Des_id ON VOUCHERINFO.Vi_id = Stock.Vid WHERE     (VOUCHERTYPE.A = 1) AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Description.Description, Description.Pack, Stock.Did, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END";
        //                //sql = "SELECT   " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL) GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
        //            }
        //            else
        //            {
        //                sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS Godown, Description.Description, Description.Pack AS Packing, SUM(Stock.Receive - Stock.Issue) AS stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM         VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN ACCOUNT RIGHT OUTER JOIN Stock ON ACCOUNT.Ac_id = Stock.godown_id LEFT OUTER JOIN Description ON Stock.Did = Description.Des_id ON VOUCHERINFO.Vi_id = Stock.Vid WHERE     (VOUCHERTYPE.B = 1) AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") GROUP BY Description.Description, Description.Pack, Stock.Did, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END";
        //                // sql = "SELECT   " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL) GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
        //            }

        //            //if (Database.IsKacha == false)
        //            //{
        //            //    sql = "SELECT   " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL) GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
        //            //}
        //            //else
        //            //{
        //            //    sql = "SELECT   " + access_sql.fnstring("ACCOUNT.Name is null", "'<MAIN>'", "ACCOUNT.Name") + " AS Godown, Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL) GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
        //            //}
        //        }
        //        dt.Clear();
        //        Database.GetSqlData(sql, dt);

        //        DataRow[] drow;
        //        if (accnm == "")
        //        {
        //            drow = dt.Select("Godown is not null", "");
        //        }

        //        else
        //        {
        //            drow = dt.Select("Godown='" + accnm + "' ", "");
        //        }

        //        DataTable dt2 = new DataTable();
        //        if (Database.DatabaseType == "access")
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //            else
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //        }
        //        else
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //            else
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //        }
        //        tdt.Clear();
        //        tdt = new DataTable();

        //        if (drow.GetLength(0) > 0)
        //        {
        //            tdt = drow.CopyToDataTable();
        //        }

        //        for (int i = 0; i < tdt.Rows.Count; i++)
        //        {
        //            if (dt2.Select("Did='" + tdt.Rows[i]["Did"] + "' ", "").Length <= 0)
        //            {
        //                tdt.Rows[i]["Rate"] = 0;
        //                tdt.Rows[i]["Amount"] = 0;
        //            }
        //            else
        //            {
        //                tdt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + tdt.Rows[i]["Did"] + "' ", "").FirstOrDefault()["Rate"].ToString());
        //                tdt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(tdt.Rows[i]["Rate"].ToString()) * double.Parse(tdt.Rows[i]["Stock"].ToString()), 2));
        //            }
        //        }

        //        tdt.DefaultView.Sort = "Godown,Description,Packing";
        //        tdt = tdt.DefaultView.ToTable();

        //        string[,] col = new string[1, 3]
        //        { 
        //        {"Godown","1","0"}
        //        };

        //        string[,] Cwidth = new string[7, 8]{
        //    { "Godown", "", "0","","","","","" },           
        //    { "Description", "350", "0","","","Total","","" },
        //    { "Packing", "150", "0","","","" ,"",""},
        //    { "Stock Qty", "100", "0","","","","","" },
        //    { "Last Purchase Rate", "200", "0","","","","","" },
        //    { "Amount", "200", "0","|sum(Amount)","","","","" },
        //    { "Did", "0", "0","","","","","" }
        //        };

        //        CreateReport(tdt, col, Cwidth);
        //        return true;
        //    }
        //    else
        //    {
        //        if (Database.DatabaseType == "access")
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                sql = "SELECT  '<MAIN>' AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=False) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name,  Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
        //            }
        //            else
        //            {
        //                sql = "SELECT  '<MAIN>' AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=true) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name,Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
        //            }
        //        }
        //        else
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                sql = "SELECT  '<MAIN>' AS Godown,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
        //            }
        //            else
        //            {
        //                sql = "SELECT  '<MAIN>' AS Godown,   Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
        //            }
        //        }
        //        dt.Clear();
        //        Database.GetSqlData(sql, dt);

        //        DataTable dt2 = new DataTable();
        //        if (Database.DatabaseType == "access")
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //            else
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //        }
        //        else
        //        {
        //            if (Database.IsKacha == false)
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //            else
        //            {
        //                Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
        //            }
        //        }

        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        {
        //            if (dt2.Select("Did='" + dt.Rows[i]["Did"]+"' ", "").Length <= 0)
        //            {
        //                dt.Rows[i]["Rate"] = 0;
        //                dt.Rows[i]["Amount"] = 0;
        //            }
        //            else
        //            {
        //                dt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + dt.Rows[i]["Did"]+"' ", "").FirstOrDefault()["Rate"].ToString());
        //                dt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(dt.Rows[i]["Rate"].ToString()) * double.Parse(dt.Rows[i]["Stock"].ToString()), 2));
        //            }
        //        }

        //        if (dt.Rows.Count == 0)
        //        {
        //            return false;
        //        }

        //        dt.DefaultView.Sort = "Godown,Description,Packing";
        //        dt = dt.DefaultView.ToTable();

        //        string[,] col = new string[1, 3]{ 
        //        {"Godown","1","0"}
        //        };

        //        string[,] Cwidth = new string[7, 8]{
        //    { "Godown", "", "0","","","","","" },          
        //    { "Description", "350", "0","","","Total","","" },
        //    { "Packing", "150", "0","","","","","" },
        //    { "Stock Qty", "100", "0","","","","","" },
        //    { "Last Purchase Rate", "200", "0","","","","","" },
        //    { "Amount", "200", "0","|sum(Amount)","","" ,"",""},
        //    { "Did", "0", "0","","","","","" }
        //    };

        //        CreateReport(dt, col, Cwidth);
        //        return true;
        //    }
        //}

        public bool StockValNew(DateTime DateFrom, DateTime DateTo, string accnm,string rate)
        {
            button8.Visible = true;
            grate = rate;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Valuation";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            gGodownName = accnm;
            //textBox1.Text = gGodownName;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            groupBox2.Visible = false;
            DecsOfReport = "Stock Valuation, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            if (Feature.Available("Multi-Godown").ToUpper() == "YES")
            {
                textBox1.Enabled = false;
             
                    
                sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS Godown, OTHER.Name AS Department, Description.Description, Description.Pack AS Packing, SUM(Stock.Receive - Stock.Issue) AS stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ACCOUNT RIGHT OUTER JOIN Stock ON ACCOUNT.Ac_id = Stock.godown_id LEFT OUTER JOIN OTHER RIGHT OUTER JOIN Description ON OTHER.Oth_id = Description.Department_id ON Stock.Did = Description.Des_id LEFT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE  (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") "+accnm+" GROUP BY Description.Description, Description.Pack, Stock.Did, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END, OTHER.Name";
                dt = new DataTable();
                Database.GetSqlData(sql, dt);

              
                DataTable dt2 = new DataTable();
                if (rate == "Last Purchase Rate")
                {
                    Database.GetSqlData("SELECT  Stock.Did, Stock.ReceiveAmt /   Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL THEN datediff(day, - 1,   01 - 00 - 2018) ELSE VOUCHERINFO.Vdate END AS Vdate FROM         VOUCHERTYPE RIGHT OUTER JOIN      VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id RIGHT OUTER JOIN   Stock ON VOUCHERINFO.Vi_id = Stock.Vid WHERE     (Stock.Receive <> 0) AND (Stock.ReceiveAmt > 0) AND (VOUCHERTYPE." + Database.BMode + " = 1) ORDER BY Stock.Did, Vdate DESC", dt2);
                }
                else
                {
                    Database.GetSqlData("SELECT Des_id as Did, " + rate + " as Rate FROM Description", dt2);       
                }
               
                

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt2.Select("Did='" + dt.Rows[i]["Did"] + "' ", "").Length <= 0)
                    {
                        dt.Rows[i]["Rate"] = 0;
                        dt.Rows[i]["Amount"] = 0;
                    }
                    else
                    {
                        dt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + dt.Rows[i]["Did"] + "' ", "").FirstOrDefault()["Rate"].ToString());
                        dt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(dt.Rows[i]["Rate"].ToString()) * double.Parse(dt.Rows[i]["Stock"].ToString()), 2));
                    }
                }

                dt.DefaultView.Sort = "Godown,Department,Description,Packing";
                dt = dt.DefaultView.ToTable();
                if (dt.Rows.Count == 0)
                {
                    return false;
                }
                string[,] col = new string[1, 3]
                { 
                {"Godown","1","0"}
                };


                string[,] Cwidth = new string[8, 8]{
            { "Godown", "", "0","","","","","" },
            { "Department", "150", "0","","","Total","","" },
            { "Description", "350", "0","","","Total","","" },
            { "Packing", "100", "0","","","" ,"",""},
            { "Stock Qty", "100", "0","","","","","" },
            { rate.ToString(), "150", "0","","","","","" },
            { "Amount", "150", "0","|sum(Amount)","","","","" },
            { "Did", "0", "0","","","","","" }
                };

                CreateReport(dt, col, Cwidth);
                return true;
            }
            else
            {
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        sql = "SELECT  '<MAIN>' AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=False) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name,  Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
                    }
                    else
                    {
                        sql = "SELECT  '<MAIN>' AS Godown, Description.Description, Description.Pack AS Packing, Sum([Stock].[Receive]-[Stock].[Issue]) AS Stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ((Stock LEFT JOIN Description ON Stock.Did = Description.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id WHERE (((Stock.marked)=true) AND ((VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "# Or (VOUCHERINFO.Vdate) Is Null) AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY ACCOUNT.Name,Description.Description, Description.Pack, 0.0, 0.0, Stock.Did";
                    }
                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                     //   sql = "SELECT  OTHER.Name AS Department, Description.Description, Description.Pack AS Packing, SUM(Stock.Receive - Stock.Issue) AS stock, 0.0 AS Rate, 0.0 AS Amount, Stock.Did FROM ACCOUNT RIGHT OUTER JOIN Stock ON ACCOUNT.Ac_id = Stock.godown_id LEFT OUTER JOIN OTHER RIGHT OUTER JOIN Description ON OTHER.Oth_id = Description.Department_id ON Stock.Did = Description.Des_id LEFT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE  (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") " + accnm + " GROUP BY Description.Description, Description.Pack, Stock.Did, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END, OTHER.Name";
                        sql = "SELECT  '<MAIN>' AS Godown,  OTHER.Name AS Department,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM      dbo.OTHER RIGHT OUTER JOIN dbo.Description ON dbo.OTHER.Oth_id = dbo.Description.Department_id RIGHT OUTER JOIN        VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
                    }
                    else
                    {
                        sql = "SELECT  '<MAIN>' AS Godown,  OTHER.Name AS Department,  Description.Description,   Description.Pack AS Packing, SUM(  Stock.Receive -   Stock.Issue) AS Stock, 0.0 AS Rate ,0.0 AS Amount,   Stock.Did FROM          VOUCHERINFO RIGHT OUTER JOIN Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN       ACCOUNT ON  Stock.godown_id =  ACCOUNT.Ac_id WHERE     (Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND (VOUCHERINFO.Vdate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") OR (VOUCHERINFO.Vdate IS NULL)  AND ((Description.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") GROUP BY ACCOUNT.Name, Description.Description, Description.Pack, Stock.Did";
                    }
                }
                dt.Clear();
                Database.GetSqlData(sql, dt);

                DataTable dt2 = new DataTable();
                if (Database.DatabaseType == "access")
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, iif(VOUCHERINFO.Vdate IS NULL," + Database.stDate.ToString("dd-mm-yyyy") + "-1  ,VOUCHERINFO.Vdate) AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }
                else
                {
                    if (Database.IsKacha == false)
                    {
                        Database.GetSqlData("SELECT Des_id as Did, " + rate + " as Rate FROM Description", dt2);
                        //Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "false" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                    else
                    {
                        Database.GetSqlData("SELECT Des_id as Did, " + rate + " as Rate FROM Description", dt2);
                        //Database.GetSqlData("SELECT  Stock.Did,  Stock.ReceiveAmt /  Stock.Receive AS Rate, CASE WHEN VOUCHERINFO.Vdate IS NULL  THEN datediff(day,-1," + Database.stDate.ToString("dd-mm-yyyy") + ") ELSE VOUCHERINFO.Vdate END AS Vdate FROM          Stock LEFT OUTER JOIN   VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id WHERE     ( Stock.Receive <> 0) AND ( Stock.ReceiveAmt > 0) AND ( Stock.marked = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ORDER BY  Stock.Did, Vdate DESC", dt2);
                    }
                }

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt2.Select("Did='" + dt.Rows[i]["Did"]+"' ", "").Length <= 0)
                    {
                        dt.Rows[i]["Rate"] = 0;
                        dt.Rows[i]["Amount"] = 0;
                    }
                    else
                    {
                        dt.Rows[i]["Rate"] = double.Parse(dt2.Select("Did='" + dt.Rows[i]["Did"]+"' ", "").FirstOrDefault()["Rate"].ToString());
                        dt.Rows[i]["Amount"] = double.Parse(funs.DecimalPoint(double.Parse(dt.Rows[i]["Rate"].ToString()) * double.Parse(dt.Rows[i]["Stock"].ToString()), 2));
                    }
                }

                if (dt.Rows.Count == 0)
                {
                    return false;
                }

                dt.DefaultView.Sort = "Godown,Description,Packing";
                dt = dt.DefaultView.ToTable();

                string[,] col = new string[1, 3]{ 
                {"Godown","1","0"}
                };

                string[,] Cwidth = new string[7, 8]{
            { "Godown", "", "0","","","","","" },          
            { "Description", "350", "0","","","Total","","" },
            { "Packing", "150", "0","","","","","" },
            { "Stock Qty", "100", "0","","","","","" },
            { rate.ToString(), "200", "0","","","","","" },
            { "Amount", "200", "0","|sum(Amount)","","" ,"",""},
            { "Did", "0", "0","","","","","" }
            };

                CreateReport(dt, col, Cwidth);
                return true;
            }
        }

        public bool DayWiseReport(DateTime DateFrom, DateTime DateTo, string str, string str2, string str1, bool amtrequired)
        {
            button8.Visible = true;
            label1.Visible = false;
            label2.Visible = false;
            dateTimePicker1.Visible = false;
            dateTimePicker2.Visible = false;
            button3.Visible = false;
            Sstr = str;
            Sstr1 = str1;
            Sstr2 = str2;
            Samtrequired = amtrequired;

            label3.Visible = false;
            textBox1.Visible = false;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Stock Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Stock Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            sql = "SELECT CASE WHEN OTHER.Name IS NULL THEN '<UndefinedCompany>' ELSE OTHER.Name END AS Company, CASE WHEN OTHER_1.Name IS NULL   THEN '<UndefinedItem>' ELSE OTHER_1.Name END AS Item, Description_3.Description, Description_3.Pack, SUM(final.Opening) AS Opn, SUM(final.OpeningAmt)  AS OpnAmt, SUM(final.Purchase) AS Pur, SUM(final.PurchaseAmt) AS PurAmt, SUM(final.Sale) AS Sale, SUM(final.SaleAmt) AS SaleAmt,  SUM(final.Opening + final.Purchase - final.Sale) AS Closing, SUM(final.OpeningAmt + final.PurchaseAmt - final.SaleAmt) AS ClosingAmt, final.Did, MAX(Description_3.Pvalue) AS Pvalue FROM OTHER AS OTHER_1 RIGHT OUTER JOIN  Description AS Description_3 ON OTHER_1.Oth_id = Description_3.Item_id LEFT OUTER JOIN  OTHER ON Description_3.Company_id = OTHER.Oth_id RIGHT OUTER JOIN  (SELECT 'Opening Balance' AS Type, Did, SUM(Qty) AS Opening, SUM(Amount) AS OpeningAmt, 0 AS Purchase, 0 AS PurchaseAmt, 0 AS Sale, 0 AS SaleAmt  FROM (SELECT Stock.Did, SUM( Stock.Issue) * - 1 AS Qty, - (1 * SUM( Stock.IssueAmt)) AS Amount  FROM Description RIGHT OUTER JOIN  Stock ON Description.Des_id = Stock.Did LEFT OUTER JOIN  VOUCHERTYPE RIGHT OUTER JOIN  VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ( Description.StkMaintain = 'True') " + str + " GROUP BY Stock.Did  UNION ALL  SELECT Stock_2.Did, SUM(Stock_2.Receive) AS Qty, SUM(Stock_2.ReceiveAmt) AS Amount  FROM Description AS Description_2 RIGHT OUTER JOIN  Stock AS Stock_2 ON Description_2.Des_id = Stock_2.Did LEFT OUTER JOIN ";
            sql += " VOUCHERTYPE AS VOUCHERTYPE_2 RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_2 ON VOUCHERTYPE_2.Vt_id = VOUCHERINFO_2.Vt_id ON  Stock_2.Vid = VOUCHERINFO_2.Vi_id WHERE (VOUCHERINFO_2.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (Description_2.StkMaintain = 'true') " + str2 + " GROUP BY Stock_2.Did) AS opn  GROUP BY Did UNION ALL  SELECT '' AS Type, Stock_1.Did, 0 AS Opening, 0 AS OpeningAmt, SUM(Stock_1.Receive) AS Purchase, SUM(Stock_1.ReceiveAmt) AS PurchaseAmt,  SUM(Stock_1.Issue) AS Sale, SUM(Stock_1.IssueAmt) AS SaleAmt  FROM Description AS Description_1 RIGHT OUTER JOIN  Stock AS Stock_1 ON Description_1.Des_id = Stock_1.Did RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_1 LEFT OUTER JOIN  VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id WHERE (VOUCHERINFO_1.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND   (Description_1.StkMaintain = 'true')  " + str1 + " GROUP BY Stock_1.Did) AS final ON Description_3.Des_id = final.Did GROUP BY Description_3.Description, Description_3.Pack, final.Did, OTHER.Name, OTHER_1.Name ORDER BY OTHER.Name, OTHER_1.Name, Description_3.Description";
            


            //sql = "SELECT CASE WHEN OTHER.Name IS NULL THEN '<UndefinedCompany>' ELSE OTHER.Name END AS Company, CASE WHEN OTHER_1.Name IS NULL   THEN '<UndefinedItem>' ELSE OTHER_1.Name END AS Item, Description_3.Description, Description_3.Pack, SUM(final.Opening) AS Opn, SUM(final.OpeningAmt)  AS OpnAmt, SUM(final.Purchase) AS Pur, SUM(final.PurchaseAmt) AS PurAmt, SUM(final.Sale) AS Sale, SUM(final.SaleAmt) AS SaleAmt,  SUM(final.Opening + final.Purchase - final.Sale) AS Closing, SUM(final.OpeningAmt + final.PurchaseAmt - final.SaleAmt) AS ClosingAmt, final.Did, MAX(Description_3.Pvalue) AS Pvalue FROM OTHER AS OTHER_1 RIGHT OUTER JOIN  Description AS Description_3 ON OTHER_1.Oth_id = Description_3.Item_id LEFT OUTER JOIN  OTHER ON Description_3.Company_id = OTHER.Oth_id RIGHT OUTER JOIN  (SELECT 'Opening Balance' AS Type, Did, SUM(Qty) AS Opening, SUM(Amount) AS OpeningAmt, 0 AS Purchase, 0 AS PurchaseAmt, 0 AS Sale, 0 AS SaleAmt  FROM (SELECT Stock.Did, SUM( Stock.Issue) * - 1 AS Qty, - (1 * SUM( Stock.IssueAmt)) AS Amount  FROM Description RIGHT OUTER JOIN  Stock ON Description.Des_id = Stock.Did LEFT OUTER JOIN  VOUCHERTYPE RIGHT OUTER JOIN  VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ( Description.StkMaintain = 'True') " + str + " GROUP BY Stock.Did  UNION ALL  SELECT Stock_2.Did, SUM(Stock_2.Receive) AS Qty, SUM(Stock_2.ReceiveAmt) AS Amount  FROM Description AS Description_2 RIGHT OUTER JOIN  Stock AS Stock_2 ON Description_2.Des_id = Stock_2.Did LEFT OUTER JOIN ";
            //sql += " VOUCHERTYPE AS VOUCHERTYPE_2 RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_2 ON VOUCHERTYPE_2.Vt_id = VOUCHERINFO_2.Vt_id ON  Stock_2.Vid = VOUCHERINFO_2.Vi_id WHERE (VOUCHERINFO_2.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (Description_2.StkMaintain = 'true') " + str2 + " GROUP BY Stock_2.Did) AS opn  GROUP BY Did UNION ALL  SELECT '' AS Type, Stock_1.Did, 0 AS Opening, 0 AS OpeningAmt, SUM(Stock_1.Receive) AS Purchase, SUM(Stock_1.ReceiveAmt) AS PurchaseAmt,  SUM(Stock_1.Issue) AS Sale, SUM(Stock_1.IssueAmt) AS SaleAmt  FROM Description AS Description_1 RIGHT OUTER JOIN  Stock AS Stock_1 ON Description_1.Des_id = Stock_1.Did RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_1 LEFT OUTER JOIN  VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id WHERE (VOUCHERINFO_1.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND   (Description_1.StkMaintain = 'true')  " + str1 + " GROUP BY Stock_1.Did) AS final ON Description_3.Des_id = final.Did GROUP BY Description_3.Description, Description_3.Pack, final.Did, OTHER.Name, OTHER_1.Name ORDER BY OTHER.Name, OTHER_1.Name, Description_3.Description";
            
            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            dt.Columns.Remove("Pvalue");




            if (dt.Rows.Count == 0)
            {
                return false;
            }

            if (amtrequired == false)
            {
                dt.Columns.Remove("OpnAmt");
                dt.Columns.Remove("PurAmt");
                dt.Columns.Remove("SaleAmt");
                dt.Columns.Remove("ClosingAmt");

                string[,] col = new string[2, 3]
                    { 
                    {"Company","1","1"},
                    {"Item","1","0"} };

                string[,] Cwidth = new string[9, 8] 
            {           
            { "Company", "", "0","","","","","" },
            { "Item", "", "0","","","","","" },
            { "Description", "300", "0","","Total","","","" },
            { "Packing", "200", "0","","","","","" },
            { "Opening", "100", "1","|sum(Opn)","|sum(Opn)","","","" },          
            { "Inflow", "100", "1","","|sum(Pur)","","","" },
            { "Outflow", "100", "1","","|sum(Sale)","","","" },
            { "Stock", "100", "1","|sum(Closing)","|sum(Closing)","","","" },            
            { "Did", "0", "0","","","","","" },
            };
                CreateReport(dt, col, Cwidth);
            }
            else
            {
                string[,] col = new string[2, 3]
                    { 
                    {"Company","1","1"},
                    {"Item","1","0"} };

                string[,] Cwidth = new string[13, 8] 
            {           
            { "Company", "", "0","","","","","" },
            { "Item", "", "0","","","","","" },
            { "Description", "150", "0","","Total","","","" },
            { "Packing", "50", "0","","","","","" },
            { "Opening", "100", "1","","|sum(Opn)","","","" },
            { "OpeningAmt", "100", "1","","|sum(OpnAmt)","","","" },
            { "Inflow", "100", "1","","|sum(Pur)","","","" },
            { "InflowAmt", "100", "1","","|sum(PurAmt)","","","" },
            { "Outflow", "100", "1","","|sum(Sale)","","","" },
            { "OutflowAmt", "100", "1","","|sum(SaleAmt)","","","" },
            { "Stock", "100", "1","","|sum(Closing)","","","" },
            { "StockAmt", "100", "1","","|sum(ClosingAmt)","","","" },
            { "Did", "0", "0","","","","","" },
            };
                CreateReport(dt, col, Cwidth);
            }
            return true;
        }

     
        public bool Broker(DateTime DateFrom, DateTime DateTo)
        {
            groupBox2.Visible = false;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Broker List";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            this.Text = frmptyp;
            DecsOfReport = "Broker's List, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            sql = "SELECT     ACCOUNT.Name,  ACCOUNT.Address1,  ACCOUNT.Address2,  ACCOUNT.Phone,    ACCOUNT.MobileNo,  ACCOUNT.Email FROM          ACCOUNT LEFT OUTER JOIN                       ACCOUNTYPE ON  ACCOUNT.Act_id =  ACCOUNTYPE.Act_id WHERE     ( ACCOUNTYPE.Name = N'Agent') AND ( ACCOUNT.Branch_id = '" + Database.BranchId + "') ORDER BY  ACCOUNT.Name";
            dt.Clear();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }
            
            string[,] col = new string[0, 0]{};

            string[,] Cwidth = new string[6, 8]{
            { "Agent Name", "300", "1","","","","","" },           
            { "Address1", "150", "0","","","","","" },
            { "Address2", "150", "0","","","" ,"",""},
            { "Phone No", "125", "0","","","","","" },
            { "Mobile No", "125", "0","","","","","" },
            { "EmailId", "150", "0","","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }
        public void DayWiseReportCross(DateTime DateFrom, DateTime DateTo, string str, string str2, string str1, bool amtrequired)
        {
            DataTable dt;
            string sql = "";


            sql = "SELECT CASE WHEN OTHER.Name IS NULL THEN '<UndefinedCompany>' ELSE OTHER.Name END AS Company, CASE WHEN OTHER_1.Name IS NULL   THEN '<UndefinedItem>' ELSE OTHER_1.Name END AS Item, Description_3.Description, Description_3.Pack, SUM(final.Opening) AS Opn, SUM(final.OpeningAmt)  AS OpnAmt, SUM(final.Purchase) AS Pur, SUM(final.PurchaseAmt) AS PurAmt, SUM(final.Sale) AS Sale, SUM(final.SaleAmt) AS SaleAmt,  SUM(final.Opening + final.Purchase - final.Sale) AS Closing, SUM(final.OpeningAmt + final.PurchaseAmt - final.SaleAmt) AS ClosingAmt, final.Did, MAX(Description_3.Pvalue) AS Pvalue FROM OTHER AS OTHER_1 RIGHT OUTER JOIN  Description AS Description_3 ON OTHER_1.Oth_id = Description_3.Item_id LEFT OUTER JOIN  OTHER ON Description_3.Company_id = OTHER.Oth_id RIGHT OUTER JOIN  (SELECT 'Opening Balance' AS Type, Did, SUM(Qty) AS Opening, SUM(Amount) AS OpeningAmt, 0 AS Purchase, 0 AS PurchaseAmt, 0 AS Sale, 0 AS SaleAmt  FROM (SELECT Stock.Did, SUM( Stock.Issue) * - 1 AS Qty, - (1 * SUM( Stock.IssueAmt)) AS Amount  FROM Description RIGHT OUTER JOIN  Stock ON Description.Des_id = Stock.Did LEFT OUTER JOIN  VOUCHERTYPE RIGHT OUTER JOIN  VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Stock.Vid = VOUCHERINFO.Vi_id WHERE ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND ( Description.StkMaintain = 'True') " + str + " GROUP BY Stock.Did  UNION ALL  SELECT Stock_2.Did, SUM(Stock_2.Receive) AS Qty, SUM(Stock_2.ReceiveAmt) AS Amount  FROM Description AS Description_2 RIGHT OUTER JOIN  Stock AS Stock_2 ON Description_2.Des_id = Stock_2.Did LEFT OUTER JOIN ";
            sql += " VOUCHERTYPE AS VOUCHERTYPE_2 RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_2 ON VOUCHERTYPE_2.Vt_id = VOUCHERINFO_2.Vt_id ON  Stock_2.Vid = VOUCHERINFO_2.Vi_id WHERE (VOUCHERINFO_2.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (Description_2.StkMaintain = 'true') " + str2 + " GROUP BY Stock_2.Did) AS opn  GROUP BY Did UNION ALL  SELECT '' AS Type, Stock_1.Did, 0 AS Opening, 0 AS OpeningAmt, SUM(Stock_1.Receive) AS Purchase, SUM(Stock_1.ReceiveAmt) AS PurchaseAmt,  SUM(Stock_1.Issue) AS Sale, SUM(Stock_1.IssueAmt) AS SaleAmt  FROM Description AS Description_1 RIGHT OUTER JOIN  Stock AS Stock_1 ON Description_1.Des_id = Stock_1.Did RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_1 LEFT OUTER JOIN  VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id WHERE (VOUCHERINFO_1.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') AND   (Description_1.StkMaintain = 'true') " + str1 + " GROUP BY Stock_1.Did) AS final ON Description_3.Des_id = final.Did GROUP BY Description_3.Description, Description_3.Pack, final.Did, OTHER.Name, OTHER_1.Name ORDER BY OTHER.Name, OTHER_1.Name, Description_3.Description";


            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            Object misValue = System.Reflection.Missing.Value;
            Excel.Application apl = new Microsoft.Office.Interop.Excel.Application();
            Excel.Workbook wb = (Excel.Workbook)apl.Workbooks.Add(misValue);
            Excel.Worksheet ws;
            ws = (Excel.Worksheet)wb.Worksheets[1];
            int lno = 1;
            DataTable dtExcel = new DataTable();
            DataTable dtRheader = new DataTable();
            Database.GetSqlData("select * from company", dtRheader);
            int SheetWeidht = 9;
            ws.Cells[lno, 1] = dtRheader.Rows[0]["name"].ToString();
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Font.Bold = true;
            lno++;

            ws.Cells[lno, 1] = dtRheader.Rows[0]["Address1"].ToString();
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Font.Bold = true;
            lno++;

            ws.Cells[lno, 1] = dtRheader.Rows[0]["Address2"].ToString();
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Font.Bold = true;
            lno++;

            ws.get_Range("a:a").ColumnWidth = 30;
            ws.get_Range("b:i").ColumnWidth = 6;
            ws.get_Range("b:i").HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            lno++;
            //ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Merge(Type.Missing);

            DataTable distinctItem = dt.DefaultView.ToTable(true, "Company", "Item");

            for (int i = 0; i < distinctItem.Rows.Count; i++)
            {
                //Print Company and Item Heading
                ws.Cells[lno, 1] = distinctItem.Rows[i][0].ToString() + "-" + distinctItem.Rows[i][1].ToString();
                ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Font.Bold = true;
                ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.White);
                ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, SheetWeidht]).Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.MediumSlateBlue);

                DataTable dt1 = dt.Select("Company='" + distinctItem.Rows[i][0].ToString() + "'  and Item='" + distinctItem.Rows[i][1].ToString() + "' ").CopyToDataTable();
                DataTable distinctDesc = dt1.DefaultView.ToTable(true, "Description");

                DataTable distinctPack = dt1.DefaultView.ToTable(true, "Pack");
                distinctPack.Columns.Add("Pvalue", typeof(double));

                for (int j = 0; j < distinctPack.Rows.Count; j++)
                {
                    distinctPack.Rows[j]["Pvalue"] = dt1.Compute("max(Pvalue)", "Pack='" + distinctPack.Rows[j]["Pack"].ToString() + "'");
                }

                DataView view = distinctPack.DefaultView;
                view.Sort = "Pvalue DESC";
                distinctPack = view.ToTable();


                for (int j = 0; j < distinctPack.Rows.Count; j++)
                {
                    //Print Avalable Pack Size
                    ws.Cells[lno, j + 2] = distinctPack.Rows[j]["Pack"].ToString();
                }



                lno++;
                for (int j = 0; j < distinctDesc.Rows.Count; j++)
                {
                    DataTable dt2 = dt1.Select("Description='" + distinctDesc.Rows[j][0].ToString() + "'").CopyToDataTable();

                    //Print Description
                    ws.Cells[lno, 1] = distinctDesc.Rows[j]["Description"].ToString();

                    for (int k = 0; k < distinctPack.Rows.Count; k++)
                    {
                        //print Stock
                        if (dt2.Select("Pack='" + distinctPack.Rows[k][0].ToString() + "'").Length > 0)
                        {
                            ws.Cells[lno, k + 2] = dt2.Select("Pack='" + distinctPack.Rows[k][0].ToString() + "'")[0]["Closing"].ToString();
                        }
                    }

                    lno++;
                }

                for (int j = 0; j < distinctPack.Rows.Count; j++)
                {
                    //Print Sum
                    ws.Cells[lno, j + 2] = dt1.Compute("sum(Closing)", "Pack='" + distinctPack.Rows[j][0].ToString() + "'");
                }
                ws.get_Range(ws.Cells[lno, 2], ws.Cells[lno, SheetWeidht]).Font.Bold = true;
                //ws.get_Range(ws.Cells[lno, 2], ws.Cells[lno, SheetWeidht]).Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.White);
                ws.get_Range(ws.Cells[lno, 2], ws.Cells[lno, SheetWeidht]).Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.LightBlue);

                lno++;
            }

            Excel.Range last = ws.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell, Type.Missing);
            ws.get_Range("A1", last).WrapText = true;
            apl.Visible = true;
        }

       
        public bool Reorder(DateTime DateFrom, DateTime DateTo, string str, string str2)
        {
            groupBox2.Visible = false;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Reorder Management";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            this.Text = frmptyp;
            DecsOfReport = "Reorder Management, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            

          //  sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS godown, OTHER.Name AS department, OTHER_1.Name AS company, OTHER_4.Name AS item, OTHER_2.Name AS color, OTHER_3.Name AS price, Description.Description, Description.Pack, Description.Max_level, Description.Wlavel, Description.box_quantity, SUM(Stock.Receive - Stock.Issue) AS stock FROM Description RIGHT OUTER JOIN Stock ON Description.Des_id = Stock.Did LEFT OUTER JOIN OTHER ON Description.Department_id = OTHER.Oth_id LEFT OUTER JOIN OTHER AS OTHER_3 ON Description.Group_id = OTHER_3.Oth_id LEFT OUTER JOIN OTHER AS OTHER_2 ON Description.Col_id = OTHER_2.Oth_id LEFT OUTER JOIN OTHER AS OTHER_4 ON Description.Item_id = OTHER_4.Oth_id LEFT OUTER JOIN OTHER AS OTHER_1 ON Description.Company_id = OTHER_1.Oth_id LEFT OUTER JOIN ACCOUNT ON Description.Godown_id = ACCOUNT.Ac_id GROUP BY OTHER.Name, OTHER_1.Name, OTHER_4.Name, OTHER_2.Name, OTHER_3.Name, Description.Description, Description.Pack, Description.Max_level, Description.Wlavel, Description.box_quantity, CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END " + str + " ORDER BY godown, department, company, item, color, price, Description.Description, Description.Pack";
            sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS godown,    OTHER_1.Name AS company, OTHER_4.Name AS item, OTHER_2.Name AS color, OTHER_3.Name AS price,  Description.Description,  Description.Pack,  Description.Max_level,  Description.Wlavel,  Description.box_quantity, SUM( Stock.Receive -  Stock.Issue) AS stock, MAX( Description.Pvalue)   AS Pvalue FROM  VOUCHERINFO RIGHT OUTER JOIN   Stock ON  VOUCHERINFO.Vi_id =  Stock.Vid LEFT OUTER JOIN  Description ON  Stock.Did =  Description.Des_id LEFT OUTER JOIN   OTHER AS OTHER_3 ON  Description.Group_id = OTHER_3.Oth_id LEFT OUTER JOIN   OTHER AS OTHER_2 ON  Description.Col_id = OTHER_2.Oth_id LEFT OUTER JOIN   OTHER AS OTHER_4 ON  Description.Item_id = OTHER_4.Oth_id LEFT OUTER JOIN   OTHER AS OTHER_1 ON  Description.Company_id = OTHER_1.Oth_id LEFT OUTER JOIN   ACCOUNT ON  Description.Godown_id =  ACCOUNT.Ac_id WHERE  ( VOUCHERINFO.Vdate <='" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') "+str2+" OR   ( VOUCHERINFO.Vdate IS NULL) GROUP BY  OTHER_1.Name, OTHER_4.Name, OTHER_2.Name, OTHER_3.Name,  Description.Description,  Description.Pack,    Description.Max_level,  Description.Wlavel,  Description.box_quantity, CASE WHEN ACCOUNT.Name IS NULL    THEN '<MAIN>' ELSE ACCOUNT.Name END " + str + " ORDER BY godown, company, item, color, price,  Description.Description,  Description.Pack";
            dt.Clear();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            dt.Columns.Add("reorder", typeof(double));

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                dt.Rows[i]["reorder"] = "0";
                if (double.Parse(dt.Rows[i]["Max_level"].ToString()) > 0 && double.Parse(dt.Rows[i]["Wlavel"].ToString()) > 0)
                {
                    if (double.Parse(dt.Rows[i]["Wlavel"].ToString()) > double.Parse(dt.Rows[i]["stock"].ToString()))
                    {
                        double max = 0, reorder1 = 0, reorder2 = 0;

                        max = double.Parse(dt.Rows[i]["Max_level"].ToString());

                        reorder1 = max - double.Parse(dt.Rows[i]["stock"].ToString());

                        double qty = reorder1 / double.Parse(dt.Rows[i]["box_quantity"].ToString());

                        string[] st = qty.ToString().Split('.');

                        reorder2 = double.Parse(st[0].ToString()) * double.Parse(dt.Rows[i]["box_quantity"].ToString());

                        dt.Rows[i]["reorder"] = reorder2.ToString();
                    }
                }
            }

            if (dt.Rows.Count == 0)
            {
                return false;
            }




            string[,] col = new string[1, 3]
                { 
                {"godown","1","1"}
                };

            string[,] Cwidth = new string[13, 8]{
            { "Godown", "200", "1","","","","","" },           
           
            { "Company", "200", "0","","","" ,"",""},
            { "Item/Brand", "200", "0","","","","","" },
            { "Color", "150", "0","","","","","" },
            { "Price Group", "150", "0","","","","","" },
            { "Description", "200", "0","","","" ,"",""},
            { "Pack", "100", "0","","","","","" },
            { "Max Level", "100", "0","","","","","" },
            { "Min Level", "100", "0","","","","","" },
            { "Box Quantity", "150", "1","","","","","" },
            { "Stock", "150", "1","","","","","" },
            { "Pvalue", "150", "1","","","","","" },
            { "Reorder", "150", "1","","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool PriceListNew(DateTime DateFrom, DateTime DateTo, string str, string rate)
        {
            groupBox2.Visible = false;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer List";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            this.Text = frmptyp;
            DecsOfReport = "Price List, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            sql = "SELECT CASE WHEN ACCOUNT.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT.Name END AS godown, OTHER.Name AS department, OTHER_1.Name AS company, OTHER_4.Name AS item, OTHER_2.Name AS color, OTHER_3.Name AS price, Description.Description, Description.Pack, " + rate + " FROM Description LEFT OUTER JOIN OTHER ON Description.Department_id = OTHER.Oth_id LEFT OUTER JOIN OTHER AS OTHER_3 ON Description.Group_id = OTHER_3.Oth_id LEFT OUTER JOIN OTHER AS OTHER_2 ON Description.Col_id = OTHER_2.Oth_id LEFT OUTER JOIN OTHER AS OTHER_4 ON Description.Item_id = OTHER_4.Oth_id LEFT OUTER JOIN OTHER AS OTHER_1 ON Description.Company_id = OTHER_1.Oth_id LEFT OUTER JOIN ACCOUNT ON Description.Godown_id = ACCOUNT.Ac_id " + str + " ORDER BY godown, department, company, item, color, price, Description.Description, Description.Pack";

            dt.Clear();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[1, 3]
                { 
                {"godown","1","1"}
                };

            string[,] Cwidth = new string[9, 8]{
            { "Godown", "150", "1","","","","","" },           
            { "Department", "150", "0","","","","","" },
            { "Company", "150", "0","","","" ,"",""},
            { "Item/Brand", "150", "0","","","","","" },
            { "Color", "150", "0","","","","","" },
            { "Price Group", "150", "0","","","","","" },
            { "Description", "200", "0","","","" ,"",""},
            { "Pack", "100", "0","","","","","" },
            {rate, "100", "1","","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool CustomerBillDue(DateTime DateFrom, DateTime DateTo, String Accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer Bill Due";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
          
          
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Customer Bill Due Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();

            
           // textBox1.Enabled = false;
           
                //if (Database.IsKacha == false)
                //{
            sql = "SELECT      VOUCHERINFO.Duedate  ,  ACCOUNT.Name, VOUCHERINFO.Vdate,   VOUCHERINFO.Invoiceno, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112)   + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber,Account.phone,Account.MobileNo,  VOUCHERINFO.Narr, VOUCHERINFO.Totalamount  FROM   VOUCHERINFO LEFT OUTER JOIN   ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN   VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE     ( VOUCHERINFO.Duedate >= " + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.Type = 'Sale') AND   ( VOUCHERINFO.Duedate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( ACCOUNT.Act_id <> 'SER3') AND ( VOUCHERTYPE." + Database.BMode + " = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") And  (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') AND (VOUCHERINFO.CashCredit = 'Credit') ORDER BY  VOUCHERINFO.Vnumber,  VOUCHERINFO.Vdate ";
                //}
                //else
                //{
                //    sql = "SELECT      VOUCHERINFO.Vdate,  VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112)   + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber,  VOUCHERINFO.Invoiceno,  ACCOUNT.Name,  VOUCHERINFO.Duedate, VOUCHERINFO.Totalamount FROM VOUCHERINFO LEFT OUTER JOIN   ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN   VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE     ( VOUCHERINFO.Duedate >= " + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.Type = 'Sale') AND   ( VOUCHERINFO.Duedate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( ACCOUNT.Act_id <> 'SER3') AND ( VOUCHERTYPE.B = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") And  (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') ORDER BY  VOUCHERINFO.Vnumber,  VOUCHERINFO.Vdate ";
                //}
           
            dt.Clear();
            Database.GetSqlData(sql, dt);
                if (dt.Rows.Count == 0)
            {
                return false;
            }
            DataRow[] drow;
            if (Accnm == "")
            {
                drow = dt.Select("Name is not null", "");
            }
            else
            {
                drow = dt.Select("Name='" + Accnm + "' ", "");
            }


            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();

                tdt.DefaultView.Sort = "Duedate,Invoiceno";
                tdt = tdt.DefaultView.ToTable();
            }
            string[,] col = new string[1, 3]
                { 
                {"Duedate","1","1"}
                };
            if (Accnm == "")
            {
                string[,] Cwidth = new string[9, 8]{
            { "Duedate", "", "","","","","","" }, 
            { "AccountName", "150", "0","","","","","" },
            { "InvoiceDate", "150", "0","","","","","" },
            { "InvoiceNo", "100", "0","","","" ,"",""},
         
            { "DocNumber", "150", "0","Total","Total","","","" },
           
             { "MobileNo", "100", "0","","","","","" },
            { "WhatsAppNo", "100", "0","","","","","" },
            { "Narration", "150", "0","","","","","" },
            { "Amount", "100", "0","|sum(TotalAmount)","|sum(TotalAmount)","","","" }
                };

                CreateReport(tdt, col, Cwidth);
            }

            else
            {
                tdt.Columns.Remove("Name");
                tdt.Columns.Remove("phone");
                tdt.Columns.Remove("mobileno");

                string[,] Cwidth = new string[6, 8]{
                 { "Duedate", "", "","","","","","" }, 
           
            { "InvoiceDate", "200", "0","","","","","" },
            { "InvoiceNo", "150", "0","","","" ,"",""},
         
            { "DocNumber", "200", "0","Total","Total","","","" },
           
            
            { "Narration", "250", "0","","","","","" },
            { "Amount", "150", "0","|sum(TotalAmount)","|sum(TotalAmount)","","","" }
                };

                CreateReport(tdt, col, Cwidth);
            }


            return true;
            //}
        }

        public bool SupplierBillDue(DateTime DateFrom, DateTime DateTo,string Accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Supplier Bill Due";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            //gGodownName = accnm;
            //textBox1.Text = gGodownName;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Supplier Bill Due Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();


            //if (Database.IsKacha == false)
            //{
            sql = "SELECT VOUCHERINFO.Duedate, ACCOUNT.Name, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,  VOUCHERINFO.Totalamount FROM VOUCHERINFO LEFT OUTER JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE ( VOUCHERINFO.Duedate >= " + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.Type = 'Purchase') AND ( VOUCHERINFO.Duedate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( ACCOUNT.Act_id <> 'SER3') AND ( VOUCHERTYPE." + Database.BMode + " = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") And (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') ORDER BY Name, VOUCHERINFO.Duedate, VOUCHERINFO.Vnumber";
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERINFO.Duedate,ACCOUNT.Name, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,  VOUCHERINFO.Totalamount FROM VOUCHERINFO LEFT OUTER JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE ( VOUCHERINFO.Duedate >= " + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( VOUCHERTYPE.Type = 'Purchase') AND ( VOUCHERINFO.Duedate <= " + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ( ACCOUNT.Act_id <> 'SER3') AND ( VOUCHERTYPE.B = " + access_sql.Singlequote + "true" + access_sql.Singlequote + ") And (VOUCHERINFO.Branch_id = '" + Database.BranchId + "') ORDER BY Name, VOUCHERINFO.Duedate, VOUCHERINFO.Vnumber";
            //}

            dt.Clear();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            DataRow[] drow;
            if (Accnm == "")
            {
                drow = dt.Select("Name is not null", "");
            }
            else
            {
                drow = dt.Select("Name='" + Accnm + "' ", "");
            }


            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();

                tdt.DefaultView.Sort = "DueDate,DocNumber";
                tdt = tdt.DefaultView.ToTable();
            }


            string[,] col = new string[1, 3]
                { 
                {"DueDate","1","1"}
                };

            if (Accnm == "")
            {
                string[,] Cwidth = new string[7, 8]{
             { "DueDate", "0", "0","","","","","" },
            { "AccountName", "200", "0","","","","","" },
            { "DocNumber", "200", "0","Total","Total","","","" },
            { "DocDate", "300", "1","","","","","" },
            { "InvoiceNumber", "200", "0","","","" ,"",""},
            { "Invoice Date", "150", "0","","","" ,"",""},
           
            { "Amount", "100", "0","|sum(TotalAmount)","|sum(TotalAmount)","","","" }
           };

                CreateReport(tdt, col, Cwidth);
            }
            else
            {
                tdt.Columns.Remove("Name");
                string[,] Cwidth = new string[6, 8]{
             { "DueDate", "0", "0","","","","","" },
          
            { "DocNumber", "200", "0","Total","Total","","","" },
            { "DocDate", "300", "1","","","","","" },
            { "InvoiceNumber", "200", "0","","","" ,"",""},
            { "Invoice Date", "200", "0","","","" ,"",""},
           
            { "Amount", "100", "0","|sum(TotalAmount)","|sum(TotalAmount)","","","" }
           };

                CreateReport(tdt, col, Cwidth);
            }
            
            return true;
            //}
        }

        public bool BelowStockWarning(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Below Stock Warning";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Below Stock Warning, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did, DESCRIPTION.Wlavel FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase,  0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "false" + access_sql.Singlequote + " and Vid='' GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  ";
                sql += "  Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY  stock.Did, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY  OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did, DESCRIPTION.Wlavel ORDER BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK";
            }
            else
            {
                sql = "SELECT OTHER.Name AS Company, OTHER_1.Name AS Item, DESCRIPTION.Description, DESCRIPTION.Pack AS Packing, Sum(final.Opening) AS Opening, Sum(final.Purchase) AS Purchase, Sum(final.Sale) AS Sale, final.Did, DESCRIPTION.Wlavel FROM (((((SELECT 'Opening Balance' AS Type, opn.Did, Sum(opn.Amount) AS Opening, 0 AS Purchase,  0 AS Sale,  opn.godown_id FROM ( SELECT Stock.Did, Sum(Stock.Receive) As Amount, Stock.godown_id FROM Stock WHERE Stock.marked=" + access_sql.Singlequote + "true" + access_sql.Singlequote + " and Vid='' GROUP BY Stock.Did, Stock.godown_id  Union all SELECT stock.Did, Sum(stock.Issue) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id  union all SELECT stock.Did, Sum(stock.Receive) AS Amount, stock.godown_id FROM stock LEFT JOIN VOUCHERINFO ON stock.Vid = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) GROUP BY stock.Did, stock.godown_id )  AS opn GROUP BY  opn.Did, opn.godown_id  ";
                sql += "  Union all SELECT '' AS Type, stock.Did, 0 AS Opening, Sum(stock.Receive) AS Purchase, Sum(stock.Issue) AS Sale, stock.godown_id FROM (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN stock ON VOUCHERINFO.Vi_id = stock.Vid WHERE (((stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY  stock.Did, stock.godown_id)  AS final LEFT JOIN DESCRIPTION ON final.Did = DESCRIPTION.Des_id) ) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id) WHERE (((DESCRIPTION.StkMaintain)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY  OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK, final.Did, DESCRIPTION.Wlavel ORDER BY OTHER.Name, OTHER_1.Name, DESCRIPTION.Description, DESCRIPTION.PACK";
            }
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            if (accnm == "")
            {
                drow = dt.Select("Company is not null", "");
            }
            else
            {
                drow = dt.Select("Company='" + accnm + "' ", "");
            }
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt.Columns.Add("Stock", typeof(decimal));
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    double opening = double.Parse(tdt.Rows[i]["Opening"].ToString());
                    double purchase = double.Parse(tdt.Rows[i]["Purchase"].ToString());
                  

                    double sale = double.Parse(tdt.Rows[i]["Sale"].ToString());
                   

                    tdt.Rows[i]["Stock"] = opening + purchase - sale ;
                }
                if (tdt.Select("Stock<Wlavel", "").Length > 0)
                {
                    tdt = tdt.Select("Stock<Wlavel", "").CopyToDataTable();
                    tdt = tdt.DefaultView.ToTable();
                }
                else
                {
                    return false;
                }
            }
          
           

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3]
              { 
              {"Company","1","0"},
              {"Item","1","0"} 
              };


            string[,] Cwidth = new string[10, 8] { 
            { "Company", "", "0","","","Total","","" },
            { "Item", "", "0","","","Total","","" },
            { "Description", "350", "0","","","Total","","" },
            { "Packing", "100", "0","","","","","" },
            { "Opening", "100", "0","","","","","" },
            { "Inflow", "100", "0","","","","","" },
           

            { "Outflow", "100", "0","","","","","" },
           

            { "Did", "0", "0","","","","","" },
            { "Wlavel", "100", "0","","","","","" },
            { "Stock", "150", "0","","","","","" }

            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool PriceList(DateTime DateFrom, DateTime DateTo, string accnm, string Rate)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Price List";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker1.Visible = false;
            dateTimePicker2.Value = DateTo;
            dateTimePicker2.Visible = false;
            AccName = accnm;
            if (funs.Select_Rates_Value(Rate) != "")
            {
                textBox1.Text = funs.Select_Rates_Value(Rate);
            }
            else
            {
                textBox1.Text = Rate;
            }
            label1.Visible = false;
            label2.Visible = false;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = " " + accnm + " - " + Rate;
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Rate == "")
            {
                return false;
            }
            if (Database.DatabaseType == "access")
            {
                sql = "TRANSFORM Max(DESCRIPTION." + Rate + ") AS Rate SELECT OTHER_1.Name, DESCRIPTION.Description FROM (DESCRIPTION LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id) LEFT JOIN OTHER AS OTHER_1 ON DESCRIPTION.Item_id = OTHER_1.Oth_id WHERE (((OTHER.Name)='" + accnm + "')) GROUP BY OTHER_1.Name, DESCRIPTION.Description, OTHER.Name ORDER BY DESCRIPTION.Pvalue DESC PIVOT DESCRIPTION.Pvalue";
            }
            else
            {
                DataTable dtother = new DataTable();
                Database.GetSqlData("SELECT DESCRIPTION.Pvalue as Pvalue FROM OTHER LEFT OUTER JOIN  DESCRIPTION ON  OTHER.Oth_id =  DESCRIPTION.Company_id WHERE OTHER.Name = '" + accnm + "' GROUP BY  DESCRIPTION.Pvalue ORDER BY DESCRIPTION.Pvalue DESC", dtother);

                string strColumns = "";
                for (int i = 0; i < dtother.Rows.Count; i++)
                {
                    strColumns += "[" + dtother.Rows[i]["Pvalue"].ToString() + "],";
                }
                strColumns = strColumns.TrimEnd(',');
                sql = "SELECT     Name, Description, " + strColumns + " FROM         (SELECT     OTHER_1.Name,  DESCRIPTION.Description,  DESCRIPTION.Pvalue, MAX(" + Rate + ") AS Rate FROM DESCRIPTION LEFT OUTER JOIN OTHER ON  DESCRIPTION.Company_id =  OTHER.Oth_id LEFT OUTER JOIN OTHER AS OTHER_1 ON  DESCRIPTION.Item_id = OTHER_1.Oth_id WHERE     ( OTHER.Name = '" + accnm + "') GROUP BY OTHER_1.Name,  DESCRIPTION.Description, DESCRIPTION.Pvalue,  OTHER.Name) AS res PIVOT (max(rate) For Pvalue in (" + strColumns + ")) as Pivoting";
            }

            dt.Rows.Clear();
            dt.Columns.Clear();
            Database.GetSqlData(sql, dt);
            if (dt.Rows.Count == 0)
            {
                return false;
            }

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                dt.Columns[i].ColumnName = dt.Columns[i].ColumnName.Replace('_', '.');
            }
            string[,] col = new string[1, 3] { { "Name", "1", "0" } };

            string[,] Cwidth = new string[dt.Columns.Count + 2, 8];
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                Cwidth[i, 0] = dt.Columns[i].ColumnName;
                if (i == 0)
                {
                    Cwidth[i, 1] = "0";
                }
                else if (i == 1)
                {
                    Cwidth[i, 1] = "250";
                }
                else
                {
                    Cwidth[i, 1] = (750 / (dt.Columns.Count - 2)).ToString();
                }
                Cwidth[i, 2] = "0";
                Cwidth[i, 3] = "";
                Cwidth[i, 4] = "";
                Cwidth[i, 5] = "";
                Cwidth[i, 6] = "";
                Cwidth[i, 7] = "";
            }

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool PartyPrice(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Party Price List";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker1.Visible = false;
            dateTimePicker2.Value = DateTo;
            dateTimePicker2.Visible = false;
            AccName = accnm;
            textBox1.Text = accnm;
            label1.Visible = false;
            label2.Visible = false;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = accnm + "\n Price List";
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            sql = "";
            if (Database.DatabaseType == "access")
            {
                sql = "TRANSFORM Max(PARTYRATE.Rate) AS MaxOfRate SELECT OTHER.Name, DESCRIPTION.Description FROM ((PARTYRATE LEFT JOIN DESCRIPTION ON PARTYRATE.Des_id = DESCRIPTION.Des_id) LEFT JOIN ACCOUNT ON PARTYRATE.Ac_id = ACCOUNT.Ac_id) LEFT JOIN OTHER ON DESCRIPTION.Item_id = OTHER.Oth_id WHERE (((ACCOUNT.Name)='" + accnm + "')) GROUP BY OTHER.Name, DESCRIPTION.Description ORDER BY DESCRIPTION.Pvalue DESC  PIVOT DESCRIPTION.Pvalue";
            }
            else
            {
                DataTable dtother = new DataTable();
                Database.GetSqlData("SELECT DESCRIPTION.Pvalue FROM PARTYRATE LEFT OUTER JOIN DESCRIPTION ON PARTYRATE.Des_id = DESCRIPTION.Des_id LEFT OUTER JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id LEFT OUTER JOIN ACCOUNT ON PARTYRATE.Ac_id = ACCOUNT.Ac_id LEFT OUTER JOIN                     OTHER ON DESCRIPTION.Item_id = OTHER.Oth_id WHERE ACCOUNT.Name = '" + accnm + "' GROUP BY DESCRIPTION.Pvalue ORDER BY DESCRIPTION.Pvalue DESC", dtother);
                string strColumns = "";

                for (int i = 0; i < dtother.Rows.Count; i++)
                {
                    strColumns += "[" + dtother.Rows[i]["Pvalue"].ToString() + "],";
                }
                strColumns = strColumns.TrimEnd(',');
                sql = "SELECT     Name, Description, " + strColumns + " FROM         (SELECT      OTHER.Name,  DESCRIPTION.Description,  DESCRIPTION.Pvalue, MAX( PARTYRATE.Rate) AS MaxOfRate    FROM           PARTYRATE LEFT OUTER JOIN DESCRIPTION ON  PARTYRATE.Des_id =  DESCRIPTION.Des_id LEFT OUTER JOIN PACKING ON  DESCRIPTION.Pack_id =  PACKING.Pack_id LEFT OUTER JOIN ACCOUNT ON  PARTYRATE.Ac_id =  ACCOUNT.Ac_id LEFT OUTER JOIN OTHER ON  DESCRIPTION.Item_id =  OTHER.Oth_id WHERE      ( ACCOUNT.Name = '" + accnm + "')  GROUP BY  OTHER.Name,  DESCRIPTION.Description,  DESCRIPTION.Pvalue) AS res PIVOT (max(MaxOfRate) FOR Pvalue IN (" + strColumns + ")) AS Pivoting ORDER BY Name";
            }

            dt.Rows.Clear();
            dt.Columns.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                dt.Columns[i].ColumnName = dt.Columns[i].ColumnName.Replace('_', '.');
            }
            string[,] col = new string[1, 3] { { "Name", "1", "0" } };

            string[,] Cwidth = new string[dt.Columns.Count + 2, 8];
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                Cwidth[i, 0] = dt.Columns[i].ColumnName;
                if (i == 0)
                {
                    Cwidth[i, 1] = "0";
                }
                else if (i == 1)
                {
                    Cwidth[i, 1] = "250";
                }
                else
                {
                    Cwidth[i, 1] = (750 / (dt.Columns.Count - 2)).ToString();
                }
                Cwidth[i, 2] = "0";
                Cwidth[i, 3] = "";
                Cwidth[i, 4] = "";
                Cwidth[i, 5] = "";
                Cwidth[i, 6] = "";
                Cwidth[i, 7] = "";
            }

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool InBillCharges(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "InBill Charges";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "InBill Charges, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            
            //if(Database.IsKacha==false)
            //{
                sql = " SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Item, QryItemTranjection.Type, Sum([Quantity]*[Pvalue]) AS QTY, QryItemTranjection.qd, QryItemTranjection.cd FROM QryItemTranjection";
                sql += " WHERE (((QryItemTranjection.[ACCOUNT.Name])='" + accnm + "') AND ((QryItemTranjection.Svdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Svdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Item, QryItemTranjection.Type, QryItemTranjection.qd, QryItemTranjection.cd, QryItemTranjection." + Database.BMode + "";
                sql +=" HAVING (((QryItemTranjection.Type)='Purchase' Or (QryItemTranjection.Type)='P Return') AND ((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"));";

            //}
            //else
            //{
            //    sql = " SELECT QryItemTranjection.[ACCOUNT.Name] AS Acc, QryItemTranjection.Item, QryItemTranjection.Type, Sum([Quantity]*[Pvalue]) AS QTY, QryItemTranjection.qd, QryItemTranjection.cd FROM QryItemTranjection";
            //    sql += " WHERE (((QryItemTranjection.[ACCOUNT.Name])='" + accnm + "') AND ((QryItemTranjection.Svdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (QryItemTranjection.Svdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Item, QryItemTranjection.Type, QryItemTranjection.qd, QryItemTranjection.cd, QryItemTranjection.B";
            //    sql +=" HAVING (((QryItemTranjection.Type)='Purchase' Or (QryItemTranjection.Type)='P Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"));";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["QTY"] = double.Parse(dt.Rows[i]["QTY"].ToString()) * -1;

                }
            }

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            {"Acc", "1", "0" },
            {"Item", "0", "1" } };

           


            string[,] Cwidth = new string[6, 8] { 
            { "Account Name", "0", "0","","","","","" },
            { "Item", "400", "0","","","" ,"",""},
            { "Type", "300", "0","","","Total","","" },
            { "Quantity", "100", "0","","","|sum(QTY)","","" },
            { "QD", "100", "0","","","" ,"",""},
            { "CD", "100", "0","","","","","" }
            };
            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool ItemLedger1(DateTime DateFrom, DateTime DateTo, string str,string str1,bool amtrequired)
        {

            button8.Visible = true;
            double totdr = 0;
            double totcr = 0;
            double totdramt = 0;
            double totcramt = 0;
            Istr = str;
            Istr1 = str1;
            textBox1.Visible = false;
            label1.Visible = false;
            label2.Visible = false;
            label3.Visible = false;
            dateTimePicker1.Visible = false;
            dateTimePicker2.Visible = false;

            button3.Visible = false;
            Iamtrequired = amtrequired;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Item Ledger";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
           // string description = Database.GetScalarText("SELECT DESCRIPTION.Description " + access_sql.Concat + " ' (' " + access_sql.Concat + " PACK AS des FROM DESCRIPTION  WHERE DESCRIPTION.Des_id='" + des_id + "' GROUP BY DESCRIPTION.Description " + access_sql.Concat + " ' (' " + access_sql.Concat + " PACK");
           // textBox1.Text = description;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Item Ledger of , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            
                if (Database.DatabaseType == "access")
                {
                    sql = "SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, Sum(res.Receive) AS Receive, Sum(res.Issue) AS Issue, Sum(res.RecAmt) AS RecAmt, Sum(res.IssAmt) AS IssAmt, res.Did, res.godown_id FROM (SELECT   iif(ACCOUNT.Name Is Null, '<MAIN>', ACCOUNT.Name) AS Godown, #2/1/1801# as Vdate, 'Opening' AS DocNumber, '' AS Party, '' AS Appno, '' AS AppName, Sum(Stock.Receive) -Sum(Stock.Issue) AS Receive,0 as Issue, SUM(Stock.ReceiveAmt) AS RecAmt, 0 AS IssAmt, DESCRIPTION.Des_id as Did, Stock.godown_id FROM (((Stock LEFT JOIN DESCRIPTION ON Stock.Did = DESCRIPTION.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name, VOUCHERINFO.Vdate, DESCRIPTION.Des_id, Stock.godown_id, Stock.marked HAVING (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) or (Voucherinfo.Vdate is null)  Union all SELECT IIf(ACCOUNT.Name Is Null,'<MAIN>',ACCOUNT.Name) AS Godown, VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, ACCOUNT_1.Name AS Party, Voucherdet.remark1, Voucherdet.remark2, Sum(Stock.Receive) AS Receive, Sum(Stock.Issue) AS Issue, IIf(VOUCHERTYPE.Type='Purchase',Voucherdet.Amount,IIf(VOUCHERTYPE.Type='P  Return',-1*VOUCHERDET.Amount,IIf(VOUCHERTYPE.Type='Transfer' and Sum(Stock.Receive)>0,VOUCHERDET.Amount,0))) AS RecAmt, IIf(VOUCHERTYPE.Type='Sale',Voucherdet.Amount,IIf(VOUCHERTYPE.Type='Return',-1*VOUCHERDET.Amount,IIf(VOUCHERTYPE.Type='Transfer' and Sum(Stock.Issue)>0 ,VOUCHERDET.Amount,0))) AS IssAmt, DESCRIPTION.Des_id AS Did, Stock.godown_id FROM (((((Stock LEFT JOIN DESCRIPTION ON Stock.Did = DESCRIPTION.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Stock.Vid = Voucherdet.Vi_id) AND (Stock.Did = Voucherdet.Des_ac_id) AND (Stock.Itemsr = Voucherdet.Itemsr) GROUP BY VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber), ACCOUNT_1.Name, Voucherdet.remark1, Voucherdet.remark2, DESCRIPTION.Des_id, Stock.godown_id, Voucherdet.Amount, VOUCHERTYPE.Type, ACCOUNT.Name, Stock.marked HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")))  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Did, res.godown_id";
                }
                else
                {



                    sql = "SELECT Vdate, DocNumber, Party, Appno, AppName, SUM(RecQty) AS Receive, SUM(RecAmt) AS ReceiveAmt, SUM(IssQty) AS Issue, SUM(IssAmt) AS IssueAmt,   0.0 AS CloQty, 0.0 AS ClosAmt FROM (SELECT '2/1/1801' AS Vdate, 'Opening' AS DocNumber, '' AS Party, '' AS Appno, '' AS AppName, SUM( Stock.Receive) - SUM( Stock.Issue) AS RecQty,  0 AS IssQty, SUM( Stock.ReceiveAmt) AS RecAmt, 0 AS IssAmt, Description.Des_id";
                    sql += " FROM Description RIGHT OUTER JOIN  Stock LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON Stock.godown_id = ACCOUNT_1.Ac_id ON Description.Des_id = Stock.Did LEFT OUTER JOIN  VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id  WHERE ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') " + str + "  GROUP BY Description.Des_id ";
                    sql += " Union all SELECT VOUCHERINFO_1.Vdate, VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10))  AS DocNumber, ACCOUNT.Name AS Party, Voucherdet.remark1 AS Appno, Voucherdet.remark2, SUM(Stock_1.Receive) AS Receive, SUM(Stock_1.Issue) AS Issue,  CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN - 1 * VOUCHERDET.Amount  ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS RecAmt,  CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN - 1 * VOUCHERDET.Amount ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS Expr1, Description_1.Des_id FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN  Stock AS Stock_1 LEFT OUTER JOIN";
                    sql += " Voucherdet ON Stock_1.Did = Voucherdet.Des_ac_id AND Stock_1.Itemsr = Voucherdet.Itemsr AND Stock_1.Vid = Voucherdet.Vi_id ON  ACCOUNT_1.Ac_id = Stock_1.godown_id LEFT OUTER JOIN  Description AS Description_1 ON Stock_1.Did = Description_1.Des_id LEFT OUTER JOIN  ACCOUNT RIGHT OUTER JOIN  VOUCHERINFO AS VOUCHERINFO_1 ON ACCOUNT.Ac_id = VOUCHERINFO_1.Ac_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN  VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id WHERE (VOUCHERINFO_1.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + DateTo.ToString(Database.dformat) + "')" + str1 + " GROUP BY VOUCHERINFO_1.Vdate, VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10)),  ACCOUNT.Name, Voucherdet.remark1, Voucherdet.remark2, Stock_1.Receive, Stock_1.Issue, Description_1.Des_id,  CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN - 1 * VOUCHERDET.Amount  ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN VOUCHERDET.Amount ELSE 0 END END END,   CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN - 1 * VOUCHERDET.Amount ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN VOUCHERDET.Amount ELSE 0 END END END ";
                    sql += " ) as final GROUP BY Vdate, DocNumber, Party, Appno, AppName";

                    sql = "SELECT Vdate, DocNumber, Party, SUM(RecQty) AS Receive, SUM(RecAmt) AS ReceiveAmt, SUM(IssQty) AS Issue, SUM(IssAmt) AS IssueAmt, 0.0 AS CloQty, 0.0 AS ClosAmt FROM (SELECT '2/1/1801' AS Vdate, 'Opening' AS DocNumber, '' AS Party, SUM( Stock.Receive) - SUM( Stock.Issue) AS RecQty,  0 AS IssQty, SUM( Stock.ReceiveAmt) AS RecAmt, 0 AS IssAmt, Description.Des_id FROM Description RIGHT OUTER JOIN  Stock LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON Stock.godown_id = ACCOUNT_1.Ac_id ON Description.Des_id = Stock.Did LEFT OUTER JOIN  VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id  WHERE ( VOUCHERINFO.Vdate < '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "')  " + str + "   GROUP BY Description.Des_id  Union all SELECT VOUCHERINFO_1.Vdate, VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10))   AS Expr2, ACCOUNT.Name, SUM(Stock_1.Receive) AS Receive, SUM(Stock_1.Issue) AS Issue,   CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN Stock_1.ReceiveAmt ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN Stock_1.ReceiveAmt ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN Stock_1.ReceiveAmt ELSE 0 END END END AS RecAmt,   CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN Stock_1.IssueAmt ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN Stock_1.IssueAmt ELSE CASE WHEN  VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN Stock_1.IssueAmt ELSE 0 END END END AS Expr1, Description_1.Des_id FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN";
                    sql += " Stock AS Stock_1 ON ACCOUNT_1.Ac_id = Stock_1.godown_id LEFT OUTER JOIN   Description AS Description_1 ON Stock_1.Did = Description_1.Des_id LEFT OUTER JOIN   ACCOUNT RIGHT OUTER JOIN   VOUCHERINFO AS VOUCHERINFO_1 ON ACCOUNT.Ac_id = VOUCHERINFO_1.Ac_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN   VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id";
                    sql += " WHERE (VOUCHERINFO_1.Vdate >= '" + dateTimePicker1.Value.Date.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + dateTimePicker2.Value.Date.ToString(Database.dformat) + "') " + str1 + " GROUP BY VOUCHERINFO_1.Vdate, VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10)),    ACCOUNT.Name, Stock_1.Receive, Stock_1.Issue, Description_1.Des_id,  CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN Stock_1.ReceiveAmt ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN Stock_1.ReceiveAmt ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN Stock_1.ReceiveAmt ELSE 0 END END END,    CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN Stock_1.IssueAmt ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN Stock_1.IssueAmt ELSE CASE WHEN  VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN Stock_1.IssueAmt ELSE 0 END END END) as final GROUP BY Vdate, DocNumber, Party";
                  
                }

            dt.Clear();
            Database.GetSqlData(sql, dt);

            tdt.Clear();
            tdt = dt.Copy();
            
            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                totdr += double.Parse(tdt.Rows[i]["Receive"].ToString());
                totcr += double.Parse(tdt.Rows[i]["Issue"].ToString());
                totdramt += double.Parse(tdt.Rows[i]["ReceiveAmt"].ToString());
                totcramt += double.Parse(tdt.Rows[i]["IssueAmt"].ToString());

                if (totdr > totcr)
                {
                    tdt.Rows[i]["CloQty"] = totdr - totcr;
                }
                else if (totcr > totdr)
                {
                    tdt.Rows[i]["CloQty"] = (totcr - totdr) * -1;
                }
                else
                {
                    tdt.Rows[i]["CloQty"] = "0";
                }

                if (totdramt > totcramt)
                {
                    tdt.Rows[i]["ClosAmt"] = totdramt - totcramt;
                }
                else if (totcramt > totdramt)
                {
                    tdt.Rows[i]["ClosAmt"] = (totcramt - totdramt) * -1;
                }
                else
                {
                    tdt.Rows[i]["ClosAmt"] = "0";
                }
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

           
            string[,] col = new string[0, 0];

            if (Feature.Available("Required Remark1") == "No" && Feature.Available("Required Remark2") == "No")
            {
                if (amtrequired == false)
                {
                    tdt.Columns.Remove("ReceiveAmt");
                    tdt.Columns.Remove("IssueAmt");
                    tdt.Columns.Remove("ClosAmt");

                    string[,] Cwidth = new string[6, 8] {             
                        { "Vdate", "100", "0","","","","","" },
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "200", "0","","","","","" },            
                        { "Inflow", "75", "1","|sum(Receive)","","","","" },
                        { "Outflow", "100", "1","|sum(Issue)","","","","" },          
                        { "Closing Stock", "100", "0","" ,"" ,"","",""}
                        };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    string[,] Cwidth = new string[9, 8] {             
                        { "Vdate", "100", "0","","","","","" },
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "200", "0","","","","","" },            
                        { "Inflow", "75", "1","|sum(Receive)","","","","" },
                        { "InflowAmt", "75","1","|sum(ReceiveAmt)","","","","" },
                        { "Outflow", "100", "1","|sum(Issue)","","","","" },
                        { "OutflowAmt", "100","1","|sum(IssueAmt)","","","","" },           
                        { "Closing Stock", "100", "0","" ,"" ,"","",""} ,
                        { "Closing StockAmt", "100", "0","" ,"" ,"","",""} 
                        };
                    CreateReport(tdt, col, Cwidth);
                }
            }
            else if (Feature.Available("Required Remark1") == "Yes" && Feature.Available("Required Remark2") == "Yes")
            {
                if (amtrequired == false)
                {
                    tdt.Columns.Remove("ReceiveAmt");
                    tdt.Columns.Remove("IssueAmt");
                    tdt.Columns.Remove("ClosAmt");

                    string[,] Cwidth = new string[8, 8] {               
                        { "Vdate", "100", "0","","","" ,"",""},
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "150", "0","","","" ,"",""},
                        { Feature.Available("Show Text On Remark1"), "100", "0","","","","","" },
                        { Feature.Available("Show Text On Remark2"), "100", "0","","","" ,"",""},
                        { "Inflow", "75", "1","|sum(Receive)","","","","" },
                        { "Outflow", "75","1","|sum(Issue)","","" ,"",""},
                        { "Closing Stock", "100", "0","" ,"" ,"","",""}
                        };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    string[,] Cwidth = new string[11, 8] {              
                        { "Vdate", "100", "0","","","" ,"",""},
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "150", "0","","","" ,"",""},
                        { Feature.Available("Show Text On Remark1"), "100", "0","","","","","" },
                        { Feature.Available("Show Text On Remark2"), "100", "0","","","" ,"",""},
                        { "Inflow", "75", "1","|sum(Receive)","","","","" },
                        { "InflowAmt", "75","1","|sum(ReceiveAmt)","","" ,"",""},
                        { "Outflow", "75", "1","|sum(Issue)","","","","" },
                        { "OutflowAmt", "75","1","|sum(IssueAmt)","","" ,"",""},
                        { "Closing Stock", "100", "0","" ,"" ,"","",""} ,
                        { "Closing StockAmt", "100", "0","" ,"" ,"","",""}
                        };
                    CreateReport(tdt, col, Cwidth);
                }
            }
            else if (Feature.Available("Required Remark1") == "Yes" && Feature.Available("Required Remark2") == "No")
            {
                if (amtrequired == false)
                {
                    tdt.Columns.Remove("ReceiveAmt");
                    tdt.Columns.Remove("IssueAmt");
                    tdt.Columns.Remove("ClosAmt");

                    string[,] Cwidth = new string[7, 8] {                
                        { "Vdate", "100", "0","","","","","" },
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "200", "0","","","","","" },
                        { Feature.Available("Show Text On Remark1"), "100", "0","","","","","" },                
                        { "Inflow", "75", "1","|sum(Receive)","","","","" },
                        { "Outflow", "75","1","|sum(Issue)","","","","" },
                        { "Closing Stock", "100", "0","" ,"" ,"","",""}
                        };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    string[,] Cwidth = new string[10, 8] {                
                        { "Vdate", "100", "0","","","","","" },
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "200", "0","","","","","" },
                        { Feature.Available("Show Text On Remark1"), "100", "0","","","","","" },                
                        { "Inflow", "75", "1","|sum(Receive)","","","","" },
                        { "InflowAmt", "75","1","|sum(ReceiveAmt)","","","","" },
                        { "Outflow", "100", "1","|sum(Issue)","","","","" },
                        { "OutflowAmt", "100","1","|sum(IssueAmt)","","" ,"",""},
                        { "Closing Stock", "100", "0","" ,"" ,"","",""} ,
                        { "Closing StockAmt", "100", "0","" ,"" ,"","",""}
                        };
                    CreateReport(tdt, col, Cwidth);
                }
            }
            else if (Feature.Available("Required Remark1") == "No" && Feature.Available("Required Remark2") == "Yes")
            {
                if (amtrequired == false)
                {
                    tdt.Columns.Remove("ReceiveAmt");
                    tdt.Columns.Remove("IssueAmt");
                    tdt.Columns.Remove("ClosAmt");

                    string[,] Cwidth = new string[7, 8] {               
                        { "Vdate", "100", "0","","","","","" },
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "200", "0","","","" ,"",""},
                        { Feature.Available("Show Text On Remark2"), "100", "0","","","","","" },                
                        { "Inflow", "75", "1","|sum(Receive)","","" ,"",""},
                        { "Outflow", "75","1","|sum(Issue)","","","","" },              
                        { "Closing Stock", "100", "0","" ,"" ,"","",""}
                        };
                    CreateReport(tdt, col, Cwidth);
                }
                else
                {
                    string[,] Cwidth = new string[10, 8] {
                        { "Vdate", "100", "0","","","","","" },
                        { "DocNumber", "150", "0","Total","","","","" },
                        { "Party", "200", "0","","","" ,"",""},
                        { Feature.Available("Show Text On Remark2"), "100", "0","","","","","" },                
                        { "Infolw", "75", "1","|sum(Receive)","","" ,"",""},
                        { "InflowAmt", "75","1","|sum(ReceiveAmt)","","","","" },
                        { "Outflow", "100", "1","|sum(Issue)","","","","" },
                        { "OutflowAmt", "100","1","|sum(IssueAmt)","","","","" },               
                        { "Closing Stock", "100", "0","" ,"" ,"","",""} ,
                        { "Closing StockAmt", "100", "0","" ,"" ,"","",""} 
                        };
                    CreateReport(tdt, col, Cwidth);
                }
            }
            return true;
        }

        public bool ItemLedger(DateTime DateFrom, DateTime DateTo, string GodownName, string des_id)
        {
            double totdr = 0;
            double totcr = 0;
            gGodownName = GodownName;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Item Ledger";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            string description = Database.GetScalarText("SELECT DESCRIPTION.Description " + access_sql.Concat + " ' (' " + access_sql.Concat + " PACK AS des FROM DESCRIPTION  WHERE DESCRIPTION.Des_id='" + des_id + "' GROUP BY DESCRIPTION.Description " + access_sql.Concat + " ' (' " + access_sql.Concat + " PACK");
            textBox1.Text = description;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Item Ledger of <" + description + ")>, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                if (Database.DatabaseType == "access")
                {
                    sql = "SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, Sum(res.Receive) AS Receive, Sum(res.Issue) AS Issue, Sum(res.RecAmt) AS RecAmt, Sum(res.IssAmt) AS IssAmt, res.Did, res.godown_id FROM (SELECT   iif(ACCOUNT.Name Is Null, '<MAIN>', ACCOUNT.Name) AS Godown, #2/1/1801# as Vdate, 'Opening' AS DocNumber, '' AS Party, '' AS Appno, '' AS AppName, Sum(Stock.Receive) -Sum(Stock.Issue) AS Receive,0 as Issue, SUM(Stock.ReceiveAmt) AS RecAmt, 0 AS IssAmt, DESCRIPTION.Des_id as Did, Stock.godown_id FROM (((Stock LEFT JOIN DESCRIPTION ON Stock.Did = DESCRIPTION.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name, VOUCHERINFO.Vdate, DESCRIPTION.Des_id, Stock.godown_id, Stock.marked HAVING (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) or (Voucherinfo.Vdate is null)  Union all SELECT IIf(ACCOUNT.Name Is Null,'<MAIN>',ACCOUNT.Name) AS Godown, VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, ACCOUNT_1.Name AS Party, Voucherdet.remark1, Voucherdet.remark2, Sum(Stock.Receive) AS Receive, Sum(Stock.Issue) AS Issue, IIf(VOUCHERTYPE.Type='Purchase',Voucherdet.Amount,IIf(VOUCHERTYPE.Type='P  Return',-1*VOUCHERDET.Amount,IIf(VOUCHERTYPE.Type='Transfer' and Sum(Stock.Receive)>0,VOUCHERDET.Amount,0))) AS RecAmt, IIf(VOUCHERTYPE.Type='Sale',Voucherdet.Amount,IIf(VOUCHERTYPE.Type='Return',-1*VOUCHERDET.Amount,IIf(VOUCHERTYPE.Type='Transfer' and Sum(Stock.Issue)>0 ,VOUCHERDET.Amount,0))) AS IssAmt, DESCRIPTION.Des_id AS Did, Stock.godown_id FROM (((((Stock LEFT JOIN DESCRIPTION ON Stock.Did = DESCRIPTION.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Stock.Vid = Voucherdet.Vi_id) AND (Stock.Did = Voucherdet.Des_ac_id) AND (Stock.Itemsr = Voucherdet.Itemsr) GROUP BY VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber), ACCOUNT_1.Name, Voucherdet.remark1, Voucherdet.remark2, DESCRIPTION.Des_id, Stock.godown_id, Voucherdet.Amount, VOUCHERTYPE.Type, ACCOUNT.Name, Stock.marked HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Stock.marked)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")))  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Did, res.godown_id";
                }
                else
                {
                    //sql = "SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, Sum(res.Receive) AS Receive, Sum(res.Issue) AS Issue, Sum(res.RecAmt) AS RecAmt, Sum(res.IssAmt) AS IssAmt, res.Des_id as Did, res.godown_id FROM (SELECT     CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, '2/1/1801' AS Vdate, 'Opening' AS DocNumber, '' AS Party,   '' AS Appno, '' AS AppName, SUM( Stock.Receive) - SUM( Stock.Issue) AS Receive, 0 AS Issue, SUM( Stock.ReceiveAmt) AS RecAmt,0 as IssAmt,  Description.Des_id,  Stock.godown_id     FROM          Description RIGHT OUTER JOIN  Stock LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON  Stock.godown_id = ACCOUNT_1.Ac_id ON  Description.Des_id =  Stock.Did LEFT OUTER JOIN  VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id LEFT OUTER JOIN   VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id  WHERE     (Stock.Branch_id = '" + Database.BranchId + "') GROUP BY  VOUCHERINFO.Vdate, ACCOUNT_1.Name,  Description.Des_id,  Stock.godown_id,  Stock.marked HAVING      ( VOUCHERINFO.Vdate < CONVERT(DATETIME, '" + DateFrom.ToString(Database.dformat) + "', 102)) AND ( Stock.marked = 'false') OR   ( VOUCHERINFO.Vdate IS NULL) Union all";
                    //sql += " SELECT CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, VOUCHERINFO_1.Vdate,  VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10)) AS DocNumber,  ACCOUNT.Name AS Party, VOUCHERDET.remark1 AS Appno, VOUCHERDET.remark2 AS Appname, Stock_1.Receive, Stock_1.Issue, CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN - 1 * VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS RecAmt,  CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN - 1 * VOUCHERDET.Amount ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS Issamt, Description_1.Des_id,  Stock_1.godown_id FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN Stock AS Stock_1 LEFT OUTER JOIN VOUCHERDET ON Stock_1.Did = VOUCHERDET.Des_ac_id AND Stock_1.Itemsr = VOUCHERDET.Itemsr AND Stock_1.Vid = VOUCHERDET.Vi_id ON  ACCOUNT_1.Ac_id = Stock_1.godown_id LEFT OUTER JOIN  Description AS Description_1 ON Stock_1.Did = Description_1.Des_id LEFT OUTER JOIN ACCOUNT RIGHT OUTER JOIN VOUCHERINFO AS VOUCHERINFO_1 ON ACCOUNT.Ac_id = VOUCHERINFO_1.Ac_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id WHERE (Stock_1.marked = 'false') AND (VOUCHERINFO_1.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + DateTo.ToString(Database.dformat) + "')   AND (VOUCHERINFO_1.Branch_id = '" + Database.BranchId + "') )  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Des_id, res.godown_id";
                    sql = " SELECT     Godown, Vdate, DocNumber, Party, Appno, AppName, SUM(Receive) AS Receive, SUM(Issue) AS Issue, SUM(RecAmt) AS RecAmt, SUM(IssAmt) AS IssAmt, Did, godown_id FROM         (  SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Receive AS Receive, res.Issue AS Issue, res.RecAmt AS RecAmt, res.IssAmt AS IssAmt, res.Des_id as Did, res.godown_id FROM (SELECT     CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, '2/1/1801' AS Vdate, 'Opening' AS DocNumber, '' AS Party,   '' AS Appno, '' AS AppName, SUM( Stock.Receive) - SUM( Stock.Issue) AS Receive, 0 AS Issue, SUM( Stock.ReceiveAmt) AS RecAmt,0 as IssAmt,  Description.Des_id,  Stock.godown_id     FROM          Description RIGHT OUTER JOIN  Stock LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON  Stock.godown_id = ACCOUNT_1.Ac_id ON  Description.Des_id =  Stock.Did LEFT OUTER JOIN  VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id LEFT OUTER JOIN   VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id  WHERE     (Stock.Branch_id = '" + Database.BranchId + "') GROUP BY  VOUCHERINFO.Vdate, ACCOUNT_1.Name,  Description.Des_id,  Stock.godown_id,  Stock.marked HAVING      ( VOUCHERINFO.Vdate < CONVERT(DATETIME, '" + DateFrom.ToString(Database.dformat) + "', 102)) AND ( Stock.marked = 'false') OR   ( VOUCHERINFO.Vdate IS NULL) Union all";
                    sql += " SELECT CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, VOUCHERINFO_1.Vdate,  VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10)) AS DocNumber,  ACCOUNT.Name AS Party, VOUCHERDET.remark1 AS Appno, VOUCHERDET.remark2 AS Appname, Stock_1.Receive, Stock_1.Issue, CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN - 1 * VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS RecAmt,  CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN - 1 * VOUCHERDET.Amount ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS Issamt, Description_1.Des_id,  Stock_1.godown_id FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN Stock AS Stock_1 LEFT OUTER JOIN VOUCHERDET ON Stock_1.Did = VOUCHERDET.Des_ac_id AND Stock_1.Itemsr = VOUCHERDET.Itemsr AND Stock_1.Vid = VOUCHERDET.Vi_id ON  ACCOUNT_1.Ac_id = Stock_1.godown_id LEFT OUTER JOIN  Description AS Description_1 ON Stock_1.Did = Description_1.Des_id LEFT OUTER JOIN ACCOUNT RIGHT OUTER JOIN VOUCHERINFO AS VOUCHERINFO_1 ON ACCOUNT.Ac_id = VOUCHERINFO_1.Ac_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id WHERE (Stock_1.marked = 'false') AND (VOUCHERINFO_1.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + DateTo.ToString(Database.dformat) + "')   AND (VOUCHERINFO_1.Branch_id = '" + Database.BranchId + "') )  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Des_id, res.godown_id ,Receive, Issue, RecAmt, IssAmt) AS final GROUP BY Godown, Vdate, DocNumber, Party, Appno, AppName, Did, godown_id";
                    
                }
            }
            else
            {
                if (Database.DatabaseType == "access")
                {
                    sql = "SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, Sum(res.Receive) AS Receive, Sum(res.Issue) AS Issue, Sum(res.RecAmt) AS RecAmt, Sum(res.IssAmt) AS IssAmt, res.Did, res.godown_id FROM (SELECT   iif(ACCOUNT.Name Is Null, '<MAIN>', ACCOUNT.Name) AS Godown, #2/1/1801# as Vdate, 'Opening' AS DocNumber, '' AS Party, '' AS Appno, '' AS AppName, Sum(Stock.Receive) -Sum(Stock.Issue) AS Receive,0 as Issue, SUM(Stock.ReceiveAmt) AS RecAmt, 0 AS IssAmt, DESCRIPTION.Des_id as Did, Stock.godown_id FROM (((Stock LEFT JOIN DESCRIPTION ON Stock.Did = DESCRIPTION.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id GROUP BY ACCOUNT.Name, VOUCHERINFO.Vdate, DESCRIPTION.Des_id, Stock.godown_id, Stock.marked HAVING (((VOUCHERINFO.Vdate)<" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")) or (Voucherinfo.Vdate is null)  Union all SELECT IIf(ACCOUNT.Name Is Null,'<MAIN>',ACCOUNT.Name) AS Godown, VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, ACCOUNT_1.Name AS Party, Voucherdet.remark1, Voucherdet.remark2, Sum(Stock.Receive) AS Receive, Sum(Stock.Issue) AS Issue, IIf(VOUCHERTYPE.Type='Purchase',Voucherdet.Amount,IIf(VOUCHERTYPE.Type='P  Return',-1*VOUCHERDET.Amount,IIf(VOUCHERTYPE.Type='Transfer' and Sum(Stock.Receive)>0,VOUCHERDET.Amount,0))) AS RecAmt, IIf(VOUCHERTYPE.Type='Sale',Voucherdet.Amount,IIf(VOUCHERTYPE.Type='Return',-1*VOUCHERDET.Amount,IIf(VOUCHERTYPE.Type='Transfer' and Sum(Stock.Issue)>0 ,VOUCHERDET.Amount,0))) AS IssAmt, DESCRIPTION.Des_id AS Did, Stock.godown_id FROM (((((Stock LEFT JOIN DESCRIPTION ON Stock.Did = DESCRIPTION.Des_id) LEFT JOIN VOUCHERINFO ON Stock.Vid = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON Stock.godown_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERINFO.Ac_id = ACCOUNT_1.Ac_id) LEFT JOIN Voucherdet ON (Stock.Vid = Voucherdet.Vi_id) AND (Stock.Did = Voucherdet.Des_ac_id) AND (Stock.Itemsr = Voucherdet.Itemsr) GROUP BY VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(VOUCHERINFO.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber), ACCOUNT_1.Name, Voucherdet.remark1, Voucherdet.remark2, DESCRIPTION.Des_id, Stock.godown_id, Voucherdet.Amount, VOUCHERTYPE.Type, ACCOUNT.Name, Stock.marked HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Stock.marked)=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")))  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Did, res.godown_id";
                }
                else
                {

                   
                    sql = "SELECT     Godown, Vdate, DocNumber, Party, Appno, AppName, SUM(Receive) AS Receive, SUM(Issue) AS Issue, SUM(RecAmt) AS RecAmt, SUM(IssAmt) AS IssAmt, Did, godown_id FROM         (SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Receive AS Receive, res.Issue AS Issue, res.RecAmt AS RecAmt, res.IssAmt AS IssAmt, res.Des_id as Did, res.godown_id FROM (SELECT     CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, '2/1/1801' AS Vdate, 'Opening' AS DocNumber, '' AS Party,   '' AS Appno, '' AS AppName, SUM( Stock.Receive) - SUM( Stock.Issue) AS Receive, 0 AS Issue, SUM( Stock.ReceiveAmt) AS RecAmt,0 as IssAmt,  Description.Des_id,  Stock.godown_id     FROM          Description RIGHT OUTER JOIN  Stock LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON  Stock.godown_id = ACCOUNT_1.Ac_id ON  Description.Des_id =  Stock.Did LEFT OUTER JOIN  VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id LEFT OUTER JOIN   VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE     (Stock.Branch_id = '" + Database.BranchId + "') GROUP BY  VOUCHERINFO.Vdate, ACCOUNT_1.Name,  Description.Des_id,  Stock.godown_id HAVING      ( VOUCHERINFO.Vdate < CONVERT(DATETIME, '" + DateFrom.ToString(Database.dformat) + "', 102))  OR   ( VOUCHERINFO.Vdate IS NULL) Union all";
                    sql += " SELECT CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, VOUCHERINFO_1.Vdate,  VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10)) AS DocNumber,  ACCOUNT.Name AS Party, VOUCHERDET.remark1 AS Appno, VOUCHERDET.remark2 AS Appname, Stock_1.Receive, Stock_1.Issue, CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN - 1 * VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS RecAmt,  CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN - 1 * VOUCHERDET.Amount ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS Issamt, Description_1.Des_id,  Stock_1.godown_id FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN Stock AS Stock_1 LEFT OUTER JOIN VOUCHERDET ON Stock_1.Did = VOUCHERDET.Des_ac_id AND Stock_1.Itemsr = VOUCHERDET.Itemsr AND Stock_1.Vid = VOUCHERDET.Vi_id ON  ACCOUNT_1.Ac_id = Stock_1.godown_id LEFT OUTER JOIN  Description AS Description_1 ON Stock_1.Did = Description_1.Des_id LEFT OUTER JOIN ACCOUNT RIGHT OUTER JOIN VOUCHERINFO AS VOUCHERINFO_1 ON ACCOUNT.Ac_id = VOUCHERINFO_1.Ac_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id WHERE  (VOUCHERINFO_1.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + DateTo.ToString(Database.dformat) + "')  AND (VOUCHERINFO_1.Branch_id = '" + Database.BranchId + "'))  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Des_id, res.godown_id ,Receive, Issue, RecAmt, IssAmt) AS final GROUP BY Godown, Vdate, DocNumber, Party, Appno, AppName, Did, godown_id";
                    
                    //sql = "SELECT res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, Sum(res.Receive) AS Receive, Sum(res.Issue) AS Issue, Sum(res.RecAmt) AS RecAmt, Sum(res.IssAmt) AS IssAmt, res.Des_id as Did, res.godown_id FROM (SELECT     CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, '2/1/1801' AS Vdate, 'Opening' AS DocNumber, '' AS Party,   '' AS Appno, '' AS AppName, SUM( Stock.Receive) - SUM( Stock.Issue) AS Receive, 0 AS Issue, SUM( Stock.ReceiveAmt) AS RecAmt,0 as IssAmt,  Description.Des_id,  Stock.godown_id     FROM          Description RIGHT OUTER JOIN  Stock LEFT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON  Stock.godown_id = ACCOUNT_1.Ac_id ON  Description.Des_id =  Stock.Did LEFT OUTER JOIN  VOUCHERINFO ON  Stock.Vid =  VOUCHERINFO.Vi_id LEFT OUTER JOIN   VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE     (Stock.Branch_id = '" + Database.BranchId + "') GROUP BY  VOUCHERINFO.Vdate, ACCOUNT_1.Name,  Description.Des_id,  Stock.godown_id,  Stock.marked HAVING      ( VOUCHERINFO.Vdate < CONVERT(DATETIME, '" + DateFrom.ToString(Database.dformat) + "', 102))  OR   ( VOUCHERINFO.Vdate IS NULL) Union all";
                    //sql += " SELECT CASE WHEN ACCOUNT_1.Name IS NULL THEN '<MAIN>' ELSE ACCOUNT_1.Name END AS Godown, VOUCHERINFO_1.Vdate,  VOUCHERTYPE_1.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO_1.Vdate, 112) + ' ' + CAST(VOUCHERINFO_1.Vnumber AS nvarchar(10)) AS DocNumber,  ACCOUNT.Name AS Party, VOUCHERDET.remark1 AS Appno, VOUCHERDET.remark2 AS Appname, Stock_1.Receive, Stock_1.Issue, CASE WHEN VOUCHERTYPE_1.Type = 'Purchase' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'P Return' THEN - 1 * VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Receive > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS RecAmt,  CASE WHEN VOUCHERTYPE_1.Type = 'Sale' THEN VOUCHERDET.Amount ELSE CASE WHEN VOUCHERTYPE_1.Type = 'Return' THEN - 1 * VOUCHERDET.Amount ELSE  CASE WHEN VOUCHERTYPE_1.Type = 'Transfer' AND Stock_1.Issue > 0 THEN VOUCHERDET.Amount ELSE 0 END END END AS Issamt, Description_1.Des_id,  Stock_1.godown_id FROM ACCOUNT AS ACCOUNT_1 RIGHT OUTER JOIN Stock AS Stock_1 LEFT OUTER JOIN VOUCHERDET ON Stock_1.Did = VOUCHERDET.Des_ac_id AND Stock_1.Itemsr = VOUCHERDET.Itemsr AND Stock_1.Vid = VOUCHERDET.Vi_id ON  ACCOUNT_1.Ac_id = Stock_1.godown_id LEFT OUTER JOIN  Description AS Description_1 ON Stock_1.Did = Description_1.Des_id LEFT OUTER JOIN ACCOUNT RIGHT OUTER JOIN VOUCHERINFO AS VOUCHERINFO_1 ON ACCOUNT.Ac_id = VOUCHERINFO_1.Ac_id ON Stock_1.Vid = VOUCHERINFO_1.Vi_id LEFT OUTER JOIN VOUCHERTYPE AS VOUCHERTYPE_1 ON VOUCHERINFO_1.Vt_id = VOUCHERTYPE_1.Vt_id WHERE  (VOUCHERINFO_1.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO_1.Vdate <= '" + DateTo.ToString(Database.dformat) + "')  AND (VOUCHERINFO_1.Branch_id = '" + Database.BranchId + "'))  AS res GROUP BY res.Godown, res.Vdate, res.DocNumber, res.Party, res.Appno, res.AppName, res.Des_id, res.godown_id";
                }
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;

            if (GodownName == "")
            {
                drow = dt.Select("Godown is not null And  Did='" + des_id + "' ", "Vdate");
            }
            else
            {
                drow = dt.Select("Godown='" + GodownName + "' And  Did='" + des_id + "' ", "Vdate");
            }
            tdt.Clear();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
              
                tdt.DefaultView.Sort = "Godown,Vdate,DocNumber";
                tdt = tdt.DefaultView.ToTable();
                tdt.Columns.Add("TBalance", typeof(decimal));
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    totdr += double.Parse(tdt.Rows[i]["receive"].ToString());
                    totcr += double.Parse(tdt.Rows[i]["issue"].ToString());
                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["TBalance"] = totdr - totcr;
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["TBalance"] = (totcr - totdr) * -1;
                    }
                    else
                    {
                        tdt.Rows[i]["TBalance"] = "0";
                    }

                }


            }
            if (tdt.Rows.Count == 0)
            {

                return false;
            }

            if (Feature.Available("Required Remark1") == "No")
            {
                tdt.Columns.Remove("AppNo");
            }
            if (Feature.Available("Required Remark2") == "No")
            {
                tdt.Columns.Remove("AppName");
            }
            string[,] col = new string[1, 3] { { "Godown", "1", "1" }};

            if (Feature.Available("Required Remark1") == "No" && Feature.Available("Required Remark2") == "No")
            {

                    string[,] Cwidth = new string[11, 8] { 
               { "Godown", "", "0","","","","","" },
            { "Vdate", "100", "0","","","","","" },
            { "DocNumber", "150", "0","Total","Total","","","" },
            { "Party", "200", "0","","","","","" },
            
            { "Receive", "75", "1","|sum(receive)","|sum(receive)","","","" },
            { "Issue", "75","1","|sum(issue)","|sum(issue)","","","" },
            { "ReceiveAmt", "100", "1","|sum(RecAmt)","|sum(RecAmt)","","","" },
            { "IssueAmt", "100","1","|sum(IssAmt)","|sum(IssAmt)","","","" },
            { "Des_ac_id", "0", "0","","","","","" }, 
            { "godown_id", "0", "0","" ,"" ,"" ,"",""}  ,
            { "Closing Stock", "100", "0","" ,"" ,"","",""} 
                };
                CreateReport(tdt, col, Cwidth);
            }
            else if (Feature.Available("Required Remark1") == "Yes" && Feature.Available("Required Remark2") == "Yes")
            {
                    string[,] Cwidth = new string[13, 8] { 
                { "Godown", "", "0","","","" ,"",""},
                { "Vdate", "100", "0","","","" ,"",""},
                { "DocNumber", "150", "0","Total","Total","","","" },
                { "Party", "150", "0","","","" ,"",""},
                { Feature.Available("Show Text On Remark1"), "100", "0","","","","","" },
                { Feature.Available("Show Text On Remark2"), "100", "0","","","" ,"",""},
                { "Inflow", "75", "1","|sum(receive)","|sum(receive)","","","" },
                { "Outflow", "75","1","|sum(issue)","|sum(issue)","" ,"",""},
                { "ReceiveAmt", "75", "1","|sum(RecAmt)","|sum(RecAmt)","","","" },
                { "IssueAmt", "75","1","|sum(IssAmt)","|sum(IssAmt)","" ,"",""},
                { "Des_ac_id", "0", "0","","","" ,"",""}, 
                { "godown_id", "0", "0","" ,"" ,"" ,"",""}  ,
                { "Closing Stock", "100", "0","" ,"" ,"","",""} 

                };
                CreateReport(tdt, col, Cwidth);
            }
            else if (Feature.Available("Required Remark1") == "Yes" && Feature.Available("Required Remark2") == "No")
            {
                string[,] Cwidth = new string[12, 8] { 
                { "Godown", "", "0","","","","","" },
                { "Vdate", "100", "0","","","","","" },
                { "DocNumber", "150", "0","Total","Total","","","" },
                { "Party", "200", "0","","","","","" },
                { Feature.Available("Show Text On Remark1"), "100", "0","","","","","" },
                
                { "Inflow", "75", "1","|sum(receive)","|sum(receive)","","","" },
                { "Outflow", "75","1","|sum(issue)","|sum(issue)","","","" },
                { "ReceiveAmt", "100", "1","|sum(RecAmt)","|sum(RecAmt)","","","" },
                { "IssueAmt", "100","1","|sum(IssAmt)","|sum(IssAmt)","" ,"",""},
                { "Des_ac_id", "0", "0","","","" ,"",""}, 
                { "godown_id", "0", "0","" ,"" ,"","","" }  ,
                { "Closing Stock", "100", "0","" ,"" ,"","",""} 

                };
                CreateReport(tdt, col, Cwidth);
            }
            else if (Feature.Available("Required Remark1") == "No" && Feature.Available("Required Remark2") == "Yes")
            {
                string[,] Cwidth = new string[12, 8] { 
                { "Godown", "", "0","","","","","" },
                { "Vdate", "100", "0","","","","","" },
                { "DocNumber", "150", "0","Total","Total","","","" },
                { "Party", "200", "0","","","" ,"",""},
                { Feature.Available("Show Text On Remark2"), "100", "0","","","","","" },
                
                { "Inflow", "75", "1","|sum(receive)","|sum(receive)","" ,"",""},
                { "Outflow", "75","1","|sum(issue)","|sum(issue)","","","" },
                { "ReceiveAmt", "100", "1","|sum(RecAmt)","|sum(RecAmt)","","","" },
                { "IssueAmt", "100","1","|sum(IssAmt)","|sum(IssAmt)","","","" },
                { "Des_ac_id", "0", "0","","","","","" }, 
                { "godown_id", "0", "0","" ,"" ,"","","" }  ,
                { "Closing Stock", "100", "0","" ,"" ,"","",""} 

                };
                CreateReport(tdt, col, Cwidth);
            }

            
            return true;
        }

        public bool PriceVariationSale(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Price Variation Sale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            string[] Des_Name = accnm.Split('(');
            string des_id = funs.Select_des_id(Des_Name[0], Des_Name[1]);
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Price Variation Sale, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            sql = "select * from QryItemTranjection where Type='Sale' or Type='P Return'";
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Des_id='" + des_id + "' and Vdate>=#" + DateFrom.ToString(Database.dformat) + "# and Vdate<=#" + DateTo.ToString(Database.dformat) + "#", "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
            }

            tdt = tdt.DefaultView.ToTable();
            if (tdt.Rows.Count == 0)
            {
               
                return false;
            }

            string[,] col = new string[0, 0];



            string[,] Cwidth = new string[47, 6] { 
            { "Type", "0", "0","","","" },
            { "Short", "100", "0","","","" },
            { "Vnumber", "100", "0","","","Total" },
            { "Vdate", "100", "0","","","|sum(QTY)" },
            { "Duedate", "100", "0","","","" },
            { "VoucherTaxable", "100","0","","","" },
            { "VoucherNetAmt", "100","0","","","" },
            { "Quantity", "100","0","","","" },
            { "Rate_am", "100","0","","","" },
            { "Weight", "100","0","","","" },
            { "Description", "100","0","","","" },
            { "ItemTaxable", "100","0","","","" },
            { "ItemAmount", "100","0","","","" },
            { "Packing", "100","0","","","" },
            { "OrgDescription", "100","0","","","" },
            { "Pvalue", "100","0","","","" },
            { "Utype", "100","0","","","" },
            { "Category_Name", "100","0","","","" },
            { "Commodity_Code", "100","0","","","" },
            { "Account.Name", "100","0","","","" },
            { "Address1", "100","0","","","" },
            { "Address2", "100","0","","","" },
            { "Phone", "100","0","","","" },
            { "Email", "100","0","","","" },
            { "Tin_Number", "100","0","","","" },
            { "Contractor.Name", "100","0","","","" },
            { "Mark", "100","0","","","" },
            { "Svnum", "100","0","","","" },
            { "Svdate", "100","0","","","" },
            { "Company", "100","0","","","" },
            { "Item", "100","0","","","" },
            { "Color", "100","0","","","" },
            { "Group", "100","0","","","" },
            { "Commission%", "100","0","","","" },
            { "Commission@", "100","0","","","" },
            { "Des_id", "100","0","","","" },
            { "DocNumber", "100","0","","","" },
            { "Effect_On_Stock", "100","0","","","" },
            { "Effect_On_Acc", "100","0","","","" },
            { "IncludingTax", "100","0","","","" },
            { "ExcludingTax", "100","0","","","" },
            { "Exstate", "100","0","","","" },
            { "TaxInvoice", "100","0","","","" },
            { "Unregistered", "100","0","","","" },
            { "QD", "100","0","","","" },
            { "CD", "100","0","","","" },
            { "Cost", "100","0","","","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }


        public bool PriceVariationPurchase(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Price Variation Purchase";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            string[] Des_Name = accnm.Split('(');
            string des_id = funs.Select_des_id(Des_Name[0], Des_Name[1]);
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Price Variation Purchase, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            sql = "select * from QryItemTranjection where Type='Purchase' or Type='Return'";
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Des_id='" + des_id + "' and Vdate>=#" + DateFrom.ToString(Database.dformat) + "# and Vdate<=#" + DateTo.ToString(Database.dformat) + "#", "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
            }

            tdt = tdt.DefaultView.ToTable();
            if (tdt.Rows.Count == 0)
            {
                
                return false;
            }

            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[47, 6] { 
            { "Type", "0", "0","","","" },
            { "Short", "100", "0","","","" },
            { "Vnumber", "100", "0","","","Total" },
            { "Vdate", "100", "0","","","|sum(QTY)" },
            { "Duedate", "100", "0","","","" },
            { "VoucherTaxable", "100","0","","","" },
            { "VoucherNetAmt", "100","0","","","" },
            { "Quantity", "100","0","","","" },
            { "Rate_am", "100","0","","","" },
            { "Weight", "100","0","","","" },
            { "Description", "100","0","","","" },
            { "ItemTaxable", "100","0","","","" },
            { "ItemAmount", "100","0","","","" },
            { "Packing", "100","0","","","" },
            { "OrgDescription", "100","0","","","" },
            { "Pvalue", "100","0","","","" },
            { "Utype", "100","0","","","" },
            { "Category_Name", "100","0","","","" },
            { "Commodity_Code", "100","0","","","" },
            { "Account.Name", "100","0","","","" },
            { "Address1", "100","0","","","" },
            { "Address2", "100","0","","","" },
            { "Phone", "100","0","","","" },
            { "Email", "100","0","","","" },
            { "Tin_Number", "100","0","","","" },
            { "Contractor.Name", "100","0","","","" },
            { "Mark", "100","0","","","" },
            { "Svnum", "100","0","","","" },
            { "Svdate", "100","0","","","" },
            { "Company", "100","0","","","" },
            { "Item", "100","0","","","" },
            { "Color", "100","0","","","" },
            { "Group", "100","0","","","" },
            { "Commission%", "100","0","","","" },
            { "Commission@", "100","0","","","" },
            { "Des_id", "100","0","","","" },
            { "DocNumber", "100","0","","","" },
            { "Effect_On_Stock", "100","0","","","" },
            { "Effect_On_Acc", "100","0","","","" },
            { "IncludingTax", "100","0","","","" },
            { "ExcludingTax", "100","0","","","" },
            { "Exstate", "100","0","","","" },
            { "TaxInvoice", "100","0","","","" },
            { "Unregistered", "100","0","","","" },
            { "QD", "100","0","","","" },
            { "CD", "100","0","","","" },
            { "Cost", "100","0","","","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }


        public bool AddressPrinting(string accnm)
        {
            string tPath = Path.GetTempPath() + DateTime.Now.ToString("yyMMddhmmssfff") + ".pdf";
            PdfPrinting(tPath, accnm);
            PdfReader frm = new PdfReader();
            frm.LoadFile(tPath);
            frm.Show();
            return true;
        }

        private void PdfPrinting(string Path, string name)
        {
            FileStream fs = new FileStream(Path, FileMode.Create, FileAccess.Write, FileShare.None);
            iTextSharp.text.Rectangle rec;
            Document document = new Document(PageSize.A5, 30f, 10f, 10f, 10f);
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            document.Open();
            HTMLWorker hw = new HTMLWorker(document);
            DataTable dtacc = new DataTable();
            string ac_id = funs.Select_ac_id(name);
            Database.GetSqlData("Select Name,Address1,Address2,Phone from ACCOUNT where Ac_id='" + ac_id + "'", dtacc);
            string str = "";
            str += @"<body> <font size='1'> <table>";
            for (int i = 0; i < dtacc.Rows.Count; i++)
            {
                str += "<tr>";
                str += "<td>";
                str += "To,";
                str += "</td>";
                str += "</tr>";
                for (int j = 0; j < dtacc.Columns.Count; j++)
                {
                    if (dtacc.Rows[i][j].ToString() != "None")
                    {
                        if (dtacc.Rows[i][j].ToString() != "0".ToString())
                        {
                            str += "<tr>";
                            str += "<td> " + dtacc.Rows[i][j].ToString() + " </td> ";
                            str += "</tr>";
                        }
                    }
                }
            }


            str += "</table></font></body>";
            StringReader sr = new StringReader(str);
            hw.Parse(sr);
            document.Close();
        }



        public bool SupplierDetailBillWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Supplier Detail Bill Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Supplier Detail Bill Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Feature.Available("Discount on Grid") == "Yes")
            {


                //if (Database.IsKacha == false)
                //{
                    sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Svdate, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.DocNumber,   "+access_sql.Svnum +" AS Sbill, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing,  QryItemTranjection.qd, QryItemTranjection.cd, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
                //}

                //else
                //{
                //    sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Svdate, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.DocNumber, "+access_sql.Svnum +"  AS Sbill, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.qd, QryItemTranjection.cd, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
                //}

                dt.Rows.Clear();
                dt.Columns.Clear();
                Database.GetSqlData(sql, dt);
                DataRow[] drow;
                drow = dt.Select("Account.Name='" + accnm + "' and Svdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) +access_sql.Hash+ " and Svdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) +access_sql.Hash +" ", "Type,DocNumber");
                tdt.Clear();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["qd"].ToString() == "")
                        {
                            tdt.Rows[i]["qd"] = 0;
                        }
                        if (tdt.Rows[i]["cd"].ToString() == "")
                        {
                            tdt.Rows[i]["cd"] = 0;
                        }
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {
                            tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                            tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                            tdt.Rows[i]["qd"] = double.Parse(tdt.Rows[i]["qd"].ToString()) * -1;
                            tdt.Rows[i]["cd"] = double.Parse(tdt.Rows[i]["cd"].ToString()) * -1;
                        }
                    }
                    tdt.Columns.Remove("Type");
                    tdt.Columns.Remove("Account.Name");
                    tdt.DefaultView.Sort = "Svdate";
                    tdt = tdt.DefaultView.ToTable();

                }
                if (tdt.Rows.Count == 0)
                {

                    return false;
                }

                string[,] col = new string[2, 3] {
                {"Svdate", "1", "0" },
                {"DocNumber", "0", "1" } 
                };

                string[,] Cwidth = new string[10, 8] { 
                { "Svdate", "", "0","" ,"","","",""},
                { "DocNumber", "100", "0","" ,"","","","" },
                { "SBill", "150", "0","" ,"","","","" },
                { "Description", "250", "0","Total Amount" ,"","Amount","","" },
                { "Quantity", "75", "0","" ,"","","","" },
                { "Rate_am", "100", "0","" ,"","","","" },
                { "Packing", "75", "0" ,"" ,"","","",""},
                { "QD", "50", "0" ,"" ,"","","",""},
                { "CD", "50", "0" ,"" ,"","","",""},
                { "ItemAmount", "150", "0","|sum(ItemAmount)" ,"","|sum(ItemAmount)","","" }
                };
                CreateReport(tdt, col, Cwidth);
            }

            else
            {
                //if (Database.IsKacha == false)
                //{
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Svdate, QryItemTranjection.ACCOUNT.Name, QryItemTranjection.DocNumber, ' Bill No.' & Svnum & ' Dt. ' & Format(Svdate,'dd-mmm-yyyy') AS Sbill, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection." + Database.BMode + ")=True))";
                //}

                //else
                //{
                //    sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Svdate, QryItemTranjection.ACCOUNT.Name, QryItemTranjection.DocNumber, ' Bill No.' & Svnum & ' Dt. ' & Format(Svdate,'dd-mmm-yyyy') AS Sbill, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection.B)=True))";
                //}

                dt.Rows.Clear();
                dt.Columns.Clear();
                Database.GetSqlData(sql, dt);
                DataRow[] drow;
                drow = dt.Select("Name='" + accnm + "' and Svdate>=#" + DateFrom.ToString(Database.dformat) + "# and Svdate<=#" + DateTo.ToString(Database.dformat) + "#", "Type,DocNumber");
                tdt.Clear();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {
                            tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                            tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                        }
                    }
                    tdt.Columns.Remove("Type");
                    tdt.Columns.Remove("Name");
                    tdt.DefaultView.Sort = "Svdate";
                    tdt = tdt.DefaultView.ToTable();

                }
                if (tdt.Rows.Count == 0)
                {

                    return false;
                }

                string[,] col = new string[2, 3] {
                {"Svdate", "1", "0" },
                {"DocNumber", "0", "1" } 
                };

                string[,] Cwidth = new string[8, 8] { 
                { "Svdate", "", "0","" ,"","","",""},
                { "DocNumber", "100", "0","" ,"","","","" },
                { "SBill", "150", "0","" ,"","","","" },
                { "Description", "250", "0","Total Amount" ,"","Amount","","" },
                { "Quantity", "100", "0","" ,"","","","" },
                { "Rate_am", "125", "0","" ,"","","","" },
                { "Packing", "125", "0" ,"" ,"","","",""},
                { "ItemAmount", "150", "0","|sum(ItemAmount)" ,"","|sum(ItemAmount)","","" }
                };
                CreateReport(tdt, col, Cwidth);
            }

           
            return true;
        }

        public bool BrokerDetailCustomerWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Broker Detail Customer Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Broker Detail Customer Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
           
            //if (Database.IsKacha== false)
            //{
                sql ="SELECT QryItemTranjection.Type, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.[Agent], QryItemTranjection.DocNumber, QryItemTranjection.Vdate, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount, QryItemTranjection.[Commission%], QryItemTranjection.[Commission@] FROM QryItemTranjection WHERE (((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";

            //}
            //else
            //{
            //    sql = "SELECT QryItemTranjection.Type, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.[CONTRACTOR.Name], QryItemTranjection.DocNumber, QryItemTranjection.Vdate, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount, QryItemTranjection.[Commission%], QryItemTranjection.[Commission@] FROM QryItemTranjection WHERE (((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Agent='" + accnm + "' and Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat)+access_sql.Hash + " and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+ " ", "Type,DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }

                    tdt.Rows[i]["Commission%"] = (double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * double.Parse(tdt.Rows[i]["Commission%"].ToString()) / 100);
                    tdt.Rows[i]["Commission@"] = (double.Parse(tdt.Rows[i]["Quantity"].ToString()) * double.Parse(tdt.Rows[i]["Commission@"].ToString()));

                }
                tdt.Columns.Remove("Type");
                tdt.Columns.Remove("Agent");
                tdt.DefaultView.Sort = "ACCOUNT.Name";
                tdt = tdt.DefaultView.ToTable();

            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
 
            {"ACCOUNT.Name", "1", "0" },
            {"DocNumber", "0", "1" }
            };



            string[,] Cwidth = new string[10, 8] { 
            { "ACCOUNT.Name", "", "0","" ,"","","","" },
            { "DocNumber", "150", "0","" ,"","" ,"",""},
            { "Vdate", "150", "0","" ,"","","","" },
            { "Description", "150", "0","Total amount" ,"","Doc. Amount","","" },
            { "Quantity", "100", "0","" ,"","","","" },
            { "Rate_am", "100", "0",""  ,"","","",""},
            { "Packing", "100", "0","" ,"","","","" },
            { "ItemAmount", "100", "0","|sum(Itemamount)" ,"","|sum(ItemAmount)","",""},
            { "Commission%", "75", "1",">sum([Commission%])"  ,"",">10>sum([Commission%])","",""},
            { "Commission@", "75", "1","|sum([Commission@])" ,"","|sum([Commission@])","",""}
            };



            CreateReport(tdt, col, Cwidth);
            return true;
        }


        public bool SalesManDetailCustomerWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "SalesMan Detail Customer Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "SalesMan Detail Customer Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            
                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.[SalesMan], QryItemTranjection.DocNumber, QryItemTranjection.Vdate, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + " AND (SalesMan = '"+accnm+"')))";

           
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ", "Type,DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }

                   
                }
                tdt.Columns.Remove("Type");
                tdt.Columns.Remove("SalesMan");
                tdt.DefaultView.Sort = "ACCOUNT.Name";
                tdt = tdt.DefaultView.ToTable();

            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
 
            {"ACCOUNT.Name", "1", "0" },
            {"DocNumber", "0", "1" }
            };



            string[,] Cwidth = new string[8, 8] { 
            { "ACCOUNT.Name", "", "0","" ,"","","","" },
            { "DocNumber", "200", "0","" ,"","" ,"",""},
            { "Vdate", "200", "0","" ,"","","","" },
            { "Description", "150", "0","Total amount" ,"","Doc. Amount","","" },
            { "Quantity", "100", "0","" ,"","","","" },
            { "Rate_am", "100", "0",""  ,"","","",""},
            { "Packing", "100", "0","" ,"","","","" },
            { "ItemAmount", "150", "0","|sum(Itemamount)" ,"","|sum(ItemAmount)","",""},
           
            };



            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool Productiondet(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Production Report";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Production Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            sql = "SELECT OTHER.Name AS Company, Description.Description, Description.Pack,SUM(dbo.Voucherdet.Quantity) as Qty,  SUM(dbo.Voucherdet.Quantity) * dbo.Description.Square_FT AS Ft, SUM(dbo.Voucherdet.Quantity) * dbo.Description.Square_MT AS MT FROM VOUCHERTYPE RIGHT OUTER JOIN  Voucherdet INNER JOIN  VOUCHERINFO ON Voucherdet.Vi_id = VOUCHERINFO.Vi_id ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id LEFT OUTER JOIN  OTHER RIGHT OUTER JOIN  Description ON OTHER.Oth_id = Description.Company_id ON Voucherdet.Des_ac_id = Description.Des_id WHERE (Voucherdet.Type = 'D') AND (VOUCHERINFO.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND   (VOUCHERINFO.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (VOUCHERTYPE." + Database.BMode + " = 1) GROUP BY OTHER.Name, Description.Description, Description.Pack , dbo.Description.Square_FT, dbo.Description.Square_MT  ORDER BY Company, Description.Description, Description.Pack ";
            dt = new DataTable();
            Database.GetSqlData(sql, dt);
           
            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
 
            {"Company", "1", "1" },
              {"Description", "0", "1" }
           
            };



            string[,] Cwidth = new string[6, 8] { 
            { "Company", "", "0","" ,"","","","" },
            { "Description", "400", "0","" ,"","" ,"",""},
            { "Pack", "100", "0","" ,"","","","" },
            { "Quantity", "100", "0","|sum(Qty)" ,"|sum(Qty)","|sum(Qty)","","" },
            { "Square_Ft", "200", "0","|sum(FT)" ,"|sum(FT)","|sum(FT)","","" },
            { "Square_Mt", "200", "0","|sum(MT)" ,"|sum(MT)","|sum(MT)","","" },
            };



            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool DetailedProduction(DateTime DateFrom, DateTime DateTo,string description)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Detailed Production Report";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = description;
            
            this.Text = frmptyp;
            DecsOfReport = "Detailed Production Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            sql = "SELECT  VOUCHERINFO.Vdate, Description.Pack, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, Voucherinfo.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber,SUM(Voucherdet.Quantity) AS Qty, SUM(Voucherdet.Quantity)  * Description.Square_FT AS Ft, SUM(Voucherdet.Quantity) * Description.Square_MT AS MT FROM VOUCHERTYPE RIGHT OUTER JOIN Voucherdet INNER JOIN  VOUCHERINFO ON Voucherdet.Vi_id = VOUCHERINFO.Vi_id ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id LEFT OUTER JOIN Description ON Voucherdet.Des_ac_id = Description.Des_id WHERE (Voucherdet.Type = 'D') AND (VOUCHERINFO.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND (VOUCHERTYPE."+Database.BMode+" = 1) AND  (Description.Description = '"+description+"') GROUP BY Description.Pack,  VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, Voucherinfo.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) , Description.Square_FT, Description.Square_MT, VOUCHERINFO.Vdate ORDER BY vdate";
           
            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[1, 3] {
 
            {"Vdate", "1", "1" },
             
           
            };



            string[,] Cwidth = new string[6, 8] { 
            { "Vdate", "", "0","" ,"","","","" },
            { "Pack", "150", "0","" ,"","","","" },
            { "DocNumber", "300", "0","" ,"","","","" },
            { "Quantity", "150", "0","|sum(Qty)" ,"|sum(Qty)","|sum(Qty)","","" },
            { "Square_Ft", "200", "0","|sum(FT)" ,"|sum(FT)","|sum(FT)","","" },
            { "Square_Mt", "200", "0","|sum(MT)" ,"|sum(MT)","|sum(MT)","","" },
            };



            CreateReport(dt, col, Cwidth);
            return true;
        }
        public bool CustomerDetailItemWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer Detail Item Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Customer Detail Item Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = " SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, [ACCOUNT.Name],QryItemTranjection.Vdate, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            //else
            //{
            //    sql = " SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, [ACCOUNT.Name],QryItemTranjection.Vdate,  QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            if (accnm == "")
            {
                drow = dt.Select("[Account.Name] is not null and Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "", "DocNumber");
            }
            else
            {
                drow = dt.Select("[Account.Name]='" + accnm + "' and Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+"", "DocNumber");
            }



            //    drow = dt.Select("Name='" + accnm + "' and Vdate>=#" + DateFrom.ToString(Database.dformat) + "# and Vdate<=#" + DateTo.ToString(Database.dformat) + "#", "DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;

                    }

                }
                tdt.Columns.Remove("Type");

                tdt.DefaultView.Sort = "OrgDescription,Packing";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            {"OrgDescription", "1", "0" },
            {"Packing", "0", "1" }};


            string[,] Cwidth = new string[9, 8] { 
            { "", "0", "0" ,"","","","",""},
            { "Description", "175", "0","","","" ,"",""},
            { "Name", "150", "0","" ,"","","",""},
            { "Vdate", "100", "0","","","","","" },
            { "DocNumber", "100", "0","" ,"","","",""},
            { "Description", "175", "0","Total Amount","","Amount","","" },
            { "Quantity", "100", "0","","","|sum(Quantity)","","" },
            { "Rate_am", "100", "0","","","","","" },
            { "ItemAmount", "100", "0","|sum(ItemAmount)","","|sum(ItemAmount)","","" },
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool BankBook(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;

            frmptyp = "BankBook";
            this.Text = frmptyp;
            DecsOfReport = "BankBook, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            //sql = "SELECT aman.Name,Vdate,DocNumber,'' as AccountName,Narr as Particular, aman.Dr,aman.Cr , ACCOUNT.Act_id as AccountType, Aman.Sno FROM (SELECT #2/1/1801# AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber, 0 as Sno FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr, 0 as Sno FROM (SELECT 0 AS sr, ACCOUNT.Name, ACCOUNT.Dr, ACCOUNT.Cr, 0 as Sno  From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr, QryJournal.Sno As Srno FROM QryJournal WHERE (((QryJournal.Vdate)<#" + DateFrom.ToString(Database.dformat) + "#)) GROUP BY QryJournal.Name, QryJournal.Sno) as X group by X.Name) As Y Union All SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name, JOURNAL.Dr, JOURNAL.Cr, JOURNAL.Narr, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, JOURNAL.Sno";
            //sql += " FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "#) AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id])))  AS aman LEFT JOIN ACCOUNT ON aman.Name = ACCOUNT.Name order by Aman.Sno,Aman.DocNumber";

            sql = "SELECT aman.Name,Vdate,DocNumber,'' as AccountName,Narr as Particular, aman.Dr,aman.Cr , ACCOUNT.Act_id as AccountType, Aman.Sno FROM (SELECT #2/1/1801# AS Vdate, 'OPN' AS [Short], 0 AS Vnumber, Y.Name, Y.Dr,Y.Cr, 'Opening Balance' AS Narr,' ' AS DocNumber, 0 as Sno FROM (SELECT X.Name, Sum(X.Dr) AS Dr, Sum(X.Cr) AS Cr, 0 as Sno FROM (SELECT 0 AS sr, ACCOUNT.Name, ";
            sql += " iif(ACCOUNT.Balance>0,ACCOUNT.Balance,0) AS Dr, iif(ACCOUNT.Balance<0,-1*(ACCOUNT.Balance),0) AS Cr,0 as Sno  From ACCOUNT Union ALL SELECT 1 AS sr, QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr, QryJournal.Sno As Srno FROM QryJournal WHERE (((QryJournal.Vdate)<#" + DateFrom.ToString(Database.dformat) + "#)) GROUP BY QryJournal.Name, QryJournal.Sno) as X group by X.Name) As Y Union All SELECT JOURNAL.Vdate, VOUCHERTYPE.Short, Voucherinfo.Vnumber, ACCOUNT.Name,  IIf(JOURNAL.Amount>0,JOURNAL.Amount,0) AS Dr, IIf(JOURNAL.Amount<0,-1*(JOURNAL.Amount),0) AS Cr, JOURNAL.Narr, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber, JOURNAL.Sno FROM JOURNAL, ACCOUNT, Voucherinfo, VOUCHERTYPE WHERE (((JOURNAL.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "#) AND ((JOURNAL.Ac_id)=[ACCOUNT].[Ac_id]) AND ((JOURNAL.Vi_id)=[VOUCHERINFO].[Vi_id]) AND ((Voucherinfo.Vt_id)=[VOUCHERTYPE].[Vt_id])))  AS aman LEFT JOIN ACCOUNT ON aman.Name = ACCOUNT.Name order by Aman.Sno,Aman.DocNumber";


            dt = new DataTable();
            Database.GetSqlData(sql, dt);


            int srno = 0;
            DataRow[] drow;
            drow = dt.Select("Name='" + accnm + "' and Vdate<=#" + DateTo.ToString(Database.dformat) + "#");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt.Columns.Remove("AccountType");
                tdt.DefaultView.Sort = "Vdate";
                tdt.Columns.Add("RunningBalance", typeof(decimal));
                tdt.Columns.Add("Dr/Cr", typeof(string));
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (dt.Select("DocNumber='" + tdt.Rows[i]["DocNumber"] + "' and Sno='" + tdt.Rows[i]["Sno"] + "' and Name<>'" + accnm + "' ").Length == 0)
                    {
                        tdt.Rows[i]["AccountName"] = "";
                    }
                    else
                    {
                        tdt.Rows[i]["AccountName"] = dt.Select("DocNumber='" + tdt.Rows[i]["DocNumber"] + "' and Sno='" + tdt.Rows[i]["Sno"] + "' and Name<>'" + accnm + "' ")[0]["Name"];
                    }

                   // tdt.Rows[i]["AccountName"] = dt.Select("DocNumber='" + tdt.Rows[i]["DocNumber"] + "' and Sno='" + tdt.Rows[i]["Sno"] + "' and Name<>'" + accnm + "' ")[0]["Name"];
                    if (tdt.Rows[i]["DocNumber"].ToString() == " ")
                    {
                        tdt.Rows[i]["AccountName"] = "";
                    }

                    totdr += double.Parse(tdt.Rows[i]["Dr"].ToString());
                    totcr += double.Parse(tdt.Rows[i]["Cr"].ToString());
                    if (totdr > totcr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totdr - totcr;
                        tdt.Rows[i]["Dr/Cr"] = "Dr.";
                    }
                    else if (totcr > totdr)
                    {
                        tdt.Rows[i]["RunningBalance"] = totcr - totdr;
                        tdt.Rows[i]["Dr/Cr"] = "Cr.";
                    }
                    else
                    {
                        tdt.Rows[i]["RunningBalance"] = "0";
                    }

                    if (DateTime.Parse(tdt.Rows[i]["Vdate"].ToString()).Year.ToString() == "1801")
                    {
                        tdt.Rows[i]["AccountName"] = "";
                        tdt.Rows[i]["Dr"] = 0;
                        tdt.Rows[i]["Cr"] = 0;
                    }


                }

                tdt.Columns.Remove("Sno");

            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] { { "Name", "1", "0" }, { "Vdate", "1", "1" } };

            string[,] Cwidth = new string[9, 6] { 
            { "Name", "0", "0","","","" },
            { "Vdate", "0", "0","","","" },
            { "Documant No.", "150", "0","","","" },
            { "AccountName", "250", "1" ,"","",""},
            { "Particular", "200", "0","Total Amount","","Day Total" },
            { "Amount Dr.", "120", "1","|sum(Dr)","","|sum(Dr)" },
            { "Amount Cr.", "120", "1" ,"|sum(Cr)","","|sum(Cr)"},
            
            { "Running Balance", "120", "0","","","^sum(Dr)-sum(Cr)" }, 
            { "Dr./Cr.", "40", "0","","","" } };
            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool NewBook(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;

            frmptyp = "NewBook";
            this.Text = frmptyp;
            DecsOfReport = "NewBook, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);

            //sql = "SELECT ACCOUNT.Name, VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber,ACCOUNT_1.Name as OppAcc,Journal_1.Amount ,iif(Journal_1.Amount>0,Journal_1.Amount,0) as Dr,iif(Journal_1.Amount<0,Journal_1.Amount,0) as Cr FROM ((((Journal LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Journal AS Journal_1 ON VOUCHERINFO.Vi_id = Journal_1.Vi_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal_1.Ac_id = ACCOUNT_1.Ac_id WHERE (((ACCOUNT.Name)='" + textBox1.Text + "') AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((Journal_1.Ac_id)<>[Journal].[Ac_id]))";
            sql = "SELECT ACCOUNT.Name, VOUCHERINFO.Vdate, VOUCHERTYPE.Short & ' ' & Format(JOURNAL.Vdate,'yyyymmdd' & ' ' & VOUCHERINFO.Vnumber) AS DocNumber,ACCOUNT_1.Name as OppAcc,Journal_1.Amount FROM ((((Journal LEFT JOIN ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id) LEFT JOIN VOUCHERINFO ON Journal.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Journal AS Journal_1 ON VOUCHERINFO.Vi_id = Journal_1.Vi_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal_1.Ac_id = ACCOUNT_1.Ac_id WHERE (((ACCOUNT.Name)='" + textBox1.Text + "') AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((Journal_1.Ac_id)<>[Journal].[Ac_id]))";

            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            dt.Columns.Add("DrAcc",typeof(decimal));
            dt.Columns.Add("CrAcc", typeof(decimal));

            dt.Columns.Add("Dr", typeof(decimal));
            dt.Columns.Add("Cr", typeof(decimal));
           

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (double.Parse(dt.Rows[i]["Amount"].ToString()) > 0)
                {
                    dt.Rows[i]["DrAcc"] = dt.Rows[i]["Amount"].ToString();
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                    dt.Rows[i]["CrAcc"] = 0;
                    //dt.Rows[i]["Cr"] = -1 * (double.Parse(dt.Rows[i]["Dr"].ToString()));
                }
                else
                {
                    double amt = -1 * double.Parse(dt.Rows[i]["Amount"].ToString());
                    dt.Rows[i]["CrAcc"] = amt;
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                    dt.Rows[i]["DrAcc"] = 0;
                }
            }

            dt.Columns["DrAcc"].SetOrdinal(4);
            dt.Columns["CrAcc"].SetOrdinal(5);

            dt.Columns["Dr"].SetOrdinal(6);
            dt.Columns["Cr"].SetOrdinal(7);
            
            dt.Columns.Remove("Name");
            dt.Columns.Remove("Amount");

            if (dt.Rows.Count == 0)
            {
                return false;
            }


            string[,] col = new string[2, 3] { {"Vdate", "1", "1" }, {"Docnumber", "1", "0" }};
            string[,] Cwidth = new string[7, 8] { 
            { "Vdate", "0", "0","","","","" ,""},
            { "Document No.", "0", "0","","","","","" },
            { "AccountName", "400", "1" ,"","","","",""},
            { "DrAcc", "150", "1" ,"","|sum(DrAcc)","","",""},
            { "CrAcc", "150", "1","","|sum(CrAcc)","","","" },
            { "Amount(Dr.)", "150", "1","","","","","|sum(CrAcc)" },
            { "Amount(Cr.)", "150", "1","","","","","|sum(DrAcc)" },
          
            };
            CreateReport(dt, col, Cwidth);
            return true;
        }


        public bool CashReport(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Cash Report";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Cash Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
           
            if (Database.IsKacha == false)
            {
                sql = " SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.Vdate, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount, QryItemTranjection.Formno FROM QryItemTranjection WHERE (((QryItemTranjection.Short)='SLC' Or (QryItemTranjection.Short)='REC') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "));";
            }
            else
            {
                sql = " SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.Vdate, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount, QryItemTranjection.Formno FROM QryItemTranjection WHERE (((QryItemTranjection.Short)='SLC' Or (QryItemTranjection.Short)='REC') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";
            }

            dt.Clear();

            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Formno='" + accnm + "' and Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+ " and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;

                    }

                }
                tdt.Columns.Remove("Type");
                tdt.Columns.Remove("Account.Name");
                tdt.Columns.Remove("Formno");
                tdt.DefaultView.Sort = "OrgDescription,Packing";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
          

            string[,] col = new string[2, 3] {
            {"OrgDescription", "1", "0" },
            {"Packing", "0", "1" }};


            string[,] Cwidth = new string[8, 8] { 
            { "", "0", "0" ,"","","","",""},
            { "Description", "225", "0","" ,"","","",""},
            { "Vdate", "75", "0","","","" ,"",""},
            { "DocNumber", "125", "0","" ,"","","",""},
            { "Description", "225", "0","Total Amount","","Amount","","" },
            { "Quantity", "100", "0","","","|sum(Quantity)","","" },
            { "Rate_am", "100", "0","","","","","" },
            { "ItemAmount", "150", "0","|sum(ItemAmount)","","|sum(ItemAmount)","","" },
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }


        public bool CompanyWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Company Wise Report";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Company Wise Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            
            //if (Database.IsKacha == false)
            //{
                sql = " SELECT QryItemTranjection.Type, QryItemTranjection.Vdate, QryItemTranjection.DocNumber,  QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Packing,  QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount, QryItemTranjection.Company FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            //else
            //{
            //    sql = " SELECT QryItemTranjection.Type, QryItemTranjection.Vdate, QryItemTranjection.DocNumber,  QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Packing,  QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount, QryItemTranjection.Company FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Company='" + accnm + "' and Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }
                }
                tdt.Columns.Remove("Type");
                tdt.Columns.Remove("Company");
                tdt.DefaultView.Sort = "Vdate,DocNumber";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            {"Vdate", "1", "0" },
            {"DocNumber", "0", "1" }};


            string[,] Cwidth = new string[8, 8] { 
            { "Vdate", "", "0","" ,"","","",""},
            { "DocNumber", "100", "0","" ,"","","",""},
            { "Name", "300", "0","","","","","" },
            { "Description", "200", "0","Total Amount" ,"","Amount","",""},
            { "Packing", "100", "0","" ,"","","",""},
            { "Quantity", "100", "0","","","","","" },
            { "Rate_am", "100", "0","","","","","" },
            { "ItemAmount", "100", "0","|sum(ItemAmount)","","|sum(ItemAmount)","","" },
            };


            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool AnnexureA(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "AnnexureA";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "AnnexureA, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            
            if (Database.IsKacha== false)
            {

               
                //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1 as Address, ACCOUNT.Address2 as City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name,    Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty, Voucherdet.Rate_Unit as Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt";
                //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id";
                //sql += " GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Voucherdet.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.A, VOUCHERTYPE.ExState, VOUCHERTYPE.Unregistered HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.ExState)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Unregistered)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";

                sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2)  AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.A, VOUCHERTYPE.ExState, VOUCHERTYPE.Unregistered HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.ExState)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Unregistered)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

               
            }
            else
            {
                //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1  as Address, ACCOUNT.Address2 as City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty,Voucherdet.Rate_Unit As Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxableamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt";
                //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id)  ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Vi_id = ITEMTAX.Vi_id) AND (VOUCHERDET.Itemsr = ITEMTAX.Itemsr)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id";
                //sql += " GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Voucherdet.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B, VOUCHERTYPE.ExState, VOUCHERTYPE.Unregistered HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.ExState)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Unregistered)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

                sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2)  AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B, VOUCHERTYPE.ExState, VOUCHERTYPE.Unregistered HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.ExState)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Unregistered)=" + access_sql.Singlequote + "False" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

               
            }

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat)+access_sql.Hash + " and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) +access_sql.Hash +"");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                 tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
              
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Vnumber");
            tdt.Columns.Remove("Vdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[15, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "Name", "200", "0","" ,"","","",""},
            { "Address", "250", "0","" ,"","","",""},
            { "City", "100", "0","" ,"","","",""},
            { "Tin_Number", "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","","","" },
            { "Category Code", "150", "0","","","","","" },
            { "Category Name", "200", "0","","","","","" },
            { "Qty", "100", "0","","","","","" },
            { "Unit", "50", "0","","","","","" },
            { "Taxable Amount", "150", "0","Grand Total","Total","","","" },
            { taxname1, "100", "0","","","" ,"",""},
            { taxname2, "100", "0","","","" ,"",""},
            { "Amount", "150", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","" ,"",""},
           
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool B2BInterState(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "B2BInterState";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "B2BInterState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{


                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.Tottaxper AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Composition Dealer' Or (ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.Tottaxper, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";
               // sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, Voucherdet.Tottaxper as [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty,  Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST, Sum(VOUCHERDET.taxamt3) AS IGST, Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id)  LEFT JOIN State ON ACCOUNT.State_id = State.State_id WHERE (((ACCOUNT.RegStatus)='Composition Dealer')) OR (((ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate,Voucherdet.Tottaxper,  VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";


            //}
            //else
            //{

            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.Tottaxper AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Composition Dealer' Or (ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.Tottaxper, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";

            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;

                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

          
           
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[14, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "300", "0","" ,"","","",""},
            { "GSTIN", "175", "0","","","","","" },
            { "State", "175", "0","" ,"","","",""},
           
           
            { "Invoice No", "200", "0","" ,"","","",""},
            { "Voucher Date", "200", "0","","","","","" },
            { "TaxSlab%", "150", "0","Grand Total","Total","","","" },
            
            { "Qty", "100", "0","","","","","" },
           
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "150", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool B2BIntraState(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "B2BIntraState";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "B2BIntraState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            

                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS GSTIN, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Regular Registration' Or (ACCOUNT.RegStatus)='Composition Dealer')) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A, VOUCHERINFO.Shipto HAVING (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

                //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name,  ACCOUNT.Tin_number as GSTIN,State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate,VOUCHERDET.TotTaxPer as [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty,  Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST, Sum(VOUCHERDET.taxamt3) AS IGST, Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id)  LEFT JOIN State ON ACCOUNT.State_id = State.State_id WHERE (((ACCOUNT.RegStatus)='Regular Registration')) or (((ACCOUNT.RegStatus)='Composition Dealer'))  GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Tin_number ,State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer,  VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";


           
            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Sname");
           
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[13, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
            { "GSTIN", "200", "0","" ,"","","",""},
          
            { "Invoice No", "200", "0","" ,"","","",""},
            { "Voucher Date", "200", "0","","","","","" },
            { "TaxSlab%", "150", "0","Grand Total","Total","","","" },
            
            { "Qty", "100", "0","","","","","" },
           
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool B2CInterState(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "B2CInterState";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "B2CInterState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{


                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
               

            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //    
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

           
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[13, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
            { "State", "250", "0","" ,"","","",""},
            { "Invoice No", "200", "0","" ,"","","",""},
            { "Voucher Date", "200", "0","","","","","" },
            { "TaxSlab%", "150", "0","Grand Total","Total","","","" },
           
            { "Qty", "100", "0","","","","","" },
          
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool B2CDaily(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Daily B2C";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Daily B2C Report, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{


            sql = "SELECT VOUCHERTYPE.Type,VOUCHERINFO.Vdate,  State.Sname, Voucherdet.TotTaxPer AS [TaxSlab%],   SUM( Voucherdet.Pvalue * Voucherdet.Quantity) AS Qty, SUM( Voucherdet.Taxabelamount) AS ItemTaxable, SUM( Voucherdet.taxamt3) AS IGST,   SUM( Voucherdet.taxamt1) AS CGST, SUM( Voucherdet.taxamt2) AS SGST, SUM( Voucherdet.taxamt4) AS Cess, SUM( Voucherdet.Taxabelamount)   + SUM( Voucherdet.taxamt1) + SUM( Voucherdet.taxamt2) + SUM( Voucherdet.taxamt3) + SUM( Voucherdet.taxamt4) AS VoucherNetAmt FROM VOUCHERINFO LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id RIGHT OUTER JOIN  Voucherdet LEFT OUTER JOIN  Description ON Voucherdet.Des_ac_id = Description.Des_id ON VOUCHERINFO.Vi_id = Voucherdet.Vi_id LEFT OUTER JOIN  ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id LEFT OUTER JOIN  State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE ( ACCOUNT.RegStatus = 'Unregistered') GROUP BY VOUCHERTYPE.Type, State.Sname, VOUCHERINFO.Vdate, Voucherdet.TotTaxPer, VOUCHERTYPE.A HAVING ( VOUCHERTYPE." + Database.BMode + " = 'True') ORDER BY VOUCHERINFO.Vdate";


            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //    
            //}

            dt = new DataTable();

            Database.GetSqlData(sql, dt);

            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }


            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" }, { "Vdate", "0", "1" }
            };

            string[,] Cwidth = new string[11, 8] { 
            { "Type", "", "0","","","","","" },
            { "Voucher Date", "100", "0" ,"","","","",""},
           
            { "State", "150", "0","" ,"","","",""},
           
           
            { "TaxSlab%", "75", "0","Grand Total","Total","","","" },
           
            { "Qty", "75", "0","","","","","" },
          
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","|sum(ItemTaxable)","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","|sum(IGST)","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","|sum(CGST)","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","|sum(SGST)","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","|sum(Cess)","","" },
            { "Amount", "100", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","" },
           
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }


        public bool PUnRegisteredIntra(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PUnRegisteredIntra";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Unregistered IntraState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";

               
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
                
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt.DefaultView.Sort="Svdate,vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
           
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[13, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
           
           
            { "Svnum", "250", "0","" ,"","","",""},
            { "SV Date", "125", "0","","","","","" },
            { "VDate", "125", "0","","","","","" },
            { "TaxSlab%", "200", "0","Grand Total","Total","","","" },
           
            { "Qty", "150", "0","","","","","" },
          
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool PUnRegisteredInter(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PUnRegisteredInter";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Unregistered InterState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
                
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
                
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Svdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt.DefaultView.Sort = "Svdate,Vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[14, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
            { "StateName", "250", "0","" ,"","","",""},
           
            { "Svnum", "150", "0","" ,"","","",""},
            { "SV Date", "100", "0","","","","","" },
            { "VDate", "100", "0","","","","","" },
            { "TaxSlab%", "100", "0","Grand Total","Total","","","" },
           
            { "Qty", "150", "0","","","","","" },
           
             { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
             { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","" ,"",""},
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","" ,"",""},
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool PRegisteredInter(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PRegisteredInter";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Registered InterState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
                
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
               
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt.DefaultView.Sort = "Svdate,Vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[15, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "300", "0","" ,"","","",""},
            { "GSTIN", "150", "0","" ,"","","",""},
            { "StateName", "200", "0","" ,"","","",""},
           
            { "Svnum", "150", "0","" ,"","","",""},
            { "SV Date", "100", "0","","","","","" },
            { "VDate", "100", "0","","","","","" },
            { "TaxSlab%", "100", "0","Grand Total","Total","","","" },
           
            { "Qty", "100", "0","","","","","" },
            
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool PCompositionInter(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PCompositionInter";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Composition Dealer InterState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Composition Dealer')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
               
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Composition Dealer')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, State.Sname, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)<>'" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
               
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt.DefaultView.Sort = "Svdate,Vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[15, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "300", "0","" ,"","","",""},
            { "GSTIN", "150", "0","" ,"","","",""},
            { "StateName", "200", "0","" ,"","","",""},
           
            { "Svnum", "150", "0","" ,"","","",""},
            { "SV Date", "100", "0","","","","","" },
            { "VDate", "100", "0","","","","","" },
            { "TaxSlab%", "150", "0","Grand Total","Total","","","" },
        
            { "Qty", "100", "0","","","","","" },
            
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool PRegisteredIntra(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PRegisteredIntra";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Registered IntraState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
             
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
            //    //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Tin_number as TIN,VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, Voucherdet.TotTaxPer as [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty,  Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST, Sum(VOUCHERDET.taxamt3) AS IGST, Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN State ON ACCOUNT.State_id = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Regular Registration')) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, Voucherdet.TotTaxPer,  VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt.DefaultView.Sort = "Svdate,Vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[14, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
            { "GSTIN", "200", "0","" ,"","","",""},
           
            { "Svnum", "200", "0","" ,"","","",""},
            { "SV Date", "100", "0","","","","","" },
            { "VDate", "100", "0","","","","","" },
            { "TaxSlab%", "100", "0","Grand Total","Total","","","" },
           
            { "Qty", "150", "0","","","","","" },
       
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool PCompositionIntra(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PCompositionIntra";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Composition Dealer IntraState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Composition Dealer')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
               
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number AS TIN, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((ACCOUNT.RegStatus)='Composition Dealer')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber";
               
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and sVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("SVdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and SVdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt.DefaultView.Sort = "Svdate,Vdate";
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[14, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
            { "GSTIN", "200", "0","" ,"","","",""},
           
            { "Svnum", "150", "0","" ,"","","",""},
            { "SV Date", "100", "0","","","","","" },
            { "VDate", "100", "0","","","","","" },
            { "TaxSlab%", "150", "0","Grand Total","Total","","","" },
           
            { "Qty", "150", "0","","","","","" },
          
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","" ,"",""},
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","" ,"",""},
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","" ,"",""},
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","" ,"",""},
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }

        public bool HSNPur(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "HSN Summary Purchase";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "HSN Summary-Purchase, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name AS Cat_Name, VOUCHERDET.Rate_Unit, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Quantity,   Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt3+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2) AS Totalamount, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS taxamt3, Sum(VOUCHERDET.taxamt1) AS taxamt1, Sum(VOUCHERDET.taxamt2) AS taxamt2, Sum(VOUCHERDET.taxamt4) AS taxamt4, VOUCHERTYPE.Type FROM ((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN VOUCHERDET ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERTYPE.A, VOUCHERTYPE.Type HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='P Return')) ORDER BY TAXCATEGORY.Commodity_Code";
               
            //}
            //else
            //{
            //    sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name AS Cat_Name, VOUCHERDET.Rate_Unit, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Quantity,   Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt3+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2) AS Totalamount, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS taxamt3, Sum(VOUCHERDET.taxamt1) AS taxamt1, Sum(VOUCHERDET.taxamt2) AS taxamt2, Sum(VOUCHERDET.taxamt4) AS taxamt4, VOUCHERTYPE.Type FROM ((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN VOUCHERDET ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERTYPE.B, VOUCHERTYPE.Type HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='P Return')) ORDER BY TAXCATEGORY.Commodity_Code";
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }





            tdt = new DataTable();
            tdt.Columns.Add("Commodity_Code", typeof(string));
            tdt.Columns.Add("Cat_Name", typeof(string));
            tdt.Columns.Add("Rate_Unit", typeof(string));
            tdt.Columns.Add("Qty", typeof(decimal));
            tdt.Columns.Add("Totalamount", typeof(decimal));

            tdt.Columns.Add("ItemTaxable", typeof(decimal));
            tdt.Columns.Add("taxamt3", typeof(decimal));
            tdt.Columns.Add("taxamt2", typeof(decimal));
            tdt.Columns.Add("taxamt1", typeof(decimal));
            tdt.Columns.Add("taxamt4", typeof(decimal));


            for (int i = 0; i < dt.Rows.Count; i++)
            {


                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["Quantity"] = double.Parse(dt.Rows[i]["Quantity"].ToString()) * -1;
                    dt.Rows[i]["Totalamount"] = double.Parse(dt.Rows[i]["Totalamount"].ToString()) * -1;
                    dt.Rows[i]["ItemTaxable"] = double.Parse(dt.Rows[i]["ItemTaxable"].ToString()) * -1;
                    dt.Rows[i]["taxamt3"] = double.Parse(dt.Rows[i]["taxamt3"].ToString()) * -1;
                    dt.Rows[i]["taxamt2"] = double.Parse(dt.Rows[i]["taxamt2"].ToString()) * -1;
                    dt.Rows[i]["taxamt1"] = double.Parse(dt.Rows[i]["taxamt1"].ToString()) * -1;
                    dt.Rows[i]["taxamt4"] = double.Parse(dt.Rows[i]["taxamt4"].ToString()) * -1;

                }
            }
            dt.Columns.Remove("Type");
            dt = dt.DefaultView.ToTable();


            DataTable tdt1 = new DataTable();
            tdt1 = dt.DefaultView.ToTable(true, "Commodity_Code", "Cat_Name", "Rate_Unit");


            for (int i = 0; i < tdt1.Rows.Count; i++)
            {


                tdt.Rows.Add();
                tdt.Rows[i]["Commodity_Code"] = tdt1.Rows[i]["Commodity_Code"].ToString();
                tdt.Rows[i]["Cat_Name"] = tdt1.Rows[i]["Cat_Name"].ToString();
                tdt.Rows[i]["Rate_Unit"] = tdt1.Rows[i]["Rate_Unit"].ToString();
                double qty = 0, taxableamt = 0, totalamount = 0, taxamt1, taxamt2, taxamt3 = 0, taxamt4 = 0;
                qty = double.Parse(dt.Compute("sum(Quantity)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                totalamount = double.Parse(dt.Compute("sum(Totalamount)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                taxableamt = double.Parse(dt.Compute("sum(ItemTaxable)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                taxamt3 = double.Parse(dt.Compute("sum(taxamt3)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                taxamt2 = double.Parse(dt.Compute("sum(taxamt2)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                taxamt1 = double.Parse(dt.Compute("sum(taxamt1)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                taxamt4 = double.Parse(dt.Compute("sum(taxamt4)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());


                tdt.Rows[i]["Qty"] = qty;
                tdt.Rows[i]["Totalamount"] = totalamount;
                tdt.Rows[i]["ItemTaxable"] = taxableamt;

                tdt.Rows[i]["taxamt3"] = taxamt3;
                tdt.Rows[i]["taxamt2"] = taxamt2;
                tdt.Rows[i]["taxamt1"] = taxamt1;
                tdt.Rows[i]["taxamt4"] = taxamt4;
            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[10, 8] { 
            { "HSN Code", "100", "0" ,"","","","",""},
            { "HSN Name", "150", "0","" ,"","","",""},
            
            { "UOC", "150", "0","","","","","" },
            { "Quantity", "100", "0","","","","","" },
            { "Amount", "100", "0","|sum(Totalamount)","|sum(Totalamount)","" ,"",""},
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "75", "0","|sum(taxamt3)","|sum(taxamt3)","" ,"",""},
            { taxname1, "75", "0","|sum(taxamt1)","|sum(taxamt1)","","","" },
            { taxname2, "75", "0","|sum(taxamt2)","|sum(taxamt2)","" ,"",""},
            { taxname4, "75", "0","|sum(taxamt4)","|sum(taxamt4)","","","" }
           
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }



        public bool HSNSale(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "HSN Summary Sale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "HSN Summary-Sale, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
              
              
                sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name AS Cat_Name, VOUCHERDET.Rate_Unit, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Quantity, Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt3+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2) AS Totalamount, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS taxamt3, Sum(VOUCHERDET.taxamt1) AS taxamt1, Sum(VOUCHERDET.taxamt2) AS taxamt2, Sum(VOUCHERDET.taxamt4) AS taxamt4, VOUCHERTYPE.Type FROM ((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN VOUCHERDET ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERTYPE.A, VOUCHERTYPE.Type HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Return')) ORDER BY TAXCATEGORY.Commodity_Code";
            //}
            //else
            //{
            //    sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name AS Cat_Name, VOUCHERDET.Rate_Unit, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Quantity, Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt3+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2) AS Totalamount, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS taxamt3, Sum(VOUCHERDET.taxamt1) AS taxamt1, Sum(VOUCHERDET.taxamt2) AS taxamt2, Sum(VOUCHERDET.taxamt4) AS taxamt4, VOUCHERTYPE.Type FROM ((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN VOUCHERDET ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERTYPE.B, VOUCHERTYPE.Type HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ") AND ((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Return')) ORDER BY TAXCATEGORY.Commodity_Code";
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            tdt = new DataTable();
            tdt.Columns.Add("Commodity_Code", typeof(string));
            tdt.Columns.Add("Cat_Name", typeof(string));
            tdt.Columns.Add("Rate_Unit", typeof(string));
            tdt.Columns.Add("Qty", typeof(decimal));
            tdt.Columns.Add("Totalamount", typeof(decimal));

            tdt.Columns.Add("ItemTaxable", typeof(decimal));
            tdt.Columns.Add("taxamt3", typeof(decimal));
            tdt.Columns.Add("taxamt2", typeof(decimal));
            tdt.Columns.Add("taxamt1", typeof(decimal));
            tdt.Columns.Add("taxamt4", typeof(decimal));

           
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                   

                    if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        dt.Rows[i]["Quantity"] = double.Parse(dt.Rows[i]["Quantity"].ToString()) * -1;
                        dt.Rows[i]["Totalamount"] = double.Parse(dt.Rows[i]["Totalamount"].ToString()) * -1;
                        dt.Rows[i]["ItemTaxable"] = double.Parse(dt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        dt.Rows[i]["taxamt3"] = double.Parse(dt.Rows[i]["taxamt3"].ToString()) * -1;
                        dt.Rows[i]["taxamt2"] = double.Parse(dt.Rows[i]["taxamt2"].ToString()) * -1;
                        dt.Rows[i]["taxamt1"] = double.Parse(dt.Rows[i]["taxamt1"].ToString()) * -1;
                        dt.Rows[i]["taxamt4"] = double.Parse(dt.Rows[i]["taxamt4"].ToString()) * -1;
                      
                    }
                }
                dt.Columns.Remove("Type");
                dt = dt.DefaultView.ToTable();


                DataTable tdt1 = new DataTable();
                tdt1 = dt.DefaultView.ToTable(true, "Commodity_Code", "Cat_Name","Rate_Unit");


                for (int i = 0; i < tdt1.Rows.Count; i++)
                {
                   

                    tdt.Rows.Add();
                    tdt.Rows[i]["Commodity_Code"] = tdt1.Rows[i]["Commodity_Code"].ToString();
                    tdt.Rows[i]["Cat_Name"] = tdt1.Rows[i]["Cat_Name"].ToString();
                    tdt.Rows[i]["Rate_Unit"] = tdt1.Rows[i]["Rate_Unit"].ToString();
                    double qty = 0, taxableamt = 0, totalamount = 0, taxamt1, taxamt2, taxamt3 = 0, taxamt4 = 0;
                    qty = double.Parse(dt.Compute("sum(Quantity)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                    totalamount = double.Parse(dt.Compute("sum(Totalamount)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                    taxableamt = double.Parse(dt.Compute("sum(ItemTaxable)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                    taxamt3= double.Parse(dt.Compute("sum(taxamt3)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                    taxamt2 = double.Parse(dt.Compute("sum(taxamt2)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                    taxamt1 = double.Parse(dt.Compute("sum(taxamt1)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());
                    taxamt4 = double.Parse(dt.Compute("sum(taxamt4)", "Commodity_Code='" + tdt.Rows[i]["Commodity_Code"].ToString() + "' And Cat_Name='" + tdt.Rows[i]["Cat_Name"].ToString() + "' And Rate_Unit='" + tdt.Rows[i]["Rate_Unit"].ToString() + "'").ToString());


                    tdt.Rows[i]["Qty"] = qty;
                    tdt.Rows[i]["Totalamount"] = totalamount;
                    tdt.Rows[i]["ItemTaxable"] = taxableamt;

                    tdt.Rows[i]["taxamt3"] = taxamt3;
                    tdt.Rows[i]["taxamt2"] = taxamt2;
                    tdt.Rows[i]["taxamt1"] = taxamt1;
                    tdt.Rows[i]["taxamt4"] = taxamt4;
                }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[10, 8] { 
            { "HSN Code", "100", "0" ,"","","","",""},
            { "HSN Name", "150", "0","Total" ,"","","",""},
            
            { "UOC", "150", "0","","","","","" },
            { "Quantity", "100", "0","","","","","" },
            { "Amount", "100", "0","|sum(Totalamount)","|sum(Totalamount)","","","" },
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "75", "0","|sum(taxamt3)","|sum(taxamt3)","","","" },
            { taxname1, "75", "0","|sum(taxamt1)","|sum(taxamt1)","","","" },
            { taxname2, "75", "0","|sum(taxamt2)","|sum(taxamt2)","" ,"",""},
            { taxname4, "75", "0","|sum(taxamt4)","|sum(taxamt4)","","","" }
           
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }


       
        public bool B2CIntraState(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "B2CIntraState";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "B2CIntraState, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{


                sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
                

            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer AS [TaxSlab%], Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS IGST,Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST,  Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id) LEFT JOIN State ON VOUCHERINFO.ShiptoStateid = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered')) GROUP BY VOUCHERTYPE.Type, VOUCHERINFO.Shipto, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //    //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate,Voucherdet.TotTaxPer as [TaxSlab%] ,Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty,  Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS CGST, Sum(VOUCHERDET.taxamt2) AS SGST, Sum(VOUCHERDET.taxamt3) AS IGST, Sum(VOUCHERDET.taxamt4) AS Cess, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) RIGHT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN State ON ACCOUNT.State_id = State.State_id WHERE (((ACCOUNT.RegStatus)='Unregistered'))  GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, State.Sname, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate,Voucherdet.TotTaxPer,VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((State.Sname)='" + funs.Select_state_nm(Database.CompanyState_id) + "') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";


            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "").Length <= 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();

                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["CGST"] = double.Parse(tdt.Rows[i]["CGST"].ToString()) * -1;
                        tdt.Rows[i]["SGST"] = double.Parse(tdt.Rows[i]["SGST"].ToString()) * -1;
                        tdt.Rows[i]["IGST"] = double.Parse(tdt.Rows[i]["IGST"].ToString()) * -1;
                        tdt.Rows[i]["Cess"] = double.Parse(tdt.Rows[i]["Cess"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            tdt.Columns.Remove("Sname");
           
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[12, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "ShipTo", "350", "0","" ,"","","",""},
           
           
            { "Invoice No", "250", "0","" ,"","","",""},
            { "Voucher Date", "250", "0","","","","","" },
            { "TaxSlab%", "200", "0","Grand Total","Total","","","" },
           
            { "Qty", "100", "0","","","","","" },
           
            { "Taxable Amount", "250", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            { taxname3, "100", "0","|sum(IGST)","|sum(IGST)","","","" },
            { taxname1, "100", "0","|sum(CGST)","|sum(CGST)","","","" },
            { taxname2, "100", "0","|sum(SGST)","|sum(SGST)","","","" },
            
            { taxname4, "100", "0","|sum(Cess)","|sum(Cess)","","","" },
            { "Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
           
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }
        
        public bool  PurchaseRegisterTax(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Purchase Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Register Tax Slab Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
          
         
            //if (Database.IsKacha == false)
            //{

                
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer AS [Rate%], Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty,  Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable,Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount," + access_sql.fnstring("ACCOUNT_1.Name Is Null", "'<MAIN>'", "ACCOUNT_1.Name") + " AS Godown FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id)  LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer , VOUCHERINFO.Vnumber, VOUCHERTYPE." + Database.BMode + ", ACCOUNT_1.Name HAVING (((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

            //}
            //else
            //{



            //   // sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2) +Sum(VOUCHERDET.taxamt3) + Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.TotTaxPer AS [Rate%], Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount," + access_sql.fnstring("ACCOUNT_1.Name Is Null", "'<MAIN>'", "ACCOUNT_1.Name") + " AS Godown FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id)  LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B, ACCOUNT_1.Name HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ").Length < 0)
            {
                return false;
            }


            DataRow[] drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+"");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }

                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Invoiceno");
            tdt.Columns.Remove("Vdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = ""; ;
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
            }

            


            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[15,8] { 
            { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Name", "350", "0","" ,"","","",""},
            {  tintext, "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","","","" },
           
            { "Tax%", "150", "0","Grand Total","Total","","","" },
            { "Qty", "100", "0","|sum(Qty)","|sum(Qty)","","","" },
          
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },
            
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "150", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" },
            { "Godown", "100", "0","","","","","" },
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }



        public bool PurchaseRegisterHsnNew(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Purchase Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Register, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.TotTaxPer AS [Rate%],Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2) +Sum(VOUCHERDET.taxamt3) + Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name,VOUCHERDET.TotTaxPer, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE."+Database.BMode+" HAVING (((VOUCHERTYPE."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.TotTaxPer AS [Rate%],Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2) +Sum(VOUCHERDET.taxamt3) + Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name,VOUCHERDET.TotTaxPer, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }

            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Vnumber");
            tdt.Columns.Remove("Vdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[18, 8] { 
            { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Name", "300", "0","" ,"","","",""},
            { tintext, "150", "0","","","","","" },
            { "Voucher No", "100", "0","" ,"","","",""},
            { "Voucher Date", "100", "0","","","","","" },
            {CCode, "150", "0","","","","","" },
            { CName, "200", "0","Grand Total","Total","","","" },
            { "TaxSlab", "100", "0","","","","","" },
            { "Qty", "100", "0","|sum(Qty)","|sum(Qty)","","","" },
            { "Unit", "150", "0","","","","","" },
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },
            
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "100", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" },
             { "Godown", "100", "0","","","","","" },
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool PurchaseRegisterHsn(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Purchase Register HSN";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Purchase Register HSN Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{



            sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2) +Sum(VOUCHERDET.taxamt3) + Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE." + Database.BMode + " HAVING (((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2) +Sum(VOUCHERDET.taxamt3) + Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";



            //}

            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }


            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Vnumber");
            tdt.Columns.Remove("Vdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[16, 8] { 
            { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Name", "300", "0","" ,"","","",""},
            { tintext, "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","","","" },
            {CCode, "150", "0","","","","","" },
            { CName, "200", "0","Grand Total","Total","","","" },
            { "Qty", "100", "0","|sum(Qty)","|sum(Qty)","","","" },
            { "Unit", "150", "0","","","","","" },
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },
            
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "150", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" }
            };


            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool SummPurchaseRegister(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Summarized Purchase Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Summarized Purchase Register, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {


                //sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name as VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty, Voucherdet.Rate_Unit As Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt";
                //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id)  ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Voucherdet.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)="+access_sql.Singlequote+"True"+access_sql.Singlequote+")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

            }
            else
            {
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }

            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }


            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }

                tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                       
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Vnumber");
            tdt.Columns.Remove("Vdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = ""; ;
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "Tin_Number";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN Number";
            }



            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[12, 8] { 
               { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Account", "150", "0","" ,"","","",""},
            { tintext , "100", "0","","","","","" },
            { "Voucher No", "100", "0","" ,"","","",""},
            { "Voucher Date", "100", "0","","","","","" },
           
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "60", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "60", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "60", "0","|sum(Tax2)","|sum(Tax2)","","","" },
            
            { taxname4, "60", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "110", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" }
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }



        public bool SupplierLifting(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Supplier Lifting";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = accnm;
            this.Text = frmptyp;
            DecsOfReport = "Supplier Lifting, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Feature.Available("Discount on Grid") == "Yes")
            {

                if (Database.IsKacha == false)
                {
                    ////sql = " SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.qd, VOUCHERDET.cd,  Sum(IIf([TaxSr]=1,[Taxabelamount],0)) AS ItemTaxable, Sum(IIf([TaxSr]=1,[Tax_Amount],0)) AS Tax1, Sum(IIf([TaxSr]=2,[Tax_Amount],0)) AS Tax2, Sum(IIf([TaxSr]=1,[Taxabelamount],0))+Sum(IIf([TaxSr]=1,[Tax_Amount],0))+Sum(IIf([TaxSr]=2,[Tax_Amount],0)) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id) LEFT JOIN TAXCATEGORY ON DESCRIPTION.Tax_Cat_id = TAXCATEGORY.Category_Id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)";
                    ////sql += " WHERE (((ITEMTAX.Tax_Amount)<>0)) GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.qd, VOUCHERDET.cd,  VOUCHERINFO.Vnumber, VOUCHERTYPE.A";
                    ////sql += " HAVING (((VOUCHERTYPE.A)=True)) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";


                    sql = " SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name as VName, ACCOUNT.Name as AccName, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.qd, VOUCHERDET.cd,  Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN TAXCATEGORY ON DESCRIPTION.Tax_Cat_id = TAXCATEGORY.Category_Id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)";
                    sql += " WHERE (((ITEMTAX.Tax_Amount)<>0)) GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.qd, VOUCHERDET.cd,  VOUCHERINFO.Vnumber, VOUCHERTYPE.A";
                    sql += " HAVING (((VOUCHERTYPE.A)="+access_sql.Singlequote+"True"+access_sql.Singlequote+")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";



                }
                else
                {
                    sql = " SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name as VName, ACCOUNT.Name as AccName, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.qd, VOUCHERDET.cd, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id)  LEFT JOIN TAXCATEGORY ON DESCRIPTION.Tax_Cat_id = TAXCATEGORY.Category_Id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)";
                    sql += " WHERE (((ITEMTAX.Tax_Amount)<>0)) GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.qd, VOUCHERDET.cd, VOUCHERINFO.Vnumber, VOUCHERTYPE.B";
                    sql += " HAVING (((VOUCHERTYPE.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

                }

                dt.Rows.Clear();
                dt.Columns.Clear();
                Database.GetSqlData(sql, dt);
                DataRow[] drow = dt.Select("AccName='" + accnm + "' and Svdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Svdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
                tdt.Clear();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    if (tdt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                    {
                        return false;
                    }
                    tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {

                            tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                            tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                            tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                            tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;

                            tdt.Rows[i]["qd"] = double.Parse(tdt.Rows[i]["qd"].ToString()) * -1;
                            tdt.Rows[i]["cd"] = double.Parse(tdt.Rows[i]["cd"].ToString()) * -1;

                        }
                    }
                    tdt = tdt.DefaultView.ToTable();
                    tdt.Columns.Remove("AccName");
                }


                if (tdt.Rows.Count == 0)
                {
                    return false;
                }

                tdt.Columns.Remove("Vnumber");
                tdt.Columns.Remove("Vdate");

                string[,] col = new string[2, 3]{
                { "Type", "1", "1" },
                { "VName", "0", "0" }
                };

                string[,] Cwidth = new string[10, 8] { 
                { "Type", "", "0" ,"","","","",""},
                { "VOUCHERTYPE", "100", "0" ,"","","","",""},

                { "Voucher No", "150", "0","" ,"","","",""},
                { "Supplier VDate", "150", "0","Total","Total","","","" },
                { "QD", "50", "0","","","","","" },
                { "CD", "50", "0","","","","","" },
                { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
                { "Vat", "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
                { "Sat", "100", "0","|sum(Tax2)","|sum(Tax2)","" ,"",""},
                { "Amount", "150", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" }
                };


                CreateReport(tdt, col, Cwidth);

            }

            else
            {
                if (Database.IsKacha == false)
                {
                    sql = " SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,  Sum(IIf([TaxSr]=1,[Taxabelamount],0)) AS ItemTaxable, Sum(IIf([TaxSr]=1,[Tax_Amount],0)) AS Tax1, Sum(IIf([TaxSr]=2,[Tax_Amount],0)) AS Tax2, Sum(IIf([TaxSr]=1,[Taxabelamount],0))+Sum(IIf([TaxSr]=1,[Tax_Amount],0))+Sum(IIf([TaxSr]=2,[Tax_Amount],0)) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id) LEFT JOIN TAXCATEGORY ON DESCRIPTION.Tax_Cat_id = TAXCATEGORY.Category_Id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)";
                    sql += " WHERE (((ITEMTAX.Tax_Amount)<>0)) GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.qd, VOUCHERDET.cd,  VOUCHERINFO.Vnumber, VOUCHERTYPE.A";
                    sql += " HAVING (((VOUCHERTYPE.A)=True)) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

                }
                else
                {
                    sql = " SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Sum(IIf([TaxSr]=1,[Taxabelamount],0)) AS ItemTaxable, Sum(IIf([TaxSr]=1,[Tax_Amount],0)) AS Tax1, Sum(IIf([TaxSr]=2,[Tax_Amount],0)) AS Tax2, Sum(IIf([TaxSr]=1,[Taxabelamount],0))+Sum(IIf([TaxSr]=1,[Tax_Amount],0))+Sum(IIf([TaxSr]=2,[Tax_Amount],0)) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id) LEFT JOIN TAXCATEGORY ON DESCRIPTION.Tax_Cat_id = TAXCATEGORY.Category_Id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)";
                    sql += " WHERE (((ITEMTAX.Tax_Amount)<>0)) GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.qd, VOUCHERDET.cd, VOUCHERINFO.Vnumber, VOUCHERTYPE.B";
                    sql += " HAVING (((VOUCHERTYPE.B)=True)) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";

                }

                dt.Rows.Clear();
                dt.Columns.Clear();
                Database.GetSqlData(sql, dt);
                DataRow[] drow = dt.Select("Account.Name='" + accnm + "' and Svdate>=#" + DateFrom.ToString(Database.dformat) + "# and Svdate<=#" + DateTo.ToString(Database.dformat) + "#");
                tdt.Clear();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {

                            tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                            tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                            tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                            tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;

                        }
                    }
                    tdt = tdt.DefaultView.ToTable();
                    tdt.Columns.Remove("Account.Name");
                }


                if (tdt.Rows.Count == 0)
                {
                    return false;
                }

                tdt.Columns.Remove("Vnumber");
                tdt.Columns.Remove("Vdate");

                string[,] col = new string[2, 3]{
                { "Type", "1", "1" },
                { "VOUCHERTYPE.Name", "0", "0" }
                };

                string[,] Cwidth = new string[8, 8] { 
                { "Type", "", "0" ,"","","","",""},
                { "VOUCHERTYPE", "100", "0" ,"","","","",""},

                { "Voucher No", "150", "0","" ,"","","",""},
                { "Supplier Voucher Date", "150", "0","Total","Total","" ,"",""},
                { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
                { "Vat", "150", "0","|sum(Tax1)","|sum(Tax1)","" ,"",""},
                { "Sat", "150", "0","|sum(Tax2)","|sum(Tax2)","" ,"",""},
                { "Amount", "150", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" }
                };


                CreateReport(tdt, col, Cwidth);

            }
            return true;
        }



        public bool CommoditySummary(DateTime DateFrom, DateTime DateTo)
        {

            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Commodity Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Commodity Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Database.DatabaseType == "sql")
            {

                //if (Database.IsKacha == false)
                //{

                    sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, VOUCHERTYPE.Type,isnull(Sum(VOUCHERDET.Taxabelamount),0) AS ItemTaxable,isnull(Sum(VOUCHERDET.taxamt3),0) AS Tax3,isnull(Sum(VOUCHERDET.taxamt1),0) AS Tax1,isnull(Sum(VOUCHERDET.taxamt2),0) AS Tax2, isnull(Sum(VOUCHERDET.taxamt4),0) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";


                //}
                //else
                //{
                //    //sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, VOUCHERTYPE.Type, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2";
                //    //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Vi_id = ITEMTAX.Vi_id) AND (VOUCHERDET.Itemsr = ITEMTAX.Itemsr)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id";
                //    //sql += " WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";

                //    sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, VOUCHERTYPE.Type, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, isnull(Sum(VOUCHERDET.taxamt3),0) AS Tax3,isnull(Sum(VOUCHERDET.taxamt1),0) AS Tax1,isnull(Sum(VOUCHERDET.taxamt2),0) AS Tax2,  isnull(Sum(VOUCHERDET.taxamt4),0) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";


                //}
            }
            else
            {
                if (Database.IsKacha == false)
                {

                    sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, VOUCHERTYPE.Type,Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable,Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1,Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";

                    //sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur,VOUCHERTYPE.Type, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2";
                    //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Vi_id = ITEMTAX.Vi_id) AND (VOUCHERDET.Itemsr = ITEMTAX.Itemsr)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id";
                    //sql += " WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";


                }
                else
                {
                    //sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, VOUCHERTYPE.Type, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2";
                    //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Vi_id = ITEMTAX.Vi_id) AND (VOUCHERDET.Itemsr = ITEMTAX.Itemsr)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id";
                    //sql += " WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";

                    sql = "SELECT TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, VOUCHERTYPE.Type, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable,Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) GROUP BY TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", VOUCHERTYPE.Type, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";


                }
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);



            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["ItemTaxable"] = double.Parse(dt.Rows[i]["ItemTaxable"].ToString()) * -1;
                    dt.Rows[i]["Tax1"] = double.Parse(dt.Rows[i]["Tax1"].ToString()) * -1;
                    dt.Rows[i]["Tax2"] = double.Parse(dt.Rows[i]["Tax2"].ToString()) * -1;
                    dt.Rows[i]["Tax3"] = double.Parse(dt.Rows[i]["Tax3"].ToString()) * -1;
                    dt.Rows[i]["Tax4"] = double.Parse(dt.Rows[i]["Tax4"].ToString()) * -1;
                }
                dt.Rows[i]["Category_Name"] = dt.Rows[i]["Category_Name"].ToString() + " (" + dt.Rows[i]["Commodity_Code"].ToString() + ")";
            }
            dt.Columns.Remove("Commodity_Code");

            if (dt.Rows.Count == 0)
            {

                return false;
            }
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", taxcategoryname = "", taxcategorycode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                taxcategoryname = "Category Name";
                taxcategorycode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                taxcategoryname = "HSN Name";

                taxcategorycode = "HSN Code";

            }
            string[,] col = new string[2, 3] 
            { {"Category_Name","1","1"},
              {"SalePur","0","1"}
                };


            string[,] Cwidth = new string[8, 8] {
            { taxcategoryname, "0", "","","","","","" },
            { "SalePur", "325", "","","Total","","","" },
            { "Type", "125", "0","" ,"","","",""},
            { "Itemtaxable", "150", "","","|sum(Itemtaxable)","|sum(Itemtaxable)","","" },
            { taxname3 , "100", "0","","|sum(Tax3)","|sum(Tax3)","","" },
            { taxname1 , "100", "0","","|sum(Tax1)","|sum(Tax1)","","" },
            { taxname2 , "100", "0","","|sum(Tax2)","|sum(Tax2)","","" },
            
            { taxname4 , "100", "0","","|sum(Tax4)","|sum(Tax4)","","" }
            };

            CreateReport(dt, col, Cwidth);

            return true;
        }







        public bool ParticularCommoditySummary(DateTime DateFrom, DateTime DateTo, string accnm)
        {

            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Particular Commodity Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = accnm;
            this.Text = frmptyp;
            DecsOfReport = "Particular Commodity Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Database.DatabaseType == "sql")
            {
                //if (Database.IsKacha == false)
                //{



                    sql = "SELECT " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + " AS DocNumber, VOUCHERINFO.Vdate,isnull(Sum(VOUCHERDET.Taxabelamount),0) AS ItemTaxable,isnull(Sum(VOUCHERDET.taxamt3),0) AS Tax3,isnull(Sum(VOUCHERDET.taxamt1) ,0) AS Tax1,isnull(Sum(VOUCHERDET.taxamt2),0) AS Tax2,isnull(Sum(VOUCHERDET.taxamt4),0) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) ";
                    sql += " GROUP BY " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + ", VOUCHERINFO.Vdate, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY " + access_sql.Docnumber;


                //}
                //else
                //{

                //    sql = "SELECT " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + " AS DocNumber, VOUCHERINFO.Vdate, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, isnull(Sum(VOUCHERDET.taxamt3),0) AS Tax3,isnull(Sum(VOUCHERDET.taxamt1) ,0) AS Tax1,isnull(Sum(VOUCHERDET.taxamt2),0) AS Tax2,isnull(Sum(VOUCHERDET.taxamt4),0) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) ";
                //    sql += " GROUP BY " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + ", VOUCHERINFO.Vdate, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY " + access_sql.Docnumber;


                //}
            }
            else
            {
                if (Database.IsKacha == false)
                {



                    sql = "SELECT " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + " AS DocNumber, VOUCHERINFO.Vdate,Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable,Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1,Sum(VOUCHERDET.taxamt2) AS Tax2,Sum(VOUCHERDET.taxamt4) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) ";
                    sql += " GROUP BY " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + ", VOUCHERINFO.Vdate, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY " + access_sql.Docnumber;


                }
                else
                {

                    sql = "SELECT " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + " AS SalePur, TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + " AS DocNumber, VOUCHERINFO.Vdate, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4 FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ")) ";
                    sql += " GROUP BY " + access_sql.fnstring("VOUCHERTYPE.type='Sale' Or VOUCHERTYPE.type='Return'", "'Sale'", "'Purchase'") + ", TAXCATEGORY.Commodity_Code, VOUCHERTYPE.Type, VOUCHERTYPE.Name, " + access_sql.Docnumber + ", VOUCHERINFO.Vdate, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Purchase' Or (VOUCHERTYPE.Type)='Return' Or (VOUCHERTYPE.Type)='P Return') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY " + access_sql.Docnumber;


                }
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Type"].ToString() == "Return" || dt.Rows[i]["Type"].ToString() == "P Return")
                {
                    dt.Rows[i]["ItemTaxable"] = double.Parse(dt.Rows[i]["ItemTaxable"].ToString()) * -1;
                    dt.Rows[i]["Tax1"] = double.Parse(dt.Rows[i]["Tax1"].ToString()) * -1;
                    dt.Rows[i]["Tax2"] = double.Parse(dt.Rows[i]["Tax2"].ToString()) * -1;
                    dt.Rows[i]["Tax3"] = double.Parse(dt.Rows[i]["Tax3"].ToString()) * -1;
                    dt.Rows[i]["Tax4"] = double.Parse(dt.Rows[i]["Tax4"].ToString()) * -1;
                }

            }
            dt.Columns.Remove("Commodity_Code");
            dt.Columns.Remove("Type");

            if (dt.Rows.Count == 0)
            {
                return false;
            }

             string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", taxcategoryname = "", taxcategorycode = "";
             if (Feature.Available("Taxation Applicable") == "VAT")
             {
                 taxname1 = "VAT";
                 taxname2 = "SAT";
                 taxname3 = "CST";
                 taxname4 = "Service Tax";
                 taxcategoryname = "Category Name";
                 taxcategorycode = "Category Code";
             }
             else
             {
                 taxname1 = "CGST";
                 taxname2 = "SGST";
                 taxname3 = "IGST";
                 taxname4 = "Cess";
                 taxcategoryname = "HSN Name";

                 taxcategorycode = "HSN Code";
             }
            string[,] col = new string[2, 3] 
            { {"SalePur","1","0"},
                {"Name","1","1"}
             };

            string[,] Cwidth = new string[9, 8] {
            { "SalePur", "0", "","","","","","" },
            { "Type", "0", "0","" ,"","","",""},
            { "DocNumber", "250", "0","" ,"","","",""},
            { "Vdate", "150", "0","" ,"","","",""},
            { "Itemtaxable", "200", "","","|sum(Itemtaxable)","|sum(Itemtaxable)","","" },
            { taxname3, "100", "0","","|sum(Tax3)","|sum(Tax3)","","" },
            {   taxname1 , "100", "0","","|sum(Tax1)","|sum(Tax1)","","" },
            { taxname2, "100", "0","","|sum(Tax2)","|sum(Tax2)","","" },
            
            { taxname4, "100", "0","","|sum(Tax4)","|sum(Tax4)","","" }
            };

            CreateReport(dt, col, Cwidth);

            return true;
        }

        public bool AnnexureB(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "AnnexureB";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "AnnexureB, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            
            if(Database.IsKacha==false)
            {

                sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4,  Sum(VOUCHERDET.Taxabelamount + VOUCHERDET.taxamt1 + VOUCHERDET.taxamt2 + VOUCHERDET.taxamt3 +VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id ";
                sql += " WHERE (((VOUCHERTYPE.TaxInvoice)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";
                //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Address1 as Address, ACCOUNT.Address2 as City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty, Voucherdet.Rate_Unit as Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt";
                //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id)  ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERTYPE.TaxInvoice)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Voucherdet.Rate_Unit, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }
            else
            {
                sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4,  Sum(VOUCHERDET.Taxabelamount + VOUCHERDET.taxamt1 + VOUCHERDET.taxamt2 + VOUCHERDET.taxamt3 +VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id ";
                sql += " WHERE (((VOUCHERTYPE.TaxInvoice)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";
                //sql = "SELECT VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Address1 as Address, ACCOUNT.Address2 as City, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty,Voucherdet.Rate_Unit as Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ")+Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS VoucherNetAmt";
                //sql += " FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERTYPE.TaxInvoice)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERTYPE.Type, ACCOUNT.Name,ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Voucherdet.Rate_Unit, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }


            dt.Clear();

            Database.GetSqlData(sql, dt);
            DataRow[] drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+"");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                    }
                }

                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", taxcategoryname = "", taxcategorycode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                taxcategoryname = "Category Name";
                taxcategorycode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                taxcategoryname = "HSN Name";
              
                taxcategorycode = "HSN Code";

            }
            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }
            };

            string[,] Cwidth = new string[17, 8] { 
            { "Type", "", "0" ,"","","","",""},
            { "Name", "550", "0","" ,"","","",""},
             { "Address", "550", "0","" ,"","","",""},
              { "City", "550", "0","" ,"","","",""},
            { "Tin_Number", "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","" ,"",""},


            { taxcategorycode, "150", "0","","","","","" },
            { taxcategoryname, "150", "0","","","" ,"",""},
            { "Qty", "75", "0","","","","","" },
            { "Unit", "50", "0","","","","","" },
            { "Taxable Amount", "125", "0","Grand Total","Total","","","" },
            { taxname3, "75", "0","","","","","" },
            { taxname1, "75", "0","","","" ,"",""},
            { taxname2, "75", "0","","","" ,"",""},
             
            { taxname4, "75", "0","","","","","" },
            { "Amount", "150", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }



        public bool AnnexureC(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "AnnexureC";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "AnnexureC, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS State, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, " + access_sql.fnDatFormatting("VOUCHERINFO.Svdate", "dd-MMM-yyyy") + " AS Svdate, TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code, Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax1,Sum(VOUCHERDET.taxamt4) AS Tax2 ,Sum(VOUCHERDET.Taxabelamount + VOUCHERDET.taxamt3 + VOUCHERDET.taxamt4) AS VoucherNetAmt, VOUCHERINFO.Formno FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code, VOUCHERDET.Rate_Unit, VOUCHERINFO.Formno, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Sum(VOUCHERDET.taxamt3))<>0) AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
               

                //sql = "SELECT ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS State, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum," + access_sql.fnDatFormatting("VOUCHERINFO.Svdate", "dd-MMM-yyyy") + " AS Svdate, TAXCATEGORY.Category_Name, ";
                //sql += " TAXCATEGORY.Commodity_Code, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty,Voucherdet.Rate_Unit as Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, VOUCHERINFO.Totalamount AS VoucherNetAmt, VOUCHERINFO.Formno FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id =  DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) ";
                //sql += " LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)) LEFT JOIN TAXCATEGORY ON  VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERTYPE.Short)='PRX') AND ((ITEMTAX.Tax_Amount)<>0)) GROUP BY ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code, Voucherdet.Rate_Unit, VOUCHERINFO.Totalamount, VOUCHERINFO.Formno, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }
            else
            {

                sql = "SELECT ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS State, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum," + access_sql.fnDatFormatting("VOUCHERINFO.Svdate", "dd-MMM-yyyy") + " AS Svdate, TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code, Sum([Voucherdet].[Pvalue]*[Quantity]) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax1, Sum(VOUCHERDET.Taxabelamount +VOUCHERDET.taxamt3) AS VoucherNetAmt, VOUCHERINFO.Formno FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code, VOUCHERDET.Rate_Unit, VOUCHERINFO.Formno, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + dateTimePicker1.Value.Date.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + dateTimePicker2.Value.Date.ToString(Database.dformat) + access_sql.Hash + ") AND ((Sum(VOUCHERDET.taxamt3))<>0) AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
               
                //sql = "SELECT ACCOUNT.Name, ACCOUNT.Address1 AS Address, ACCOUNT.Address2 AS State, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum," + access_sql.fnDatFormatting(" VOUCHERINFO.Svdate", Database.dformat) + " AS Svdate, TAXCATEGORY.Category_Name, ";
                //sql += " TAXCATEGORY.Commodity_Code, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Voucherdet].[Pvalue]*[Quantity]", "0") + ") AS Qty,Voucherdet.Rate_Unit AS  Utype, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Taxabelamount]", "0") + ") AS ItemTaxable, Sum(" + access_sql.fnstring("[TaxSr]=1", "[Tax_Amount]", "0") + ") AS Tax1, Sum(" + access_sql.fnstring("[TaxSr]=2", "[Tax_Amount]", "0") + ") AS Tax2, VOUCHERINFO.Totalamount AS VoucherNetAmt, VOUCHERINFO.Formno FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id =  DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) ";
                //sql += " LEFT JOIN ITEMTAX ON (VOUCHERDET.Itemsr = ITEMTAX.Itemsr) AND (VOUCHERDET.Vi_id = ITEMTAX.Vi_id)) LEFT JOIN TAXCATEGORY ON  VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((VOUCHERTYPE.Short)='PRX') AND ((ITEMTAX.Tax_Amount)<>0)) GROUP BY ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Tin_number, VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code, Voucherdet.Rate_Unit, VOUCHERINFO.Totalamount, VOUCHERINFO.Formno, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }

            dt.Clear();

            Database.GetSqlData(sql, dt);
            DataRow[] drow = dt.Select("Vdate>=" +access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash +" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash );
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
              
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                   
                    //    tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                    //    tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                    //}
                }

                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", taxcategoryname = "", taxcategorycode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                taxcategoryname = "Category Name";
                taxcategorycode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                taxcategoryname = "HSN Name";

                taxcategorycode = "HSN Code";

            }
            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[17, 8] { 
          
            { "Name", "200", "0","" ,"","","",""},
            { "Address", "150", "0","","","" ,"",""},
            { "State", "100", "0","","","" ,"",""},
            { "TIN No", "100", "0","","","","","" },
            { "Voucher No", "100", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","","","" },
            { "SVNum", "150", "0","" ,"","","",""},
            { "SVDate", "150", "0","","","" ,"",""},

            { taxcategoryname, "100", "0","","","","","" },
            { taxcategorycode , "100", "0","","","" ,"",""},

            { "Qty", "100", "0","","","" ,"",""},
            { "Unit", "50", "0","","","","","" },
            { "Taxable Amount", "150", "0","Grand Total","Total","" ,"",""},
            { taxname3 , "75", "0","","","" ,"",""},
            { taxname4 , "75", "0","","","" ,"",""},
            { "Amount", "150", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","","" },
            { "FormNo", "100", "0","","","" ,"",""},
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }


        public bool SummSaleRegister(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Summarized Sale Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Summarized Sale Register , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {

                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
             //   sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(VOUCHERDET.Quantity) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount) +Sum(VOUCHERDET.taxamt1) +Sum(VOUCHERDET.taxamt2) +Sum(VOUCHERDET.taxamt3) + Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.A HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";


            }
            else
            {


                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }


            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }

                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                      
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }

                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("SVnum");
            tdt.Columns.Remove("SVdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = ""; ;
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[12, 8] { 
               { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Account", "150", "0","" ,"","","",""},
            {  tintext , "100", "0","","","" ,"",""},
            { "Voucher No", "100", "0","" ,"","","",""},
            { "Voucher Date", "100", "0","","","" ,"",""},
           
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "60", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "60", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "60", "0","|sum(Tax2)","|sum(Tax2)","" ,"",""},
            
            { taxname4, "60", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "110", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" }
            };
            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool Debtors(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Debtors";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Debtors, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();



            sql = "SELECT  case when OTHER.Name is null then '<Undefined>' Else OTHER.Name  end AS PaymentCollector,    ACCOUNT.Name,  ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone,      ACCOUNT.Email, ACCOUNT.PAN, ACCOUNT.Aadhaarno, State.Sname, ACCOUNT.Tin_number, ACCOUNT.RegStatus FROM         ACCOUNT LEFT OUTER JOIN    OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id LEFT OUTER JOIN   State ON ACCOUNT.State_id = State.State_id LEFT OUTER JOIN    ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE     (ACCOUNTYPE.Path LIKE '1;39;%') OR (ACCOUNTYPE.Path LIKE '1;38;%') ORDER BY PaymentCollector,ACCOUNT.Name";

            dt = new DataTable();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }


            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }



            string[,] col = new string[1, 3] { { "PaymentCollector", "1", "0" } };



            string[,] Cwidth = new string[11, 8] { 
           
            { "PaymentColl", "0", "0" ,"","","","",""},
             { "Name", "500", "0" ,"","","","",""},
            { "Address1", "200", "0" ,"","","","",""},
            { "Address2", "150", "0","" ,"","","",""},
            { "ContactNo", "150", "0","","","" ,"",""},

            { "Email id", "150", "0","" ,"","","",""},
            { "PAN", "150", "0","","","","","" },
            { "Aadhaar No", "150", "0","","","","","" },
            { "State", "150", "0","","","" ,"",""},
            { tintext, "150", "0","","","","","" },
         
            { "Registration Status", "100", "0","","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }
        public bool Creditors(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Creditors";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Creditors, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();



            //  sql = "SELECT ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2,Phone, ACCOUNT.Email, ACCOUNT.PAN, ACCOUNT.Aadhaarno, State.Sname, ACCOUNT.Tin_number, ACCOUNT.RegStatus FROM (ACCOUNT LEFT JOIN State ON ACCOUNT.State_id = State.State_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Path) Like '8;39;%' Or (ACCOUNTYPE.Path) Like '8;40;%'))";


            sql = "SELECT   case when OTHER.Name is null then '<Undefined>' Else OTHER.Name  end AS PaymentCollector,    ACCOUNT.Name,ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone,      ACCOUNT.Email, ACCOUNT.PAN, ACCOUNT.Aadhaarno, State.Sname, ACCOUNT.Tin_number, ACCOUNT.RegStatus FROM         ACCOUNT LEFT OUTER JOIN    OTHER ON ACCOUNT.Loc_id = OTHER.Oth_id LEFT OUTER JOIN   State ON ACCOUNT.State_id = State.State_id LEFT OUTER JOIN    ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Path) Like '8;39;%' Or (ACCOUNTYPE.Path) Like '8;40;%')) ORDER BY ACCOUNT.Name, PaymentCollector";




            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }


            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }



            string[,] col = new string[1, 3] { { "PaymentCollector", "1", "0" } };



            string[,] Cwidth = new string[11, 8] { 
           
            { "PaymentColl", "0", "0" ,"","","","",""},
             { "Name", "500", "0" ,"","","","",""},
            { "Address1", "200", "0" ,"","","","",""},
            { "Address2", "150", "0","" ,"","","",""},
            { "ContactNo", "150", "0","","","" ,"",""},

            { "Email id", "150", "0","" ,"","","",""},
            { "PAN", "150", "0","","","","","" },
            { "Aadhaar No", "150", "0","","","","","" },
            { "State", "150", "0","","","" ,"",""},
            { tintext, "150", "0","","","","","" },
         
            { "Registration Status", "100", "0","","","","","" }
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool Gradewise(DateTime DateFrom, DateTime DateTo, string grade,string acctype)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Grade Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = true;
            textBox1.Enabled = true;
            textBox1.Text = acctype;
            this.Text = frmptyp;
            DecsOfReport = "Grade Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            ggrade = grade;
            if (acctype != "")
            {

                //  sql = "SELECT   0 as srno,  Name, Address1, Address2, Phone, MobileNo FROM         ACCOUNT WHERE     (Grade = '" + grade + "') AND (Branch_id = '" + Database.BranchId + "') ORDER BY Name";
                //sql = "SELECT  ACCOUNT.Grade,    ACCOUNT.Name, ACCOUNTYPE.Name AS Act, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone,                        ACCOUNT.MobileNo FROM         ACCOUNT LEFT OUTER JOIN                       ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE  (" + grade + ") AND (ACCOUNT.Branch_id = '" + Database.BranchId + "') AND (ACCOUNTYPE.Name = '" + acctype + "') ORDER BY ACCOUNT.Grade, ACCOUNT.Name";
                sql = "SELECT ACCOUNT.Grade, ACCOUNT.Name, ACCOUNTYPE.Name AS Act, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone, ACCOUNT.MobileNo FROM ACCOUNT LEFT OUTER JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (ACCOUNT.Branch_id = '" + Database.BranchId + "') AND (ACCOUNT.Status = 1) AND (ACCOUNTYPE.Name = '" + acctype + "') AND (" + grade + ") GROUP BY ACCOUNT.Grade, ACCOUNT.Name, ACCOUNTYPE.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone, ACCOUNT.MobileNo ORDER BY ACCOUNT.Grade, ACCOUNT.Name";
            }
            else
            {
                //sql = "SELECT    ACCOUNT.Grade,  ACCOUNT.Name, ACCOUNTYPE.Name AS Act, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone,                        ACCOUNT.MobileNo FROM         ACCOUNT LEFT OUTER JOIN  ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE   (" + grade + ") AND (ACCOUNT.Branch_id = '" + Database.BranchId + "')  ORDER BY ACCOUNT.Grade,ACCOUNT.Name";
                sql = "SELECT ACCOUNT.Grade, ACCOUNT.Name, ACCOUNTYPE.Name AS Act, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone, ACCOUNT.MobileNo FROM ACCOUNT LEFT OUTER JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (ACCOUNT.Branch_id = '" + Database.BranchId + "') AND (ACCOUNT.Status = 1) AND (" + grade + ") GROUP BY ACCOUNT.Grade, ACCOUNT.Name, ACCOUNTYPE.Name, ACCOUNT.Address1, ACCOUNT.Address2, ACCOUNT.Phone, ACCOUNT.MobileNo ORDER BY ACCOUNT.Grade, ACCOUNT.Name";

            }
            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }
           
           


            string[,] col = new string[0, 0];



            string[,] Cwidth = new string[7, 8] { 
             { "Grade", "50", "0" ,"","","","",""},
            { "Account Name", "200", "0" ,"","","","",""},
            { "Account Grp", "150", "0" ,"","","","",""},
            { "Address1", "200", "0","" ,"","","",""},
            { "Address2", "150", "0" ,"","","","",""},
            { "Mobileno", "125", "0","" ,"","","",""},
            { "WhatsAppno", "125", "0" ,"","","","",""},
       
            };

            CreateReport(dt, col, Cwidth);
            return true;
        }

        public bool SaleRegisterHsn(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Sale Register HSN";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Sale Register HSN Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount, " + access_sql.fnstring("ACCOUNT_1.Name is null", "'<MAIN>'", "ACCOUNT_1.Name") + " as Godown FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.A, ACCOUNT_1.Name HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";
            }
            else
            {
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount, " + access_sql.fnstring("ACCOUNT_1.Name is null", "'<MAIN>'", "ACCOUNT_1.Name") + " as Godown FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B, ACCOUNT_1.Name HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }

            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }
            
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length > 0)
                {
                    tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {
                            tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                            tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                            tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                            tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                            tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                            tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                            tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                        }
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Svnum");
            tdt.Columns.Remove("SVdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "",CCode="" ;
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[17, 8] { 
            { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Name", "300", "0","" ,"","","",""},
            { tintext, "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","" ,"",""},
            { CCode, "100", "0","","","","","" },
            { CName, "150", "0","Grand Total","Total","","","" },
            { "Qty", "100", "0","|sum(Qty)","|sum(Qty)","","","" },
            { "Unit", "150", "0","","","","","" },
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },            
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "150", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" },
            { "Godown", "100", "0","" ,"","","",""}
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool SaleRegisterTax(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Sale Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Sale Register- Tax Slab Wise  , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,VOUCHERDET.TotTaxPer AS [Rate%], Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount," + access_sql.fnstring("ACCOUNT_1.Name Is Null", "'<MAIN>'", "ACCOUNT_1.Name") + " AS Godown FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id)  LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer,  VOUCHERINFO.Vnumber, VOUCHERTYPE.A, ACCOUNT_1.Name HAVING (((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }
            else
            {
                sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer AS [Rate%],Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount," + access_sql.fnstring("ACCOUNT_1.Name Is Null", "'<MAIN>'", "ACCOUNT_1.Name") + " AS Godown FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id)  LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERDET.TotTaxPer, VOUCHERINFO.Vnumber, VOUCHERTYPE.B, ACCOUNT_1.Name HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }            
            
            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ").Length < 0)
            {
                return false;
            }
            
            DataRow[] drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+"");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }

                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("SVnum");
            tdt.Columns.Remove("SVdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[15, 8] { 
            { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "VName", "350", "0","" ,"","","",""},
            { tintext, "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","","","" },
            { "Tax%", "150", "0","Grand Total","Total","","","" },
            { "Qty", "150", "0","|sum(Qty)","|sum(Qty)","","","" },           
            { "Taxable Amount", "150", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            {  taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },            
            {  taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "100", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" },
            { "Godown", "150", "0","","","","","" }
            };
            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool SaleRegisterHsnNew(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Sale Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Sale Register, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
            sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name,VOUCHERDET.TotTaxPer AS [Rate%], Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount, " + access_sql.fnstring("ACCOUNT_1.Name is null", "'<MAIN>'", "ACCOUNT_1.Name") + " as Godown FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name,VOUCHERDET.TotTaxPer, VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE." + Database.BMode + ", ACCOUNT_1.Name HAVING (((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber;";
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Type, VOUCHERTYPE.Name AS VName, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.TotTaxPer AS [Rate%],Sum(VOUCHERDET.Quantity*VOUCHERDET.Pvalue) AS Qty, VOUCHERDET.Rate_Unit AS Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3, Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2, Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount)+Sum(VOUCHERDET.taxamt1)+Sum(VOUCHERDET.taxamt2)+Sum(VOUCHERDET.taxamt3)+Sum(VOUCHERDET.taxamt4) AS VoucherAmount, " + access_sql.fnstring("ACCOUNT_1.Name is null", "'<MAIN>'", "ACCOUNT_1.Name") + " as Godown FROM ((((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON VOUCHERDET.godown_id = ACCOUNT_1.Ac_id GROUP BY VOUCHERTYPE.Type, VOUCHERTYPE.Name, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, VOUCHERINFO.Vdate, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, TAXCATEGORY.Commodity_Code, TAXCATEGORY.Category_Name, VOUCHERDET.TotTaxPer,VOUCHERDET.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B, ACCOUNT_1.Name HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //}

            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }
            
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                        tdt.Rows[i]["VoucherAmount"] = double.Parse(tdt.Rows[i]["VoucherAmount"].ToString()) * -1;
                        tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                        tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                        tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                        tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                        tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                    }
                }
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Svnum");
            tdt.Columns.Remove("SVdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }

            string[,] col = new string[2, 3]{
            { "Type", "1", "1" },
            { "VName", "0", "0" }
            };

            string[,] Cwidth = new string[18, 8] { 
            { "TYPE", "", "0" ,"","","","",""},
            { "Type", "100", "0" ,"","","","",""},
            { "Name", "300", "0","" ,"","","",""},
            { tintext, "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","" ,"",""},
            { CCode, "100", "0","","","","","" },
            { CName, "150", "0","Grand Total","Total","","","" },
            { "TaxSlab", "75", "0","Grand Total","Total","","","" },
            { "Qty", "75", "0","|sum(Qty)","|sum(Qty)","","","" },
            { "Unit", "150", "0","","","","","" },
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "100", "0","|sum(VoucherAmount)","|sum(VoucherAmount)","","","" },
            { "Godown", "100", "0","" ,"","","",""}
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }





        public bool MobilenoSearch(string Phoneno)
        {
            groupBox2.Visible = false;
            //stdt = DateFrom;
            //endt = DateTo;
            frmptyp = "Search Bill";
            //dateTimePicker1.Value = DateFrom;
            //dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = "Search Bill";
            //DecsOfReport = "Search Bill, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            DecsOfReport = "Search Bill";
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();


          
            sql = "SELECT  VOUCHERINFO.Vdate,  VOUCHERINFO.Invoiceno,  VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar,  VOUCHERINFO.Vdate, 112)   + ' ' + CAST( VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber,  VOUCHERINFO.Totalamount FROM  VOUCHERINFO LEFT OUTER JOIN  VOUCHERTYPE ON  VOUCHERINFO.Vt_id =  VOUCHERTYPE.Vt_id WHERE  ( VOUCHERTYPE." + Database.BMode + "= 1) AND ( VOUCHERINFO.Branch_id = '" + Database.BranchId + "') AND ( VOUCHERINFO.ShiptoPhone = '" + Phoneno + "') ORDER BY  VOUCHERINFO.Vdate, DocNumber";

            dt.Clear();
            Database.GetSqlData(sql, dt);

          
            if (dt.Rows.Count == 0)
            {
                return false;
            }


            string[,] col = new string[0, 0];

                string[,] Cwidth = new string[4, 8] { 
                    { "Voucher Date", "300", "0" ,"","","","",""},
                    { "InvoiceNo", "300", "0" ,"","","","",""},
                    { "DocNumber", "300", "0","Total" ,"","","",""},
                    { "Amount", "100", "0","","","" ,"",""},
                                   
                    };
                CreateReport(dt, col, Cwidth);
                return true;

           

        }


        public bool SalePurchaseRegister(DateTime DateFrom, DateTime DateTo, string substr,string type,string datepat)
        {
            button8.Visible = true;
            groupBox2.Visible = false;
            stdt = DateFrom;
            endt = DateTo;
            gtype = type;
            frmptyp = "Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = type + " Register";
            DecsOfReport = "Sale Register, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (type == "Sale")
            {
                sql = "SELECT  VOUCHERINFO.Vdate, ACCOUNT.Name AS PartyName,VOUCHERINFO.Vnumber, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Description.Description, Voucherdet.orgpacking, Voucherdet.Quantity, Voucherdet.Quantity * Voucherdet.Pvalue AS Literage, Voucherdet.Rate_am, Voucherdet.qd, Voucherdet.cd, Voucherdet.flatdis, Voucherdet.Taxabelamount, Voucherdet.rate1 + Voucherdet.rate2 + Voucherdet.rate3 + Voucherdet.rate4 AS Tax_rate, Voucherdet.taxamt1 + Voucherdet.taxamt2 + Voucherdet.taxamt3 + Voucherdet.taxamt4 AS Tax_amt, Voucherdet.Taxabelamount + Voucherdet.taxamt1 + Voucherdet.taxamt2 + Voucherdet.taxamt3 + Voucherdet.taxamt4 AS total, VOUCHERTYPE.Type FROM Description RIGHT OUTER JOIN Voucherdet ON Description.Des_id = Voucherdet.Des_ac_id RIGHT OUTER JOIN VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id LEFT OUTER JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id ON Voucherdet.Vi_id = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO." + datepat + " >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO." + datepat + " <= '" + DateTo.ToString(Database.dformat) + "') " + substr + ") and (VOUCHERTYPE.Type='Sale' or VOUCHERTYPE.Type='Return')) ORDER BY VOUCHERINFO.Vdate, PartyName";
            }
            
            if (type == "Purchase")
            {
                sql = "SELECT  VOUCHERINFO.Vdate, ACCOUNT.Name AS PartyName,VOUCHERINFO.Vnumber, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, Description.Description, Voucherdet.orgpacking, Voucherdet.Quantity, Voucherdet.Quantity * Voucherdet.Pvalue AS Literage, Voucherdet.Rate_am, Voucherdet.qd, Voucherdet.cd, Voucherdet.flatdis, Voucherdet.Taxabelamount, Voucherdet.rate1 + Voucherdet.rate2 + Voucherdet.rate3 + Voucherdet.rate4 AS Tax_rate, Voucherdet.taxamt1 + Voucherdet.taxamt2 + Voucherdet.taxamt3 + Voucherdet.taxamt4 AS Tax_amt, Voucherdet.Taxabelamount + Voucherdet.taxamt1 + Voucherdet.taxamt2 + Voucherdet.taxamt3 + Voucherdet.taxamt4 AS total, VOUCHERTYPE.Type FROM Description RIGHT OUTER JOIN Voucherdet ON Description.Des_id = Voucherdet.Des_ac_id RIGHT OUTER JOIN VOUCHERINFO LEFT OUTER JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id LEFT OUTER JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id ON Voucherdet.Vi_id = VOUCHERINFO.Vi_id WHERE (((VOUCHERINFO." + datepat + " >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO." + datepat + " <= '" + DateTo.ToString(Database.dformat) + "') " + substr + ") and (VOUCHERTYPE.Type='Purchase' or VOUCHERTYPE.Type='P Return')) ORDER BY VOUCHERINFO.Vdate, PartyName";
            }


            dt = new DataTable();
            Database.GetSqlData(sql, dt);


            tdt = new DataTable();
            if (type == "Sale")
            {
                if (dt.Select("Type='Sale' or Type='Return'").Length <= 0)
                {
                    return false;
                }
                tdt = dt.Select("Type='Sale' or Type='Return'").CopyToDataTable();                
            }
            if (type == "Purchase")
            {
                if (dt.Select("Type='Purchase' or Type='P Return'").Length <= 0)
                {
                    return false;
                }
                tdt = dt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
            }
            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                {
                    tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                    tdt.Rows[i]["Total"] = double.Parse(tdt.Rows[i]["Total"].ToString()) * -1;
                }
            }

            tdt = tdt.DefaultView.ToTable();
            tdt.Columns.Remove("Type");            

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            if (type == "Sale")
            {
                tdt.Columns.Remove("Svnum");
                tdt.Columns.Remove("Svdate");

                string[,] col = new string[2, 3]{
                    { "Vdate", "1", "1" },
                    { "PartyName", "0", "0" }
                    };

                     string[,] Cwidth = new string[15, 8] { 
                    { "Voucher Date", "", "0" ,"","","","",""},                    
                    { "Party Name", "150", "0" ,"","","","",""},
                    { "Voucher No", "50", "0" ,"","","","",""},
                    { "Description", "150", "0","Total" ,"","","",""},
                    { "Packing", "50", "0","","","" ,"",""},
                    { "Quantity", "80", "1","|sum(Quantity)","","","","" },
                    { "Literage", "80", "1","|sum(Literage)","","","","" },
                    { "Rate", "80", "1","|sum(Rate_am)","","","","" },
                    { Feature.Available("Show Text on Discount1"), "80", "1","|sum(qd)","","","","" },
                    { Feature.Available("Show Text on Discount2"), "80", "1","|sum(cd)","","","","" },
                    { Feature.Available("Show Text on Discount3"), "80", "1","|sum(flatdis)" ,"","","",""},
                    { "Taxable Amount", "80", "1","|sum(Taxabelamount)","","","","" },
                    { "Tax Rate", "80", "1","|sum(Tax_rate)","","","","" },
                    { "Tax Amount", "80", "1","|sum(Tax_amt)","","","","" },
                    { "Total", "80", "1","|sum(Total)","","","","" }                   
                    };
                        CreateReport(tdt, col, Cwidth);
                        return true;
                
            }
            else
            {

                tdt.Columns.Remove("vnumber");

                        string[,] col = new string[2, 3]{
                    { "Vdate", "1", "1" },
                    { "PartyName", "0", "0" }
                    };

                    string[,] Cwidth = new string[16, 8] { 
                    { "Voucher Date", "", "0" ,"","","","",""},
                    { "Party Name", "200", "0" ,"","","","",""},
                    { "Svnum", "80", "0","" ,"","","",""},
                    { "Sdate", "80", "0","","","","","" },
                    { "Description", "150", "0","Total" ,"","","",""},
                    { "Packing", "50", "0","","","" ,"",""},
                    { "Quantity", "80", "1","|sum(Quantity)","","","","" },
                    { "Literage", "80", "1","|sum(Literage)","","","","" },
                    { "Rate", "80", "1","|sum(Rate_am)","","","","" },
                    { Feature.Available("Show Text on Discount1"), "80", "1","|sum(qd)","","","","" },
                    { Feature.Available("Show Text on Discount2"), "80", "1","|sum(cd)","","","","" },
                    { Feature.Available("Show Text on Discount3"), "80", "1","|sum(flatdis)" ,"","","",""},
                    { "Taxable Amount", "80", "1","|sum(Taxabelamount)","","","","" },
                    { "Tax Rate", "80", "1","|sum(Tax_rate)","","","","" },
                    { "Tax Amount", "80", "1","|sum(Tax_amt)","","","","" },
                    { "Total", "80", "1","|sum(Total)","","","","" }                   
                    };
                CreateReport(tdt, col, Cwidth);
                return true;
            }
           
        }

        public bool AgentSalesmanReport(DateTime DateFrom, DateTime DateTo, string substr, string type)
        {
            button8.Visible = true;
            groupBox2.Visible = false;
            stdt = DateFrom;
            endt = DateTo;
            gSubstr = substr;
            if (type == "Agent")
            {
                frmptyp = "Agent Report";
            }

            else
            {
                frmptyp = "Salesman Report";
            }
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = frmptyp +", for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            
            dataGridView1.Columns.Clear();


            sql = "SELECT QryItemTranjection.Type, QryItemTranjection.Vdate, QryItemTranjection.DocNumber, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Description, QryItemTranjection.Quantity,  QryItemTranjection.Quantity* QryItemTranjection.Pvalue as Vol,QryItemTranjection.Rate_am, QryItemTranjection.Packing, QryItemTranjection.ItemAmount FROM QryItemTranjection where (Type='Sale' or type='Return') " + substr;
            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ", "Type,DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {

                        tdt.Rows[i]["Vol"] = double.Parse(tdt.Rows[i]["Vol"].ToString()) * -1;
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }


                }
                tdt.Columns.Remove("Type");
           
                tdt.DefaultView.Sort = "vdate,DocNumber";
                tdt = tdt.DefaultView.ToTable();

            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
 
            {"vdate", "1", "1" },
            {"DocNumber", "1", "0" }
            };



            string[,] Cwidth = new string[9, 8] { 
            { "Vdate", "0", "0","" ,"","","","" },
            { "DocNumber", "150", "0","" ,"","" ,"",""},
            { "ACCOUNT.Name", "150", "0","" ,"","","","" },
        
           
            { "Description", "150", "0","Total amount" ,"Doc. Amount","","","" },
            { "Quantity", "100", "0","|sum(Quantity)" ,"|sum(Quantity)","","","" },
            { "Volume", "100", "0","|sum(vol)" ,"|sum(vol)","","","" },
            { "Rate_am", "100", "0",""  ,"","","",""},
            { "Packing", "100", "0","" ,"","","","" },
            { "ItemAmount", "150", "0","|sum(Itemamount)" ,"|sum(ItemAmount)","","",""},
           
            };



            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool RCMRegister(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "RCM Register";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "RCM Register  , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
                sql = "SELECT VOUCHERTYPE.Type,ACCOUNT.Name, ACCOUNT.Tin_number AS GSTIN, VOUCHERINFO.Svnum, VOUCHERINFO.Vnumber, VOUCHERINFO.Svdate, VOUCHERINFO.Vdate, Voucherdet.TotTaxPer, Sum(Voucherdet.Quantity*Voucherdet.Pvalue) AS Qty, Sum(Voucherdet.Taxabelamount) AS ItemTaxable, Sum(Voucherdet.taxamt3) AS Tax3,Sum(Voucherdet.taxamt1) AS Tax1, Sum(Voucherdet.taxamt2) AS Tax2,  Sum(Voucherdet.taxamt4) AS Tax4, Sum(Voucherdet.Taxabelamount+Voucherdet.taxamt1+Voucherdet.taxamt2+Voucherdet.taxamt3+Voucherdet.taxamt4) AS Voucheramount, VOUCHERINFO.RCM, VOUCHERINFO.[5000Allowed] FROM ((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Voucherdet ON VOUCHERINFO.Vi_id = Voucherdet.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id WHERE (((VOUCHERTYPE.Type)='RCM') AND ((VOUCHERTYPE.A)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERTYPE.Type,ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Vnumber, VOUCHERINFO.Svdate, VOUCHERINFO.Vdate, Voucherdet.TotTaxPer, VOUCHERINFO.RCM, VOUCHERINFO.[5000Allowed] ORDER BY VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate;";
            }
            else
            {
                sql = "SELECT VOUCHERTYPE.Type,ACCOUNT.Name, ACCOUNT.Tin_number AS GSTIN, VOUCHERINFO.Svnum, VOUCHERINFO.Vnumber, VOUCHERINFO.Svdate, VOUCHERINFO.Vdate, Voucherdet.TotTaxPer, Sum(Voucherdet.Quantity*Voucherdet.Pvalue) AS Qty, Sum(Voucherdet.Taxabelamount) AS ItemTaxable, Sum(Voucherdet.taxamt3) AS Tax3,Sum(Voucherdet.taxamt1) AS Tax1, Sum(Voucherdet.taxamt2) AS Tax2,  Sum(Voucherdet.taxamt4) AS Tax4, Sum(Voucherdet.Taxabelamount+Voucherdet.taxamt1+Voucherdet.taxamt2+Voucherdet.taxamt3+Voucherdet.taxamt4) AS Voucheramount, VOUCHERINFO.RCM, VOUCHERINFO.[5000Allowed] FROM ((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Voucherdet ON VOUCHERINFO.Vi_id = Voucherdet.Vi_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id2 = ACCOUNT.Ac_id WHERE (((VOUCHERTYPE.Type)='RCM') AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY VOUCHERTYPE.Type,ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, VOUCHERINFO.Vnumber, VOUCHERINFO.Svdate, VOUCHERINFO.Vdate, Voucherdet.TotTaxPer, VOUCHERINFO.RCM, VOUCHERINFO.[5000Allowed] ORDER BY VOUCHERINFO.Vnumber, VOUCHERINFO.Vdate;";
            }

            dt.Clear();

            Database.GetSqlData(sql, dt);
            if (dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ").Length < 0)
            {
                return false;
            }
            
            DataRow[] drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " and Vdate<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();           
                tdt = tdt.DefaultView.ToTable();
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            tdt.Columns.Remove("Vnumber");
            tdt.Columns.Remove("Vdate");
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", tintext = "", CName = "", CCode = "";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tintext = "TIN";
                CName = "Category Name";
                CCode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                tintext = "GSTIN";
                CName = "HSN Name";
                CCode = "HSN Code";
            }

            string[,] col = new string[1, 3]{
            { "Type", "1", "1" }            
            };

            string[,] Cwidth = new string[15, 8] { 
            { "TYPE", "", "0" ,"","","","",""},          
            { "Name", "350", "0","" ,"","","",""},
            { tintext, "150", "0","","","","","" },
            { "Voucher No", "150", "0","" ,"","","",""},
            { "Voucher Date", "150", "0","","","" ,"",""},
            { "Tax%", "150", "0","Grand Total","Total","" ,"",""},
            { "Qty", "150", "0","|sum(Qty)","|sum(Qty)","","","" },           
            { "Taxable Amount", "100", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","","","" },
            {  taxname3 , "100", "0","|sum(Tax3)","|sum(Tax3)","","","" },
            {  taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","" ,"",""},
            {  taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","","","" },            
            {  taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","","","" },
            { "Amount", "100", "0","|sum(Voucheramount)","|sum(Voucheramount)","","","" },
            { "RCM", "100", "0","","","","","" },
            { "5000Allowed", "100", "0","","","","","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool CommoditySale(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Commodity Sale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = accnm;
            this.Text = frmptyp;
            DecsOfReport = "Commodity Sale of "+ accnm +" , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.IsKacha == false)
            {
            }
            else
            {
                sql = "SELECT VOUCHERTYPE.Name, VOUCHERTYPE.Type, VOUCHERINFO.Vdate, (ACCOUNT.Name " + access_sql.Concat + " ' ' " + access_sql.Concat + " " + access_sql.fnstring("ACCOUNT.Address1='None'", "''", "ACCOUNT.Address1") + " " + access_sql.Concat + " ' ' " + access_sql.Concat + "" + access_sql.fnstring("ACCOUNT.Address2='None'", "''", "ACCOUNT.Address2") + ") AS AccName, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, Sum(VOUCHERDET.[Pvalue]*[Quantity]) AS Qty,  Voucherdet.Rate_Unit as Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2+VOUCHERDET.taxamt3+VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "')) GROUP BY VOUCHERTYPE.Name, VOUCHERTYPE.Type, VOUCHERINFO.Vdate, ACCOUNT.Tin_number, VOUCHERINFO.Invoiceno, ACCOUNT.Name, ACCOUNT.Address1, ACCOUNT.Address2, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate,Voucherdet.Rate_Unit, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            }

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+"");
            tdt.Clear();
            
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Sale' or Type='Return'").Length == 0)
                {
                    return false;
                }
                else
                {
                    tdt = tdt.Select("Type='Sale' or Type='Return'").CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {

                            tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                            tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                            tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                            tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                            tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                            tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                            tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                        }
                        if (tdt.Rows[i]["Tin_number"].ToString() == "0")
                        {
                            tdt.Rows[i]["Tin_number"] = "";
                        }                        
                    }
                }
                tdt.Columns.Remove("Type");
                tdt = tdt.DefaultView.ToTable();
            }          

            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", taxcategoryname = "", taxcategorycode = "",tin="";
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                tin = "TIN";
                taxcategoryname = "Category Name";
                taxcategorycode = "Category Code";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                taxcategoryname = "HSN Name";
                tin = "GSTIN";
                taxcategorycode = "HSN Code";
            } 

            string[,] col = new string[2, 3]{
            { "Name", "1", "1" },
            { "Vdate", "0", "1" }
            };

            string[,] Cwidth = new string[13, 8] { 
            { "Name", "", "0" ,"","","","",""},
            { "Date", "150", "0" ,"","","","",""},
            { "Name/Address", "500", "0","" ,"","","",""},
            { tin, "150", "1","","","" ,"",""},
            { "Invoice No", "150", "0","" ,"","","",""},
            { "Qty", "150", "0","Grand total","Gross Total","Total","","" },
            { "Unit", "100", "0","","","","","" },
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","|sum(ItemTaxable)","","" },
            { taxname3, "100", "0","|sum(Tax3)","|sum(Tax3)","|sum(Tax3)","","" },
            { taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","|sum(Tax1)","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","|sum(Tax2)","","" },            
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","|sum(Tax4)","","" },           
            { "Total Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","" }
            };

            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool CommodityPurchase(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Commodity Purchase";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = accnm;
            this.Text = frmptyp;
            DecsOfReport = "Commodity Purchase , for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            //if (Database.IsKacha == false)
            //{
                 sql = "SELECT VOUCHERTYPE.Name as VName, VOUCHERTYPE.Type, VOUCHERINFO.Vdate, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, Sum(VOUCHERDET.[Pvalue]*[Quantity]) AS Qty, Voucherdet.Rate_Unit as Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2+VOUCHERDET.taxamt3+VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "')) GROUP BY VOUCHERTYPE.Name, VOUCHERTYPE.Type, VOUCHERINFO.Vdate, ACCOUNT.Tin_number, VOUCHERINFO.Svnum,Voucherdet.Rate_Unit, ACCOUNT.Name, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE." + Database.BMode + " HAVING (((VOUCHERTYPE." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //}
            //else
            //{
            //    sql = "SELECT VOUCHERTYPE.Name as VName, VOUCHERTYPE.Type, VOUCHERINFO.Vdate, ACCOUNT.Name, ACCOUNT.Tin_number, VOUCHERINFO.Svnum, Sum(VOUCHERDET.[Pvalue]*[Quantity]) AS Qty, Voucherdet.Rate_Unit as Utype, Sum(VOUCHERDET.Taxabelamount) AS ItemTaxable, Sum(VOUCHERDET.taxamt3) AS Tax3,Sum(VOUCHERDET.taxamt1) AS Tax1, Sum(VOUCHERDET.taxamt2) AS Tax2,  Sum(VOUCHERDET.taxamt4) AS Tax4, Sum(VOUCHERDET.Taxabelamount+VOUCHERDET.taxamt1+VOUCHERDET.taxamt2+VOUCHERDET.taxamt3+VOUCHERDET.taxamt4) AS VoucherNetAmt FROM (((VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN (VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) ON VOUCHERINFO.Vi_id = VOUCHERDET.Vi_id) LEFT JOIN TAXCATEGORY ON VOUCHERDET.Category_Id = TAXCATEGORY.Category_Id WHERE (((TAXCATEGORY.Category_Name)='" + accnm + "')) GROUP BY VOUCHERTYPE.Name, VOUCHERTYPE.Type, VOUCHERINFO.Vdate, ACCOUNT.Tin_number, VOUCHERINFO.Svnum,Voucherdet.Rate_Unit, ACCOUNT.Name, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Vnumber, VOUCHERTYPE.B HAVING (((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) ORDER BY VOUCHERINFO.Vdate, VOUCHERINFO.Vnumber";
            //}

            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow = dt.Select("Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+"");
            tdt.Clear();

            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                if (tdt.Select("Type='Purchase' or Type='P Return'").Length > 0)
                {
                    tdt = tdt.Select("Type='Purchase' or Type='P Return'").CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {
                            tdt.Rows[i]["Qty"] = double.Parse(tdt.Rows[i]["Qty"].ToString()) * -1;
                            tdt.Rows[i]["VoucherNetAmt"] = double.Parse(tdt.Rows[i]["VoucherNetAmt"].ToString()) * -1;
                            tdt.Rows[i]["ItemTaxable"] = double.Parse(tdt.Rows[i]["ItemTaxable"].ToString()) * -1;
                            tdt.Rows[i]["Tax1"] = double.Parse(tdt.Rows[i]["Tax1"].ToString()) * -1;
                            tdt.Rows[i]["Tax2"] = double.Parse(tdt.Rows[i]["Tax2"].ToString()) * -1;
                            tdt.Rows[i]["Tax3"] = double.Parse(tdt.Rows[i]["Tax3"].ToString()) * -1;
                            tdt.Rows[i]["Tax4"] = double.Parse(tdt.Rows[i]["Tax4"].ToString()) * -1;
                        }
                    }
                    tdt.Columns.Remove("Type");
                    tdt = tdt.DefaultView.ToTable();
                }
            }

            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            string taxname1 = "", taxname2 = "", taxname3 = "", taxname4 = "", taxcategoryname = "", taxcategorycode = "", tin = ""; ;
            if (Feature.Available("Taxation Applicable") == "VAT")
            {
                taxname1 = "VAT";
                taxname2 = "SAT";
                taxname3 = "CST";
                taxname4 = "Service Tax";
                taxcategoryname = "Category Name";
                taxcategorycode = "Category Code";
                tin = "TIN";
            }
            else
            {
                taxname1 = "CGST";
                taxname2 = "SGST";
                taxname3 = "IGST";
                taxname4 = "Cess";
                taxcategoryname = "HSN Name";
                tin = "GSTIN";
                taxcategorycode = "HSN Code";
            }

            string[,] col = new string[2, 3]{
            { "VName", "1", "1" },
            { "Vdate", "0", "1" }
            };

            string[,] Cwidth = new string[13, 8] { 
            { "Name", "", "0" ,"","","","",""},
            { "Date", "150", "0" ,"","","","",""},
            { "Name/Address", "500", "0","" ,"","","",""},
            { tin, "150", "1","","","","",""},
            { "Invoice No", "150", "0","" ,"","","",""},
            { "Qty", "150", "0","Grand total","Gross Total","Total","","" },
            { "Unit", "100", "0","","","","",""},
            { "Taxable Amount", "200", "0","|sum(ItemTaxable)","|sum(ItemTaxable)","|sum(ItemTaxable)","","" },
            { taxname3, "100", "0","|sum(Tax3)","|sum(Tax3)","|sum(Tax3)","","" },
            { taxname1 , "100", "0","|sum(Tax1)","|sum(Tax1)","|sum(Tax1)","","" },
            { taxname2, "100", "0","|sum(Tax2)","|sum(Tax2)","|sum(Tax2)","","" },            
            { taxname4, "100", "0","|sum(Tax4)","|sum(Tax4)","|sum(Tax4)" ,"",""},           
            { "Total Amount", "200", "0","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","|sum(VoucherNetAmt)","","" }
            };          
            CreateReport(tdt, col, Cwidth);
            return true;
        }

        public bool BrokerDetailItemWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Broker Detail Item Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Broker Detail Item Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
         
           // if (Database.IsKacha== false)
            //{
               sql= "SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Vdate, QryItemTranjection.[Agent], QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount, QryItemTranjection.[Commission%], QryItemTranjection.[Commission@] FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            //else
            //{
              //  sql = "SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.[ACCOUNT.Name], QryItemTranjection.Vdate, QryItemTranjection.[Contractor.Name], QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount, QryItemTranjection.[Commission%], QryItemTranjection.[Commission@] FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Sale' Or (QryItemTranjection.[Type])='Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("Agent='" + accnm + "' and Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                    }

                    tdt.Rows[i]["Commission%"] = (double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * double.Parse(tdt.Rows[i]["Commission%"].ToString()) / 100);
                    tdt.Rows[i]["Commission@"] = (double.Parse(tdt.Rows[i]["Quantity"].ToString()) * double.Parse(tdt.Rows[i]["Commission@"].ToString()));

                }
                tdt.Columns.Remove("Type");
                tdt.Columns.Remove("Agent");
                tdt.DefaultView.Sort = "OrgDescription,Packing";
                tdt = tdt.DefaultView.ToTable();

            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            {"OrgDescription", "1", "0" },
            {"Packing", "0", "1" }};


            string[,] Cwidth = new string[11, 8] { 
            
            { "Description", "", "0",""  ,"","","",""},
            { "Packing", "75", "0" ,"" ,"","","",""},
            { "Name", "100", "0",""  ,"","","",""},
            { "Vdate", "100", "0",""  ,"","","",""},
            { "DocNumber", "100", "0","" ,"","" ,"",""},
            { "Description", "150", "0","Total Amount" ,"","Amount","","" },
            { "Quantity", "100", "0" ,"" ,"","|sum(Quantity)","",""},
            { "Rate_am", "100", "0",""  ,"","","",""},
            { "ItemAmount", "125", "0",""  ,"","|sum(ItemAmount)","","" },
            { "Commission%", "75", "1","" ,"","|sum([Commission%])","",""  },
            { "Commission@", "75", "1",""  ,"","|sum([Commission@])","","" }
           
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }


        public bool CustomerBrokerage(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Customer Brokerage";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = accnm;
            AccName = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Customer Brokerage, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
           
            //if (Database.IsKacha== false)
            //{
                sql = "SELECT Type, Vdate,[ACCOUNT.Name], DocNumber, Description, Packing, Quantity, Rate_am, ItemAmount, [Commission%],[Commission@]";
                sql += " FROM QryItemTranjection WHERE ((([Type])='Sale' Or ([Type])='Return') AND (("+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";

            //}
            //else
            //{
            //    sql = "SELECT Type, Vdate, [ACCOUNT.Name], DocNumber, Description,Packing, Quantity, Rate_am, ItemAmount, [Commission%], [Commission@]";
            //    sql += " FROM QryItemTranjection WHERE ((([Type])='Sale' Or ([Type])='Return') AND ((B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);
            DataRow[] drow;
            drow = dt.Select("[ACCOUNT.Name]='" + accnm + "' and Vdate>="+ access_sql.Hash+ DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<=" + access_sql.Hash +DateTo.ToString(Database.dformat) + access_sql.Hash+"", "DocNumber");
            tdt.Clear();
            if (drow.GetLength(0) > 0)
            {
                tdt = drow.CopyToDataTable();
                for (int i = 0; i < tdt.Rows.Count; i++)
                {
                    if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                    {
                        tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                        tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;

                    }

                    tdt.Rows[i]["Commission%"] = (double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * double.Parse(tdt.Rows[i]["Commission%"].ToString()) / 100);
                    tdt.Rows[i]["Commission@"] = (double.Parse(tdt.Rows[i]["Quantity"].ToString()) * double.Parse(tdt.Rows[i]["Commission@"].ToString()));

                }
                tdt.Columns.Remove("ACCOUNT.Name");
                tdt.DefaultView.Sort = "Type,Vdate,DocNumber";
                tdt = tdt.DefaultView.ToTable();
                tdt.Columns.Remove("Type");


            }
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[2, 3] {
            {"Vdate", "1", "0" },
            {"DocNumber", "1", "1" }};


            string[,] Cwidth = new string[9, 8] { 
            { "Vdate", "", "0","","","","","" },
            { "DocNumber", "", "0","","","","","" },
            { "Description", "350", "0","Total Amount","","Amount","","" },
            { "Packing", "100", "0" ,"","","","",""},
            { "Quantity", "100", "0" ,"","","","",""},
            { "Rate_am", "100", "0","","","","","" },
            { "ItemAmount", "150", "0","|sum(ItemAmount)" ,"","|sum(ItemAmount)","","" },
            { "Commission%", "100", "1",">sum([Commission%])","",">10>sum([Commission%])","","" },
            { "Commission@", "100", "1","|sum([Commission@])","","|sum([Commission@])","",""  }
            };

            CreateReport(tdt, col, Cwidth);

            return true;
        }


        public bool SupplierDetailItemWise(DateTime DateFrom, DateTime DateTo, string accnm)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Supplier Detail Item Wise";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Supplier Detail Item Wise, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Feature.Available("Discount on Grid") == "Yes")
            {
                //if (Database.IsKacha == false)
                //{

                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.Svdate, QryItemTranjection.[ACCOUNT.Name], " + access_sql.Svnum + " AS Sbill, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.qd, QryItemTranjection.cd , QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";

                //}
                //else
                //{
                //    sql = "SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.Svdate, QryItemTranjection.[ACCOUNT.Name],"+access_sql.Svnum+" AS Sbill, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am,  QryItemTranjection.qd, QryItemTranjection.cd,QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
                //}
                dt.Rows.Clear();
                dt.Columns.Clear();

                Database.GetSqlData(sql, dt);
                DataRow[] drow;
                drow = dt.Select("Account.Name='" + accnm + "' and Svdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Svdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "DocNumber");
                tdt.Clear();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["qd"].ToString() == "")
                        {
                            tdt.Rows[i]["qd"] = 0;
                        }
                        if (tdt.Rows[i]["cd"].ToString() == "")
                        {
                            tdt.Rows[i]["cd"] = 0;
                        }

                      
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {
                            tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                            tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;
                            tdt.Rows[i]["qd"] = double.Parse(tdt.Rows[i]["qd"].ToString()) * -1;
                            tdt.Rows[i]["cd"] = double.Parse(tdt.Rows[i]["cd"].ToString()) * -1;

                        }

                    }

                    tdt.Columns.Remove("Type");
                    tdt.Columns.Remove("Account.Name");
                    tdt.DefaultView.Sort = "OrgDescription,Packing";
                    tdt = tdt.DefaultView.ToTable();
                }
                if (tdt.Rows.Count == 0)
                {

                    return false;
                }

                string[,] col = new string[2, 3] {
                {"OrgDescription", "1", "0" },
                {"Packing", "0", "1" } };


                string[,] Cwidth = new string[11, 8] { 
                { "", "0", "0",""  ,"","","",""},
                { "Description", "175", "0"," " ,"","","","" },
                { "Svdate", "100", "0"," " ,"","","","" },
                { "Sbill", "100", "0"," "  ,"","","",""},
                { "DocNumber", "100", "0"," " ,"","","","" },
                { "Description", "150", "0","Total Amount" ,"","Amount","",""},
                { "Quantity", "75", "0"," " ,"","|sum(Quantity)","","" },
                { "Rate_am", "100", "0"," "  ,"","","",""},
                { "QD", "50", "0"," "  ,"","","",""},
                { "CD", "50", "0"," "  ,"","","",""},

                { "ItemAmount", "100", "0" , "|sum(ItemAmount)" ,"","|sum(ItemAmount)","",""}
              
                };

                CreateReport(tdt, col, Cwidth);
            }
            else
            {
                //if (Database.IsKacha == false)
                //{

                sql = "SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.Svdate, [ACCOUNT.Name] as Name, " + access_sql.Svnum + "AS Sbill, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection." + Database.BMode + ")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + "))";

                //}

                //else

                //{
                   
                //     sql = "SELECT QryItemTranjection.Type, QryItemTranjection.OrgDescription, QryItemTranjection.Packing, QryItemTranjection.Svdate, QryItemTranjection.Account.Name, "+access_sql.Svnum+" AS Sbill, QryItemTranjection.DocNumber, QryItemTranjection.Description, QryItemTranjection.Quantity, QryItemTranjection.Rate_am, QryItemTranjection.ItemAmount FROM QryItemTranjection WHERE (((QryItemTranjection.[Type])='Purchase' Or (QryItemTranjection.[Type])='P Return') AND ((QryItemTranjection.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
                //}
                dt.Rows.Clear();
                dt.Columns.Clear();

                Database.GetSqlData(sql, dt);
                DataRow[] drow;
                drow = dt.Select("Name='" + accnm + "' and Svdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Svdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" ", "DocNumber");
                tdt.Clear();
                if (drow.GetLength(0) > 0)
                {
                    tdt = drow.CopyToDataTable();
                    for (int i = 0; i < tdt.Rows.Count; i++)
                    {
                        if (tdt.Rows[i]["Type"].ToString() == "Return" || tdt.Rows[i]["Type"].ToString() == "P Return")
                        {
                            tdt.Rows[i]["Quantity"] = double.Parse(tdt.Rows[i]["Quantity"].ToString()) * -1;
                            tdt.Rows[i]["ItemAmount"] = double.Parse(tdt.Rows[i]["ItemAmount"].ToString()) * -1;

                        }

                    }

                    tdt.Columns.Remove("Type");
                    tdt.Columns.Remove("Name");
                    tdt.DefaultView.Sort = "OrgDescription,Packing";
                    tdt = tdt.DefaultView.ToTable();
                }
                if (tdt.Rows.Count == 0)
                {

                    return false;
                }

                string[,] col = new string[2, 3] {
                {"OrgDescription", "1", "0" },
                {"Packing", "0", "1" } };


                string[,] Cwidth = new string[9, 8] { 
                { "", "0", "0",""  ,"","","",""},
                { "Description", "175", "0"," " ,"","","","" },
                { "Svdate", "100", "0"," " ,"","" ,"",""},
                { "Sbill", "100", "0"," "  ,"","","",""},
                { "DocNumber", "100", "0"," " ,"","" ,"",""},
                { "Description", "175", "0","Total Amount" ,"","Amount","",""},
                { "Quantity", "100", "0"," " ,"","|sum(Quantity)","","" },
                { "Rate_am", "100", "0"," "  ,"","","",""},
                { "ItemAmount", "150", "0" , "|sum(ItemAmount)" ,"","|sum(ItemAmount)","",""},
              
                };

                CreateReport(tdt, col, Cwidth);
            }

            return true;
        }




        public bool OpeningTrial(DateTime DateFrom, DateTime DateTo)
        {
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Opening Trial Balance";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Opening Trial Balance, as on " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Database.BMode=="A")
            {
                sql = "Select Name, " + access_sql.fnstring("ACCOUNT.Balance>0", "ACCOUNT.Balance", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance<0", "-1*(ACCOUNT.Balance)", "0") + " AS Cr  from Account";
            }
            else if (Database.BMode == "B")
            {
                sql = "Select Name, " + access_sql.fnstring("ACCOUNT.Balance2>0", "ACCOUNT.Balance2", "0") + " AS Dr, " + access_sql.fnstring("ACCOUNT.Balance2<0", "-1*(ACCOUNT.Balance2)", "0") + " AS Cr  from Account";
            }
            else if (Database.BMode == "AB")
            {
                sql = "Select Name, " + access_sql.fnstring("(ACCOUNT.Balance+ACCOUNT.Balance2)>0", "(ACCOUNT.Balance+ACCOUNT.Balance2)", "0") + " AS Dr, " + access_sql.fnstring("(ACCOUNT.Balance+ACCOUNT.Balance2)<0", "-1*(ACCOUNT.Balance+ACCOUNT.Balance2)", "0") + " AS Cr  from Account";
            }
       
            dt.Clear();
            Database.GetSqlData(sql, dt);
            dt.DefaultView.Sort = "Name";
            if (dt.Select("not (Dr=0 and Cr=0)").Length==0)
            {
                return false;
            }

            tdt = dt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }
            totdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
            totcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());
            if (totdr > totcr)
            {
                tdt.Rows.Add("Difference", "0", totdr - totcr);
            }
            else if (totdr < totcr)
            {
                tdt.Rows.Add("Difference", totcr - totdr, "0");
            }

            string[,] col = new string[0, 0];
            string[,] Cwidth = new string[3, 8] { 
            { "Account", "700", "0" ,"Total Amount","","","",""}, 
            { "Amount (Dr.)", "150", "1","|sum(Dr)","","","","" }, 
            { "Amount (Cr.)", "150", "1","|sum(Cr)" ,"","","",""} };

            CreateReport(tdt, col, Cwidth);

            return true;
        }


        public bool MovedAccountSummary(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Moved Account Summary";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "Moved Account Summary, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            //if (Database.IsKacha== false)
            //{
                sql = "SELECT QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal where Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" group by QryJournal.Name, QryJournal."+Database.BMode+" HAVING (((QryJournal."+Database.BMode+")="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            //else
            //{
            //    sql = "SELECT QryJournal.Name, Sum(QryJournal.Dr) AS Dr, Sum(QryJournal.Cr) AS Cr FROM QryJournal where Vdate>="+access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash+" and Vdate<="+access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash+" group by QryJournal.Name, QryJournal.B HAVING (((QryJournal.B)="+access_sql.Singlequote+"True"+access_sql.Singlequote+"))";
            //}
            dt.Clear();
            Database.GetSqlData(sql, dt);
            dt.DefaultView.Sort = "Name";
            if (dt.Select("not (Dr=0 and Cr=0)").Length==0)
            {
                return false;

            }
            tdt = dt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[0, 0];

            string[,] Cwidth = new string[3, 8] { 
            { "Account", "700", "0","Total Amount","","","","" }, 
            { "Amount (Dr.)", "150", "0","|sum(Dr)","","","","" }, 
            { "Amount (Cr.)", "150", "0","|sum(Cr)","","","","" } };
            CreateReport(tdt, col, Cwidth);

            return true;
        }
        public bool StatementofAffair(DateTime DateFrom, DateTime DateTo)
        {
             button8.Visible = true;
            double totdr = 0;
            double totcr = 0;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            frmptyp = "Statement of Affair";
            this.Text = frmptyp;
            label3.Enabled = false;
            textBox1.Enabled = false;
            checkBox1.Visible = true;
            DecsOfReport = "Statement of Affair, as on " + DateTo.ToString(Database.dformat);

            if (Database.BMode=="A")
            {
                sql = "SELECT ACCOUNTYPE.Nature, ACCOUNType.Name As ACCOUNTYPE, Sum(X.Dr1) AS Dr, Sum(X.Cr1) AS Cr FROM ((SELECT     Name, SUM(Dr) AS Dr1, SUM(Cr) AS Cr1    FROM         QryJournal  WHERE      (Vdate >=  " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Vdate <=  " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")   GROUP BY Name, " + Database.BMode + "    HAVING      (" + Database.BMode + " =  " + access_sql.Singlequote + "True " + access_sql.Singlequote + ")  UNION ALL   SELECT     Name, Dr, Cr   FROM         QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Nature, ACCOUNType.Name";
            }
            else if (Database.BMode == "B")
            {
                sql = "SELECT ACCOUNTYPE.Nature, ACCOUNType.Name  As ACCOUNTYPE, Sum(X.Dr1) AS Dr, Sum(X.Cr1) AS Cr FROM ((SELECT     Name, SUM(Dr) AS Dr1, SUM(Cr) AS Cr1    FROM         QryJournal  WHERE      (Vdate >=  " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Vdate <=  " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")   GROUP BY Name, " + Database.BMode + "    HAVING      (" + Database.BMode + " =  " + access_sql.Singlequote + "True " + access_sql.Singlequote + ")  UNION ALL   SELECT     Name, Dr2 As Dr, Cr2 As Cr   FROM         QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Nature, ACCOUNType.Name";
            }
            else if (Database.BMode == "AB")
            {
                sql = "SELECT ACCOUNTYPE.Nature, ACCOUNType.Name  As ACCOUNTYPE, Sum(X.Dr1) AS Dr, Sum(X.Cr1) AS Cr FROM ((SELECT     Name, SUM(Dr) AS Dr1, SUM(Cr) AS Cr1    FROM         QryJournal  WHERE      (Vdate >=  " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Vdate <=  " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")   GROUP BY Name, " + Database.BMode + "    HAVING      (" + Database.BMode + " =  " + access_sql.Singlequote + "True " + access_sql.Singlequote + ")  UNION ALL   SELECT     Name, Dr12 As Dr, Cr12 As Cr   FROM         QryAccountinfo)  AS X LEFT JOIN ACCOUNT ON X.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id GROUP BY ACCOUNTYPE.Nature, ACCOUNType.Name";
            }
            dt = new DataTable();
            Database.GetSqlData(sql, dt);


            tdt.Clear();


            dt.DefaultView.Sort = "Nature,ACCOUNTYPE";
            for (int i = 0; i < dt.Rows.Count; i++)
            {

                if (dt.Rows[i]["Nature"].ToString() == "L" || dt.Rows[i]["Nature"].ToString() == "A")
                {
                    dt.Rows[i]["Nature"] = "BalanceSheet";
                }
                else if (dt.Rows[i]["Nature"].ToString() == "I" || dt.Rows[i]["Nature"].ToString() == "E")
                {
                    dt.Rows[i]["Nature"] = " Profit & Loss";
                }
                else
                {
                    dt.Rows[i]["Nature"] = "";
                }
                totdr = double.Parse(dt.Rows[i]["Dr"].ToString());
                totcr = double.Parse(dt.Rows[i]["Cr"].ToString());
                if (totdr > totcr)
                {
                    dt.Rows[i]["Dr"] = totdr - totcr;
                    dt.Rows[i]["Cr"] = 0;
                }
                else if (totcr > totdr)
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = totcr - totdr;
                }
                else
                {
                    dt.Rows[i]["Dr"] = 0;
                    dt.Rows[i]["Cr"] = 0;
                }
            }


            if (dt.Select("not (Dr=0 and Cr=0)").Length == 0)
            {
                return false;
            }



            tdt = dt.Select("not (Dr=0 and Cr=0)").CopyToDataTable();
            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            totdr = double.Parse(tdt.Compute("sum(Dr)", "").ToString());
            totcr = double.Parse(tdt.Compute("sum(Cr)", "").ToString());
            string closingstock = "0";
            double balPro = 0, balBal=0;
            if (Database.IsKacha == false)
            {
                closingstock = Database.GetScalarText("Select Closing_Bal from Account where Act_id='SER28'");
                balPro = Database.GetScalarDecimal("SELECT Sum(Res.Amount) AS Amount FROM ((SELECT QryJournal.Name, QryJournal.Dr-QryJournal.Cr as Amount FROM QryJournal  WHERE QryJournal.A=" + access_sql.Singlequote + "True" + access_sql.Singlequote + " and  Vdate <=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "  UNION ALL  SELECT     Name, Balance AS Amount   FROM         ACCOUNT)  AS Res LEFT JOIN ACCOUNT ON Res.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Nature)='I')) OR (((ACCOUNTYPE.Nature)='E'));");
                balBal = Database.GetScalarDecimal("SELECT Sum(Res.Amount) AS Amount FROM ((SELECT QryJournal.Name, QryJournal.Dr-QryJournal.Cr as Amount FROM QryJournal  WHERE QryJournal.A=" + access_sql.Singlequote + "True" + access_sql.Singlequote + " and  Vdate <=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "  UNION ALL  SELECT     Name, Balance AS Amount   FROM         ACCOUNT)  AS Res LEFT JOIN ACCOUNT ON Res.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Nature)='A')) OR (((ACCOUNTYPE.Nature)='L'));");
            }
            else
            {
                closingstock = Database.GetScalarText("Select Closing_Bal2 from Account where Act_id='SER28'");
                balPro = Database.GetScalarDecimal("SELECT Sum(Res.Amount) AS Amount FROM ((SELECT QryJournal.Name, QryJournal.Dr-QryJournal.Cr as Amount FROM QryJournal  WHERE QryJournal.B=" + access_sql.Singlequote + "True" + access_sql.Singlequote + " and  Vdate <=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "  UNION ALL  SELECT     Name, Balance2 AS Amount   FROM         ACCOUNT)  AS Res LEFT JOIN ACCOUNT ON Res.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Nature)='I')) OR (((ACCOUNTYPE.Nature)='E'));");
                balBal = Database.GetScalarDecimal("SELECT Sum(Res.Amount) AS Amount FROM ((SELECT QryJournal.Name, QryJournal.Dr-QryJournal.Cr as Amount FROM QryJournal  WHERE QryJournal.B=" + access_sql.Singlequote + "True" + access_sql.Singlequote + " and  Vdate <=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + "  UNION ALL  SELECT     Name, Balance2  AS Amount   FROM         ACCOUNT)  AS Res LEFT JOIN ACCOUNT ON Res.Name = ACCOUNT.Name) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Nature)='A')) OR (((ACCOUNTYPE.Nature)='L'));");

            }

            if (closingstock == "")
            {
                closingstock = "0";
            }

            tdt.Rows.Add(" Profit & Loss", "Closing Stock", "0", closingstock);
            tdt.Rows.Add(" Profit & Loss", "Profit", double.Parse(closingstock) - balPro, "0");
            tdt.Rows.Add("BalanceSheet", "Closing Stock", closingstock, "0");
            tdt.Rows.Add("BalanceSheet", "Profit", "0", balBal + double.Parse(closingstock));
            if (totdr > totcr)
            {
                tdt.Rows.Add("D", "Difference in Opening Trial", "0", totdr - totcr);
            }
            else if (totcr > totdr)
            {
                tdt.Rows.Add("D", "Difference in Opening Trial", totcr - totdr, "0");
            }
            string[,] col = new string[1, 3] { { "Nature", "1", "1" } };
            string[,] Cwidth = new string[4, 8] {
              
                { "Name", "0", "0" ,"","" ,"","" ,"" }, 
                { "Account", "700", "0" ,"","" ,"","" ,"" }, 
                { "Amount (Dr.)", "150", "1","","|sum(Dr)","","" ,"" }, 
                { "Amount (Cr.)", "150", "1","","|sum(Cr)","","" ,"" } };
            CreateReport(tdt, col, Cwidth);



            return true;

        }

        public bool Journal(DateTime DateFrom, DateTime DateTo, string str)
        {
            gvtid = str;
            dataGridView1.Rows.Clear();
            frmptyp = "Journal";
            this.Text = frmptyp;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            groupBox2.Visible = false;
            DecsOfReport = "Journal, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);

            if (str != "")
            {
                str = "(" + str + ") and ";
            }

                sql = "SELECT CONVERT(nvarchar, Journal.Vdate, 106) AS Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)) AS DocNumber, ACCOUNT.Name, Journal.Narr, SUM(Journal.Amount) AS SumOfAmount, CASE WHEN SUM(Journal.Amount) > 0 THEN SUM(Journal.Amount) ELSE 0 END AS Dr, CASE WHEN SUM(Journal.Amount) < 0 THEN - 1 * SUM(Journal.Amount) ELSE 0 END AS Cr FROM ACCOUNT RIGHT OUTER JOIN Journal LEFT OUTER JOIN VOUCHERTYPE RIGHT OUTER JOIN VOUCHERINFO ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id ON Journal.Vi_id = VOUCHERINFO.Vi_id ON ACCOUNT.Ac_id = Journal.Ac_id WHERE " + str + " (Journal.Vdate >= " + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + ") AND (Journal.Vdate <= " + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ")  And Journal."+Database.BMode+"=1 GROUP BY Journal.Vdate, VOUCHERTYPE.Short + ' ' + CONVERT(nvarchar, VOUCHERINFO.Vdate, 112) + ' ' + CAST(VOUCHERINFO.Vnumber AS nvarchar(10)), ACCOUNT.Name, Journal.Narr, VOUCHERTYPE.Short ORDER BY Journal.Vdate, VOUCHERTYPE.Short, SumOfAmount DESC";
        
            dt.Clear();

            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }

            dt.Columns.Remove("SumOfAmount");
            string[,] col = new string[2, 3] { { "Vdate", "1", "1" }, { "DocNumber", "0", "0" } };

            string[,] Cwidth = new string[6, 8] { 
            { "Vdate", "0", "0","","","" ,"",""}, 
            { "Doc Number", "200", "0","","","","",""}, 
            { "Account", "300", "0","" ,"","","",""}, 
            { "Narration", "300", "0","Total Amount","Day Total","Doc. Total","","" }, 
            { "Amount (Dr.)", "100", "1","|sum(Dr)","|sum(Dr)","|sum(Dr)" ,"",""}, 
            { "Amount (Cr.)", "100", "1","|sum(Cr)","|sum(Cr)","|sum(Cr)" ,"",""} };

            CreateReport(dt, col, Cwidth);
            return true;
        }


        //public bool Journal(DateTime DateFrom, DateTime DateTo)
        //{
        //    dataGridView1.Rows.Clear();

        //    frmptyp = "Journal";
        //    this.Text = frmptyp;
        //    stdt = DateFrom;
        //    endt = DateTo;
        //    dateTimePicker1.Value = DateFrom;
        //    dateTimePicker2.Value = DateTo;
        //    label3.Enabled = false;
        //    textBox1.Enabled = false;
        //    DecsOfReport = "Journal, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
        //    if (Database.IsKacha == false)
        //    {
        //        sql = "SELECT Vdate, DocNumber, Name, Expr1, Dr, Cr FROM QryJournal WHERE (((A)="+access_sql.Singlequote+"True"+ access_sql.Singlequote+")) ORDER BY Vdate, Short, Vnumber, Cr, Dr;";

        //    }
        //    else
        //    {
        //        sql = "SELECT Vdate, DocNumber , Name, Expr1, Dr, Cr FROM QryJournal WHERE (((B)="+access_sql.Singlequote+"True"+ access_sql.Singlequote+")) ORDER BY Vdate, Short, Vnumber, Cr, Dr;";
              
        //    }
        //    dt.Clear();
        //    Database.GetSqlData(sql, dt);

        //    DataRow[] drow;

          
        //    drow = dt.Select("Vdate>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash +" and Vdate<=" +access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + " ");
           
        //    tdt.Clear();
        //    if (drow.GetLength(0) > 0)
        //    {
        //        tdt = drow.CopyToDataTable();
        //    }
            

        //    if (tdt.Rows.Count == 0)
        //    {
        //        return false;
        //    }
          

        //    string[,] col = new string[2, 3] { { "Vdate", "1", "1" }, { "DocNumber", "0", "0" } };

        //    string[,] Cwidth = new string[6, 8] { 
        //    { "Vdate", "0", "0","","","" ,"",""}, 
        //    { "Doc Number", "200", "0","","","","",""}, 
        //    { "Account", "300", "0","" ,"","","",""}, 
        //    { "Narration", "300", "0","Total Amount","Day Total","Doc. Total","","" }, 
        //    { "Amount (Dr.)", "100", "1","|sum(Dr)","|sum(Dr)","|sum(Dr)" ,"",""}, 
        //    { "Amount (Cr.)", "100", "1","|sum(Cr)","|sum(Cr)","|sum(Cr)" ,"",""} };

        //    CreateReport(tdt, col, Cwidth);

        //    return true;
        //}



        public bool StockLiquid(DateTime DateFrom, DateTime DateTo)
        {
            frmptyp = "Stock Liquid";
            this.Text = frmptyp;
            stdt = DateFrom;
            endt = DateTo;
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            DecsOfReport = "Stock Liquid, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);

            //if (Database.IsKacha == false)
            //{
                //sql = "SELECT OTHER.Name AS Company, DESCRIPTION.Description, PACKING.Name AS Packing, Sum(IIf(VOUCHERTYPE.Type='Sale',VOUCHERDET.Quantity,-1*VOUCHERDET.Quantity)) AS Quantity FROM ((((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id) LEFT JOIN VOUCHERINFO ON VOUCHERDET.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id WHERE (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Return') AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((VOUCHERTYPE.A)=True)) GROUP BY OTHER.Name, DESCRIPTION.Description, PACKING.Pvalue, PACKING.Name ORDER BY OTHER.Name, DESCRIPTION.Description, PACKING.Pvalue DESC";
                sql = "SELECT OTHER.Name AS Company, DESCRIPTION.Description, Description.Pack AS Packing, Sum(" + access_sql.fnstring("VOUCHERTYPE.Type='Sale'", "VOUCHERDET.Quantity", "-1*VOUCHERDET.Quantity") + ") AS Quantity FROM ((((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id)) LEFT JOIN VOUCHERINFO ON VOUCHERDET.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id WHERE (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Return') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE."+Database.BMode+")=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY OTHER.Name, DESCRIPTION.Description, DESCRIPTION.Pvalue, Description.Pack ORDER BY OTHER.Name, DESCRIPTION.Description, DESCRIPTION.Pvalue DESC";

            //}
            //else
            //{
            //    sql = "SELECT OTHER.Name AS Company, DESCRIPTION.Description, PACKING.Name AS Packing, Sum(IIf(VOUCHERTYPE.Type='Sale',VOUCHERDET.Quantity,-1*VOUCHERDET.Quantity)) AS Quantity FROM ((((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id) LEFT JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id) LEFT JOIN VOUCHERINFO ON VOUCHERDET.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id WHERE (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Return') AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((VOUCHERTYPE.B)=True)) GROUP BY OTHER.Name, DESCRIPTION.Description, PACKING.Pvalue, PACKING.Name ORDER BY OTHER.Name, DESCRIPTION.Description, PACKING.Pvalue DESC";

            //    sql = "SELECT OTHER.Name AS Company, DESCRIPTION.Description, Description.Pack AS Packing, Sum(" + access_sql.fnstring("VOUCHERTYPE.Type='Sale'", "VOUCHERDET.Quantity", "-1*VOUCHERDET.Quantity") + ") AS Quantity FROM ((((VOUCHERDET LEFT JOIN DESCRIPTION ON VOUCHERDET.Des_ac_id = DESCRIPTION.Des_id)) LEFT JOIN VOUCHERINFO ON VOUCHERDET.Vi_id = VOUCHERINFO.Vi_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN OTHER ON DESCRIPTION.Company_id = OTHER.Oth_id WHERE (((VOUCHERTYPE.Type)='Sale' Or (VOUCHERTYPE.Type)='Return') AND ((VOUCHERINFO.Vdate)>=" + access_sql.Hash + DateFrom.ToString(Database.dformat) + access_sql.Hash + " And (VOUCHERINFO.Vdate)<=" + access_sql.Hash + DateTo.ToString(Database.dformat) + access_sql.Hash + ") AND ((VOUCHERTYPE.B)=" + access_sql.Singlequote + "True" + access_sql.Singlequote + ")) GROUP BY OTHER.Name, DESCRIPTION.Description, DESCRIPTION.Pvalue, Description.Pack ORDER BY OTHER.Name, DESCRIPTION.Description, DESCRIPTION.Pvalue DESC";
            //}
            dt = new DataTable();
            Database.GetSqlData(sql, dt);

          

            if (dt.Rows.Count == 0)
            {
                return false;
            }


            string[,] col = new string[1, 3] { { "Company", "1", "0" } };

            string[,] Cwidth = new string[4, 8] { 
            { "Company", "0", "0","","","","","" }, 
            { "Description", "500", "0","","","","",""}, 
            { "Packing", "300", "0","" ,"","","",""}, 
            { "Quantity", "200", "0","","","","","" }, 
            };

            CreateReport(dt, col, Cwidth);

            return true;
        }



      
        private void CreateReport(DataTable dt, string[,] col, string[,] Cwidth)
        {
            dataGridView1.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.None;
            double TotBrokerage = 0;
            double TotRunn = 0;
            dataGridView1.Columns.Clear();
            for (int i1 = 0; i1 < dt.Columns.Count; i1++)
            {
                if (i1 >= col.GetLength(0) || col[i1, 1] == "0")
                {
                    dataGridView1.Columns.Add(dt.Columns[i1].ColumnName, Cwidth[i1, 0]);
                    dataGridView1.Columns[dt.Columns[i1].ColumnName].Width = int.Parse(Cwidth[i1, 1]);
                    if (int.Parse(Cwidth[i1, 1]) == 0)
                    {
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].Visible = false;

                    }
                    if (dt.Columns[i1].DataType.Name == "Decimal")
                    {
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

                    }
                    if (dt.Columns[i1].DataType.Name == "Int32")
                    {
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

                    }
                    if (dt.Columns[i1].DataType.Name == "Double")
                    {
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
                        dataGridView1.Columns[dt.Columns[i1].ColumnName].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

                    }
                }

            }

            dataGridView1.Rows.Clear();
            dataGridView1.Rows.Add();
          
            if (col.GetLength(0) > 0)
            {
                DataTable dtGp1 = dt.DefaultView.ToTable(true, col[0, 0]);
                for (int i1 = 0; i1 < dtGp1.Rows.Count; i1++)
                {
                    DataRow[] dr1 = dt.Select(col[0, 0] + "='" + dtGp1.Rows[i1][0] + "'");
                    if (col[0, 1] == "1")//Group one Header
                    {
                        if (dt.Columns[0].DataType.Name == "DateTime" && DateTime.Parse(dtGp1.Rows[i1][col[0, 0]].ToString()).ToString("yyyy") == "1801")
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = "";
                        }
                        else if (dt.Columns[0].DataType.Name == "DateTime")
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = DateTime.Parse(dtGp1.Rows[i1][col[0, 0]].ToString()).ToString("dd-MMM-yyyy");
                        }
                        else
                        {
                            DataTable dtSumh1 = dr1.CopyToDataTable();
                            for (int k1 = 0; k1 < dtSumh1.Columns.Count; k1++)
                            {

                                if (dtSumh1.Columns[dtSumh1.Columns[k1].ColumnName].DataType.Name == "DateTime" && DateTime.Parse(dtSumh1.Rows[0][dtSumh1.Columns[k1].ColumnName].ToString()).ToString("yyyy") == "1801")
                                {
                                    break;
                                }


                                if (Cwidth[k1, 6] == "")
                                {

                                }
                                else if (Cwidth[k1, 6].ToString().Substring(0, 1) == "|")
                                {
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Value = funs.IndianCurr(double.Parse(dtSumh1.Compute(Cwidth[k1, 6].ToString().TrimStart('|'), "").ToString()));
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                }
                                else if (Cwidth[k1, 6].ToString().Substring(0, 1) == "+")
                                {
                                    double val = double.Parse(dtSumh1.Compute(Cwidth[k1, 6].ToString().TrimStart('+'), "").ToString());
                                    if (val > 0)
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Value = funs.IndianCurr(val);
                                    }
                                    else
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Value = funs.IndianCurr(0);
                                    }
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                }
                                else
                                {
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Value = Cwidth[k1, 6].ToString();
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh1.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                }

                            }
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = dtGp1.Rows[i1][col[0, 0]].ToString();
                        }

                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                        dataGridView1.Rows.Add();
                    }


                    if (col.GetLength(0) > 1)
                    {
                        DataTable dt2 = dr1.CopyToDataTable();
                        DataTable dtGp2 = dt2.DefaultView.ToTable(true, col[1, 0]);
                        for (int i2 = 0; i2 < dtGp2.Rows.Count; i2++)
                        {
                            DataRow[] dr2 = dt2.Select(col[1, 0] + "='" + dtGp2.Rows[i2][0] + "'");
                            if (col[1, 1] == "1") //Group Two Header
                            {
                                if (dt2.Columns[1].DataType.Name == "DateTime" && DateTime.Parse(dtGp2.Rows[i2][col[1, 0]].ToString()).ToString("yyyy") == "1801")
                                {
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = "";
                                }
                                else if (dt2.Columns[1].DataType.Name == "DateTime")
                                {
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = DateTime.Parse(dtGp2.Rows[i2][col[1, 0]].ToString()).ToString("dd-MMM-yyyy");
                                }
                                else
                                {
                                    DataTable dtSumh2 = dr2.CopyToDataTable();
                                    for (int k1 = 0; k1 < dtSumh2.Columns.Count; k1++)
                                    {
                                        if (dtSumh2.Columns[dtSumh2.Columns[k1].ColumnName].DataType.Name == "DateTime" && DateTime.Parse(dtSumh2.Rows[0][dtSumh2.Columns[k1].ColumnName].ToString()).ToString("yyyy") == "1801")
                                        {
                                            break;
                                        }


                                      


                                        if (Cwidth[k1, 7] == "")
                                        {

                                        }
                                        else if (Cwidth[k1, 7].ToString().Substring(0, 1) == "|")
                                        {
                                            
                                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Value = funs.IndianCurr(double.Parse(dtSumh2.Compute(Cwidth[k1, 7].ToString().TrimStart('|'), "").ToString()));

                                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                                if (dtSumh2.Columns[dtSumh2.Columns[k1].ColumnName].DataType.Name == "Decimal" && Cwidth[k1, 2] == "1")
                                                {
                                                    if (double.Parse(dtSumh2.Compute(Cwidth[k1, 7].ToString().TrimStart('|'), "").ToString()) == 0)
                                                    {
                                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Value = "";
                                                    }

                                                }
                                        }
                                       
                                        else if (Cwidth[k1, 7].ToString().Substring(0, 1) == "+")
                                        {
                                            double val = double.Parse(dtSumh2.Compute(Cwidth[k1, 7].ToString().TrimStart('+'), "").ToString());
                                            if (val > 0)
                                            {
                                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Value = funs.IndianCurr(val);
                                            }
                                            else
                                            {
                                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Value = funs.IndianCurr(0);
                                            }
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                        }
                                        else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Decimal" && Cwidth[k1, 2] == "1")
                                        {

                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Value = "";
                                        }
                                        else
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Value = Cwidth[k1, 7].ToString();
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSumh2.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                        }

                                    }
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = dtGp2.Rows[i2][col[1, 0]].ToString();
                                }
                                //{
                                //    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Value = dtGp2.Rows[i2][col[1, 0]].ToString();
                                //}
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[0].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                dataGridView1.Rows.Add();
                            }

                            //detail section if two group
                            for (int j2 = 0; j2 < dr2.Length; j2++)
                            {
                                for (int k2 = 0; k2 < dt2.Columns.Count; k2++)
                                {
                                    if (k2 >= col.GetLength(0) || col[k2, 1] == "0")
                                    {
                                        if (j2 != 0 && dr2[j2][k2].ToString() == dr2[j2 - 1][k2].ToString() && k2 < 2)
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = "";
                                        }
                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "DateTime" && DateTime.Parse(dr2[j2][k2].ToString()).ToString("yyyy") == "1801")
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = "";
                                        }

                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "DateTime")
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = DateTime.Parse(dr2[j2][k2].ToString()).ToString("dd-MMM-yyyy");
                                        }
                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "Decimal" && Cwidth[k2, 2] == "1" && double.Parse(dr2[j2][k2].ToString()) == 0) 
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = "";
                                        }
                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "Decimal")
                                        {
                                           
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = funs.IndianCurr(double.Parse(dr2[j2][k2].ToString()));
                                        }
                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "Int32" && Cwidth[k2, 2] == "1" && double.Parse(dr2[j2][k2].ToString()) == 0)
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = "";
                                        }
                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "Double" && Cwidth[k2, 2] == "1" && double.Parse(dr2[j2][k2].ToString()) == 0)
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = "";
                                        }
                                        else if (dt.Columns[dt2.Columns[k2].ColumnName].DataType.Name == "Double")
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = funs.IndianCurr(double.Parse(dr2[j2][k2].ToString()));
                                        }

                                        else
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt2.Columns[k2].ColumnName].Value = dr2[j2][k2].ToString();
                                        }

                                    }
                                }
                                dataGridView1.Rows.Add();

                            }
                            if (col[1, 2] == "1") //Group two Footer
                            {
                                DataTable dtSum2 = dr2.CopyToDataTable();
                                for (int k2 = 0; k2 < dtSum2.Columns.Count; k2++)
                                {
                                    if (Cwidth[k2, 5] == "")
                                    {

                                    }
                                    else if (Cwidth[k2, 5].ToString().Substring(0, 1) == "|")
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(double.Parse(dtSum2.Compute(Cwidth[k2, 5].ToString().TrimStart('|'), "").ToString()));
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                    }
                                    else if (Cwidth[k2, 5].ToString().Substring(0, 1) == "+")
                                    {
                                        double val = double.Parse(dtSum2.Compute(Cwidth[k2, 5].ToString().TrimStart('+'), "").ToString());
                                        if (val > 0)
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(val);
                                        }
                                        else
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(0);
                                        }
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                    }
                                    else if (Cwidth[k2, 5].ToString().Substring(0, 1) == ">")
                                    {

                                        double val = double.Parse(dtSum2.Compute(Cwidth[k2, 5].ToString().Split('>')[2], "").ToString());
                                        if (val <= 0 || val > double.Parse(Cwidth[k2, 5].ToString().Split('>')[1]))
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(val);
                                            TotBrokerage += val;
                                        }
                                        else
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(0);
                                        }
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);

                                    }
                                    else if (Cwidth[k2, 5].ToString().Substring(0, 1) == "^")
                                    {
                                        double val = double.Parse(dtSum2.Compute(Cwidth[k2, 5].ToString().TrimStart('^'), "").ToString());
                                        TotRunn = TotRunn + val;
                                        if (TotRunn > 0)
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(TotRunn);
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Dr/Cr"].Value = "Dr.";
                                        }
                                        else
                                        {
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = funs.IndianCurr(-1 * TotRunn);
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Dr/Cr"].Value = "Cr.";
                                        }
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Dr/Cr"].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                                    }
                                    else
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Value = Cwidth[k2, 5].ToString();
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum2.Columns[k2].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);


                                    }
                                }

                                  dataGridView1.Rows.Add();
                            }
                        }
                    }

                    else //detail section if only one group
                    {
                        for (int j1 = 0; j1 < dr1.Length; j1++)
                        {
                            for (int k1 = 0; k1 < dt.Columns.Count; k1++)
                            {
                                if (k1 >= col.GetLength(0) || col[k1, 0] == "0")
                                {

                                    if (j1 != 0 && dr1[j1][k1].ToString() == dr1[j1 - 1][k1].ToString() && k1 < 1)
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = "";
                                    }

                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "DateTime" && DateTime.Parse(dr1[j1][k1].ToString()).ToString("yyyy") == "1801")
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = "";
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "DateTime")
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = DateTime.Parse(dr1[j1][k1].ToString()).ToString("dd-MMM-yyyy");
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Decimal" && Cwidth[k1, 2] == "1" && double.Parse(dr1[j1][k1].ToString()) == 0)
                                    {

                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = "";
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Decimal")
                                    {
                                        if (dr1[j1][k1].ToString() != "")
                                        {

                                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = funs.IndianCurr(double.Parse(dr1[j1][k1].ToString()));
                                        }
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Int32" && Cwidth[k1, 2] == "1" && double.Parse(dr1[j1][k1].ToString()) == 0)
                                    {

                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = "";
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Int32")
                                    {

                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = funs.IndianCurr(double.Parse(dr1[j1][k1].ToString()));
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Double" && Cwidth[k1, 2] == "1" && double.Parse(dr1[j1][k1].ToString()) == 0)
                                    {

                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = "";
                                    }
                                    else if (dt.Columns[dt.Columns[k1].ColumnName].DataType.Name == "Double")
                                    {

                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = funs.IndianCurr(double.Parse(dr1[j1][k1].ToString()));
                                    }
                                    else
                                    {
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k1].ColumnName].Value = dr1[j1][k1].ToString();
                                    }

                                }

                            }
                            dataGridView1.Rows.Add();

                        }
                    }

                    if (col[0, 2] == "1")//Group one Footer
                    {
                        DataTable dtSum1 = dr1.CopyToDataTable();
                        for (int k1 = 0; k1 < dtSum1.Columns.Count; k1++)
                        {
                            if (Cwidth[k1, 4] == "")
                            {

                            }
                            else if (Cwidth[k1, 4].ToString().Substring(0, 1) == "|")
                            {
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Value = funs.IndianCurr(double.Parse(dtSum1.Compute(Cwidth[k1, 4].ToString().TrimStart('|'), "").ToString()));
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                            }
                            else if (Cwidth[k1, 4].ToString().Substring(0, 1) == "+")
                            {
                                double val = double.Parse(dtSum1.Compute(Cwidth[k1, 4].ToString().TrimStart('+'), "").ToString());
                                if (val > 0)
                                {
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Value = funs.IndianCurr(val);
                                }
                                else
                                {
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Value = funs.IndianCurr(0);
                                }
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                            }
                            else
                            {
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Value = Cwidth[k1, 4].ToString();
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dtSum1.Columns[k1].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                            }

                        }

                        dataGridView1.Rows.Add();

                    }

                }

            }

            else //detail section if no group valable
            {

                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        if (i != 0 && dt.Rows[i][j].ToString() == dt.Rows[i - 1][j].ToString() && j < 1)
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = "";
                        }
                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "DateTime")
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = DateTime.Parse(dt.Rows[i][j].ToString()).ToString("dd-MMM-yyyy").Replace("01-Feb-1801", "");
                        }
                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "Decimal" && Cwidth[j, 2] == "1" && double.Parse(dt.Rows[i][j].ToString()) == 0)
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = "";
                        }
                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "Decimal")
                        {
                            if (dt.Rows[i][j].ToString() == "")
                            {
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = "";
                            }
                            else
                            {
                                dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = funs.IndianCurr(double.Parse(dt.Rows[i][j].ToString()));
                            }

                        }
                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "Int32" && Cwidth[j, 2] == "1" && double.Parse(dt.Rows[i][j].ToString()) == 0)
                        {

                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = "";
                        }
                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "Int32")
                        {

                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = int.Parse(dt.Rows[i][j].ToString());

                        }
                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "Double" && Cwidth[j, 2] == "1" && double.Parse(dt.Rows[i][j].ToString()) == 0)
                        {

                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = "";
                        }

                        else if (dt.Columns[dt.Columns[j].ColumnName].DataType.Name == "Double")
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = funs.IndianCurr(double.Parse(dt.Rows[i][j].ToString()));

                        }
                        else if (dt.Rows[i][j].ToString().IndexOf("<b>") > -1)
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = dt.Rows[i][j].ToString().Replace("<b>", "");
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                        }
                        else
                        {
                            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[j].ColumnName].Value = dt.Rows[i][j].ToString();
                        }

                    }
                    dataGridView1.Rows.Add();
                }

            }


            for (int k = 0; k < dt.Columns.Count; k++)
            {

                if (Cwidth[k, 3] == "")
                {
                }
                else if (Cwidth[k, 3].ToString().Substring(0, 1) == "|")
                {
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Value = funs.IndianCurr(double.Parse(dt.Compute(Cwidth[k, 3].ToString().TrimStart('|'), "").ToString()));
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                }
                else if (Cwidth[k, 3].ToString().Substring(0, 1) == "+")
                {
                    double val = double.Parse(dt.Compute(Cwidth[k, 3].ToString().TrimStart('|'), "").ToString());
                    if (val > 0)
                    {
                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Value = funs.IndianCurr(val);
                    }
                    else
                    {
                        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Value = funs.IndianCurr(0);
                    }
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                }
                else if (Cwidth[k, 3].ToString().Substring(0, 1) == ">")
                {
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Value = funs.IndianCurr(TotBrokerage);
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                }
                else
                {
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Value = Cwidth[k, 3].ToString();
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[dt.Columns[k].ColumnName].Style.Font = new System.Drawing.Font(dataGridView1.Font, FontStyle.Bold);
                }

            }
            dataGridView1.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;


        }

        private void Report_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                this.Close();
                this.Dispose();
            }
            else if (e.Control && e.KeyCode == Keys.P)
            {
                if (dataGridView1.Rows.Count == 0)
                {
                    return;
                }
                string tPath = Path.GetTempPath() + DateTime.Now.ToString("yyMMddhmmssfff") + ".pdf";
                ExportToPdf(tPath);
                GC.Collect();
                PdfReader frm = new PdfReader();
                frm.LoadFile(tPath);
                frm.Visible = false;
                frm.axAcroPDF1.printWithDialog();

            }
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            String clkStr = "";
            if (dataGridView1.CurrentCell.Value != null)
            {
                clkStr = dataGridView1.CurrentCell.Value.ToString();
            }
            if (funs.Select_ac_id(clkStr) != "" || funs.Select_ac_id(clkStr) != "")
            {
                Report gg = new Report();
                gg.LedgerNew(stdt, endt, clkStr);
                gg.ShowDialog();
            }
            else if (funs.Select_Refineact_id(clkStr.ToString()) != "")
            {
                Report gg = new Report();
                gg.SingleGroupedTrial(stdt, endt, clkStr);
                gg.ShowDialog();
               
            }
            else if (IsDocumentNumber(clkStr) != "")
            {
                funs.OpenFrm(this, IsDocumentNumber(clkStr),false);
            }
            else if (dataGridView1.Columns.Contains("Did"))
            {
                if (dataGridView1.Rows[dataGridView1.SelectedCells[0].RowIndex].Cells["Did"].Value != null)
                {
                    string desid = dataGridView1.Rows[e.RowIndex].Cells["Did"].Value.ToString();
                    string des = Database.GetScalarText("select Description from Description where Des_id='" + desid + "'");
                    string pack = Database.GetScalarText("select Pack from Description where Des_id='" + desid + "'");
                    Report gg = new Report();
                    string sql = Sstr + " and Description.Description='" + des + "' and Description.Pack='" + pack + "'";
                    string sql1 = Sstr1 + " and Description_1.Description='" + des + "' and Description_1.Pack='" + pack + "'";
                    gg.ItemLedger1(stdt, endt, sql, sql1, Samtrequired);
                    //gg.ItemLedger(stdt, endt, gGodownName, desid);
                    gg.ShowDialog();
                }
            }
            else if (dataGridView1.Columns.Contains("Vi_id"))
            {
                if (dataGridView1.Rows[dataGridView1.SelectedCells[0].RowIndex].Cells["Vi_id"].Value != null)
                {
                    string vid = dataGridView1.Rows[dataGridView1.SelectedCells[0].RowIndex].Cells["Vi_id"].Value.ToString();
                    
                        funs.OpenFrm(this, vid, false);
                    
                }
            }
        }

        private string IsDocumentNumber(String str)
        {
            //return Database.GetScalarText("SELECT DISTINCT VOUCHERINFO.Vi_id, " + access_sql.Docnumber + " AS DocNumber FROM (VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((VOUCHERINFO.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND (" + access_sql.Docnumber + "='" + str + "'))");
            return Database.GetScalarText("SELECT DISTINCT VOUCHERINFO.Vi_id, " + access_sql.Docnumber + " AS DocNumber FROM (VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE (((VOUCHERINFO.Vt_id)=[VOUCHERTYPE].[Vt_id]) AND (" + access_sql.Docnumber + "='" + str + "')) AND (VOUCHERINFO.Branch_id = '" + Database.BranchId + "')");
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count == 0)
            {
                return;
            }
            DirectoryInfo dInfo = new System.IO.DirectoryInfo(Application.StartupPath + "\\PDF");

            if (dInfo.Exists == false)
            {
                Directory.CreateDirectory(Application.StartupPath + "\\PDF");
            }
            string tPath = Application.StartupPath + "\\PDF\\" + DateTime.Now.ToString("yyMMddhmmssfff") + ".pdf";
            ExportToPdf(tPath);
           // ExportToPdf2();
            GC.Collect();
            PdfReader frm = new PdfReader();
            frm.LoadFile(tPath);
            frm.Visible = false;
            frm.axAcroPDF1.printWithDialog();
            File.Delete(tPath);

        }
        public bool PartyWiseSale(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PartyWiseSale";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "PartyWiseSale, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();

            if (Database.DatabaseType == "access")
            {
                if (Database.IsKacha == false)
                {
                    sql = "TRANSFORM -1*Sum(Journal.Amount) AS Amount SELECT ACCOUNTYPE.Name as Act, VOUCHERINFO.Vdate,ACCOUNT.Name, VOUCHERINFO.Invoiceno FROM ((((VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERTYPE.Type)='Sale') AND ((VOUCHERINFO.Ac_id)<>[Journal].[Ac_id]) AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((VOUCHERTYPE.A)=True)) GROUP BY ACCOUNTYPE.Name,VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERINFO.Invoiceno, VOUCHERINFO.Ac_id ORDER BY ACCOUNTYPE.Name PIVOT ACCOUNT_1.Name;";
                }
                else
                {
                    sql = "TRANSFORM -1*Sum(Journal.Amount) AS Amount SELECT ACCOUNTYPE.Name as Act, VOUCHERINFO.Vdate,ACCOUNT.Name, VOUCHERINFO.Invoiceno FROM ((((VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERTYPE.Type)='Sale') AND ((VOUCHERINFO.Ac_id)<>[Journal].[Ac_id]) AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((VOUCHERTYPE.B)=True)) GROUP BY ACCOUNTYPE.Name,VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERINFO.Invoiceno, VOUCHERINFO.Ac_id ORDER BY ACCOUNTYPE.Name PIVOT ACCOUNT_1.Name;";
                }
            }
            else
            {
                DataTable dtother = new DataTable();
                if (Database.IsKacha == false)
                {
                    Database.GetSqlData("SELECT DISTINCT ACCOUNT.Name AS OppAcc FROM Journal LEFT OUTER JOIN  ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id RIGHT OUTER JOIN  ACCOUNTYPE RIGHT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON ACCOUNTYPE.Act_id = ACCOUNT_1.Act_id RIGHT OUTER JOIN  VOUCHERINFO ON ACCOUNT_1.Ac_id = VOUCHERINFO.Ac_id ON Journal.Vi_id = VOUCHERINFO.Vi_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE ( VOUCHERTYPE.Type = N'Sale') AND ( VOUCHERINFO.Ac_id <> Journal.Ac_id) AND ( VOUCHERINFO.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND ( VOUCHERTYPE.A = 'true')", dtother);
                }
                else
                {
                    Database.GetSqlData("SELECT DISTINCT ACCOUNT.Name AS OppAcc FROM Journal LEFT OUTER JOIN  ACCOUNT ON Journal.Ac_id = ACCOUNT.Ac_id RIGHT OUTER JOIN  ACCOUNTYPE RIGHT OUTER JOIN  ACCOUNT AS ACCOUNT_1 ON ACCOUNTYPE.Act_id = ACCOUNT_1.Act_id RIGHT OUTER JOIN  VOUCHERINFO ON ACCOUNT_1.Ac_id = VOUCHERINFO.Ac_id ON Journal.Vi_id = VOUCHERINFO.Vi_id LEFT OUTER JOIN  VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id WHERE ( VOUCHERTYPE.Type = N'Sale') AND ( VOUCHERINFO.Ac_id <> Journal.Ac_id) AND ( VOUCHERINFO.Vdate >= '" + DateFrom.ToString(Database.dformat) + "') AND (VOUCHERINFO.Vdate <= '" + DateTo.ToString(Database.dformat) + "') AND ( VOUCHERTYPE.B = 'true')", dtother);
                }

                string strColumns = "";
                for (int i = 0; i < dtother.Rows.Count; i++)
                {
                    strColumns += "[" + dtother.Rows[i]["OppAcc"].ToString() + "],";
                }
                strColumns = strColumns.TrimEnd(',');
            }
            dt = new DataTable();
            Database.GetSqlData(sql, dt);

            if (dt.Rows.Count == 0)
            {
                return false;
            }


            for (int i = 0; i < dt.Rows.Count; i++)
            {
                for (int j = 0; j < dt.Columns.Count; j++)
                {
                    if (dt.Rows[i][j].ToString() == "" || dt.Rows[i][j] == null)
                    {
                        dt.Rows[i][j] = 0;
                    }
                }

            }
            tdt = new DataTable();
            tdt.Columns.Add("AccountName", typeof(string));
            tdt.Columns.Add("ActName", typeof(string));
            tdt.Columns.Add("ActRegsqn", typeof(string));

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                dt.Columns[i].ColumnName = dt.Columns[i].ColumnName.Replace('_', '.');
            }
            for (int i = 2; i < dt.Columns.Count; i++)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["AccountName"] = dt.Columns[i].ColumnName;
                tdt.Rows[tdt.Rows.Count - 1]["ActName"] = funs.Select_act_nm(funs.Select_AccTypeid(funs.Select_ac_id(dt.Columns[i].ColumnName)));
                tdt.Rows[tdt.Rows.Count - 1]["ActRegsqn"] = funs.Select_AccTypeRegsqn(tdt.Rows[tdt.Rows.Count - 1]["ActName"].ToString());
            }

            tdt.DefaultView.Sort = "ActRegsqn";
            tdt = tdt.DefaultView.ToTable();
            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                dt.Columns[tdt.Rows[i]["AccountName"].ToString()].SetOrdinal(i + 2);
            }



            dt.Columns.Add("TotalAmount", typeof(decimal));
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                double total = 0;
                for (int j = 4; j < dt.Columns.Count - 1; j++)
                {
                    total += double.Parse(dt.Rows[i][j].ToString());

                }
                dt.Rows[i]["TotalAmount"] = total;
            }


            string[,] col = new string[2, 3] { { "Act", "1", "1" }, { "Vdate", "1", "1" } };

            string[,] Cwidth = new string[dt.Columns.Count, 8];
            for (int i = 0; i < dt.Columns.Count; i++)
            {

                Cwidth[i, 0] = dt.Columns[i].ColumnName;
                if (i == 0)
                {
                    Cwidth[i, 1] = "0";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 1)
                {
                    Cwidth[i, 1] = "0";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 2)
                {
                    Cwidth[i, 1] = "300";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 3)
                {
                    Cwidth[i, 1] = "150";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";

                }
                else
                {
                    Cwidth[i, 1] = (1550 / (dt.Columns.Count - 4)).ToString();
                    Cwidth[i, 2] = "1";
                    Cwidth[i, 3] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    Cwidth[i, 4] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    Cwidth[i, 5] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }


            }


            CreateReport(dt, col, Cwidth);

            return true;
        }



        public bool PartyWisePurchase(DateTime DateFrom, DateTime DateTo)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "PartyWisePurchase";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            label3.Enabled = false;
            textBox1.Enabled = false;
            this.Text = frmptyp;
            DecsOfReport = "PartyWisePurchase, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            if (Database.DatabaseType == "access")
            {
                if (Database.IsKacha == false)
                {
                    sql = "TRANSFORM -1*Sum(Journal.Amount) AS Amount SELECT ACCOUNTYPE.Name AS Act, VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERINFO.Svnum AS Invoiceno, VOUCHERINFO.Svdate FROM ((((VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERTYPE.Type)='Purchase') AND ((VOUCHERINFO.Ac_id)<>[Journal].[Ac_id]) AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((VOUCHERTYPE.A)=True)) GROUP BY ACCOUNTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Ac_id ORDER BY ACCOUNTYPE.Name PIVOT ACCOUNT_1.Name";
                }
                else
                {
                    sql = "TRANSFORM -1*Sum(Journal.Amount) AS Amount SELECT ACCOUNTYPE.Name AS Act, VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERINFO.Svnum AS Invoiceno, VOUCHERINFO.Svdate FROM ((((VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) LEFT JOIN Journal ON VOUCHERINFO.Vi_id = Journal.Vi_id) LEFT JOIN ACCOUNT AS ACCOUNT_1 ON Journal.Ac_id = ACCOUNT_1.Ac_id WHERE (((VOUCHERTYPE.Type)='Purchase') AND ((VOUCHERINFO.Ac_id)<>[Journal].[Ac_id]) AND ((VOUCHERINFO.Vdate)>=#" + DateFrom.ToString(Database.dformat) + "# And (VOUCHERINFO.Vdate)<=#" + DateTo.ToString(Database.dformat) + "#) AND ((VOUCHERTYPE.B)=True)) GROUP BY ACCOUNTYPE.Name, VOUCHERINFO.Vdate, ACCOUNT.Name, VOUCHERINFO.Svnum, VOUCHERINFO.Svdate, VOUCHERINFO.Ac_id ORDER BY ACCOUNTYPE.Name PIVOT ACCOUNT_1.Name";
                }
            }
            else
            {

            }

            dt = new DataTable();
            Database.GetSqlData(sql, dt);
            if (dt.Rows.Count == 0)
            {
                return false;
            }


            for (int i = 0; i < dt.Rows.Count; i++)
            {
                for (int j = 0; j < dt.Columns.Count; j++)
                {
                    if (dt.Rows[i][j].ToString() == "" || dt.Rows[i][j] == null)
                    {
                        dt.Rows[i][j] = 0;
                    }
                }

            }
            tdt = new DataTable();
            tdt.Columns.Add("AccountName", typeof(string));
            tdt.Columns.Add("ActName", typeof(string));
            tdt.Columns.Add("ActRegsqn", typeof(string));

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                dt.Columns[i].ColumnName = dt.Columns[i].ColumnName.Replace('_', '.');
            }
            for (int i = 2; i < dt.Columns.Count; i++)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["AccountName"] = dt.Columns[i].ColumnName;
                tdt.Rows[tdt.Rows.Count - 1]["ActName"] = funs.Select_act_nm(funs.Select_AccTypeid(funs.Select_ac_id(dt.Columns[i].ColumnName)));
                tdt.Rows[tdt.Rows.Count - 1]["ActRegsqn"] = funs.Select_AccTypeRegsqn(tdt.Rows[tdt.Rows.Count - 1]["ActName"].ToString());

            }

            tdt.DefaultView.Sort = "ActRegsqn";
            tdt = tdt.DefaultView.ToTable();
            for (int i = 0; i < tdt.Rows.Count; i++)
            {
                dt.Columns[tdt.Rows[i]["AccountName"].ToString()].SetOrdinal(i + 2);
            }



            dt.Columns.Add("TotalAmount", typeof(decimal));
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                double total = 0;
                for (int j = 5; j < dt.Columns.Count - 1; j++)
                {
                    total += double.Parse(dt.Rows[i][j].ToString());

                }
                dt.Rows[i]["TotalAmount"] = total;
            }


            string[,] col = new string[2, 3] { { "Act", "1", "1" }, { "Vdate", "1", "1" } };

            string[,] Cwidth = new string[dt.Columns.Count, 8];
            for (int i = 0; i < dt.Columns.Count; i++)
            {

                Cwidth[i, 0] = dt.Columns[i].ColumnName;
                if (i == 0)
                {
                    Cwidth[i, 1] = "0";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 1)
                {
                    Cwidth[i, 1] = "0";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 2)
                {
                    Cwidth[i, 1] = "300";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }
                else if (i == 3)
                {
                    Cwidth[i, 1] = "150";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";

                }
                else if (i == 4)
                {
                    Cwidth[i, 1] = "100";
                    Cwidth[i, 2] = "0";
                    Cwidth[i, 3] = "";
                    Cwidth[i, 4] = "";
                    Cwidth[i, 5] = "";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";

                }
                else
                {
                    Cwidth[i, 1] = (1450 / (dt.Columns.Count - 5)).ToString();
                    Cwidth[i, 2] = "1";
                    Cwidth[i, 3] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    Cwidth[i, 4] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    Cwidth[i, 5] = "|sum([" + dt.Columns[i].ColumnName + "])";
                    Cwidth[i, 6] = "";
                    Cwidth[i, 7] = "";
                }


            }


            CreateReport(dt, col, Cwidth);

            return true;
        }
        public bool PartyTurnover(DateTime DateFrom, DateTime DateTo, string accnm,String type)
        {
            stdt = DateFrom;
            endt = DateTo;
            frmptyp = "Party Turnover";
            dateTimePicker1.Value = DateFrom;
            dateTimePicker2.Value = DateTo;
            AccName = accnm;
            textBox1.Text = accnm;
            label3.Enabled = true;
            textBox1.Enabled = true;
            this.Text = frmptyp;
            DecsOfReport = "Party Turnover, for the period of " + DateFrom.ToString(Database.dformat) + " to " + DateTo.ToString(Database.dformat);
            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            dt.Clear();
            tdt.Rows.Clear();
            tdt.Columns.Clear();
            tdt.Columns.Add("MonthName", typeof(string));
            tdt.Columns.Add("Sum", typeof(decimal));
            DateTime now = Database.stDate;
          //  Sum(" + access_sql.fnstring("BILLBYBILL.Amount " + access_sql.IsNull + " Null", "0", "BILLBYBILL.Amount") + ")
            if (type == "SUNDRY DEBTORS")
            {
                sql = "SELECT Sum(" + access_sql.fnstring("Type='Return'", "-1*Totalamount", "Totalamount") + ") AS Amount, Month(Vdate) AS monthindex FROM ACCOUNT LEFT JOIN (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) ON ACCOUNT.Ac_id = VOUCHERINFO.Ac_id WHERE (((Type)='Sale' Or (Type)='Return')) GROUP BY Month(Vdate), ACCOUNT.Name HAVING (((ACCOUNT.Name)='" + accnm + "'))";
            }
            else
            {
                sql = "SELECT Sum(" + access_sql.fnstring("Type='P Return'", "-1*Totalamount", "Totalamount") + ") AS Amount, Month(Vdate) AS monthindex FROM ACCOUNT LEFT JOIN (VOUCHERINFO LEFT JOIN VOUCHERTYPE ON VOUCHERINFO.Vt_id = VOUCHERTYPE.Vt_id) ON ACCOUNT.Ac_id = VOUCHERINFO.Ac_id WHERE (((Type)='Purchase' Or (Type)='P Return')) GROUP BY Month(Vdate), ACCOUNT.Name HAVING (((ACCOUNT.Name)='" + accnm + "'))";
            }

        
            Database.GetSqlData(sql, dt);

            for (int a = 0; a < dt.Rows.Count; a++)
            {
                tdt.Rows.Add();
                tdt.Rows[tdt.Rows.Count - 1]["MonthName"] = getmonth(int.Parse(dt.Rows[a]["monthindex"].ToString()));
                tdt.Rows[tdt.Rows.Count - 1]["Sum"] = dt.Rows[a]["Amount"].ToString();

            }


            if (tdt.Rows.Count == 0)
            {
                return false;
            }

            string[,] col = new string[0, 0];


            string[,] Cwidth = new string[2, 8] { 
            { "Month", "500", "0","","","" ,"",""},

            { "Sum", "450", "1","|sum(Sum)","","","","" },
           
            };
            CreateReport(tdt, col, Cwidth);
            return true;
        }




        public MemoryStream ExportToPdf2()
        {
            frmptyp2 = frmptyp;
            DecsOfReport2 = DecsOfReport;
            str2 = str;
            dataGridView2 = dataGridView1;

             ms = new MemoryStream();
          //  MemoryStream fs = new MemoryStream(tPath, FileMode.Create, FileAccess.Write, FileShare.None);
            iTextSharp.text.Rectangle rec;
            Document document;
            int Twidth = 0;
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {
                Twidth += dataGridView1.Columns[i].Width;
            }
            if (Twidth == 2000)
            {
                document = new Document(PageSize.A4.Rotate(), 20f, 10f, 20f, 10f);
            }
            else if (GetPapersize().ToUpper() == "A4")
            {
                document = new Document(PageSize.A4, 20f, 10f, 20f, 10f);
            }
            else if (GetPapersize().ToUpper() == "A5")
            {
                document = new Document(PageSize.A5, 20f, 10f, 20f, 10f);

            }
            else
            {
                document = new Document(PageSize.A4, 20f, 10f, 20f, 10f);
            }

            Pagesize = GetPapersize();
            PdfWriter writer = PdfWriter.GetInstance(document, ms);
            writer.PageEvent = new MainTextEventsHandler();
            document.Open();
            HTMLWorker hw = new HTMLWorker(document);
            str = "";
            str += @"<body> <font size='1'><table border=1> <tr>";
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {
                string align = "";
                string bold = "";
                int width = 0;

                if (Twidth == 2000)
                {
                    width = dataGridView1.Columns[i].Width / 20;
                }
                else
                {
                    width = dataGridView1.Columns[i].Width / 10;
                }

                if (dataGridView1.Columns[i].HeaderCell.Style.Alignment == DataGridViewContentAlignment.MiddleRight)
                {
                    align = "text-align:right;";
                }

                bold = "font-weight: bold;";

                if (width != 0)
                {
                    str += "<th width=" + width + "%  style='" + align + bold + "'>" + dataGridView1.Columns[i].HeaderText.ToString() + "</th> ";
                }
            }

            str += "</tr>";

            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {
                str += "<tr> ";
                for (int j = 0; j < dataGridView1.Columns.Count; j++)
                {
                    int width = 0;
                    if (Twidth == 2000)
                    {
                        width = dataGridView1.Rows[i].Cells[j].Size.Width / 20;
                    }
                    else
                    {
                        width = dataGridView1.Rows[i].Cells[j].Size.Width / 10;
                    }
                    if (width != 0)
                    {
                        if (dataGridView1.Rows[i].Cells[j].Value != null)
                        {
                            string align = "";
                            string bold = "";
                            string colspan = "";
                            if (dataGridView1.Columns[j].DefaultCellStyle.Alignment == DataGridViewContentAlignment.MiddleRight)
                            {
                                align = "text-align:right;";
                            }
                            if (dataGridView1.Rows[i].Cells[j].Style.Font != null && dataGridView1.Rows[i].Cells[j].Style.Font.Bold == true)
                            {
                                bold = "font-weight: bold;";
                            }
                            if (j == 0 && dataGridView1.Rows[i].Cells[0].Value.ToString() != "" && dataGridView1.Rows[i].Cells[1].Value == null && dataGridView1.Rows[i].Cells[2].Value == null)
                            {
                                colspan = "colspan= '2'";
                            }
                            if (dataGridView1.Rows[i].Cells[j].Value.ToString().Trim() == "")
                            {
                                str += "<td> &nbsp; </td>";
                            }
                            else
                            {
                                str += "<td " + colspan + "  style='" + align + bold + "'>" + dataGridView1.Rows[i].Cells[j].Value.ToString() + "</td> ";
                            }
                            if (j == 0 && dataGridView1.Rows[i].Cells[0].Value.ToString() != "" && dataGridView1.Rows[i].Cells[1].Value == null && dataGridView1.Rows[i].Cells[2].Value == null)
                            {
                                j++;
                            }
                        }
                        else
                        {
                            str += "<td> &nbsp; </td>";
                        }
                    }
                }
                str += "</tr> ";
            }
            str += "</table></font></body>";
            StringReader sr = new StringReader(str);
            hw.Parse(sr);
            writer.CloseStream = false;
            document.Close();
            return ms;
           // fs.Position = 0;
        }

        public void ExportToPdf(string tPath)
        {
            frmptyp2 = frmptyp;
            DecsOfReport2 = DecsOfReport;
            str2 = str;
            dataGridView2 = dataGridView1;

            FileStream fs = new FileStream(tPath, FileMode.Create, FileAccess.Write, FileShare.None);
            iTextSharp.text.Rectangle rec;
            Document document;
            int Twidth = 0;
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {
                Twidth += dataGridView1.Columns[i].Width;
            }
            if (Twidth == 2000)
            {
                document = new Document(PageSize.A4.Rotate(), 20f, 10f, 20f, 10f);
            }
            else if (GetPapersize().ToUpper() == "A4")
            {
                document = new Document(PageSize.A4, 20f, 10f, 20f, 10f);
            }
            else if (GetPapersize().ToUpper() == "A5")
            {
                document = new Document(PageSize.A5, 20f, 10f, 20f, 10f);
               
            }
            else
            {
                document = new Document(PageSize.A4, 20f, 10f, 20f, 10f);
            }

            Pagesize = GetPapersize();
            PdfWriter writer = PdfWriter.GetInstance(document, fs);
            writer.PageEvent = new MainTextEventsHandler();
            document.Open();

            HTMLWorker hw = new HTMLWorker(document);
            str = "";
            str += @"<body> <font size='1'><table border=1> <tr>";
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {
                string align = "";
                string bold = "";
                int width = 0;

                if (Twidth == 2000)
                {
                    width = dataGridView1.Columns[i].Width / 20;
                }
                else
                {
                    width = dataGridView1.Columns[i].Width / 10;
                }

                if (dataGridView1.Columns[i].HeaderCell.Style.Alignment == DataGridViewContentAlignment.MiddleRight)
                {
                    align = "text-align:right;";
                }

                bold = "font-weight: bold;";

                if (width != 0)
                {
                    str += "<th width=" + width + "%  style='" + align + bold + "'>" + dataGridView1.Columns[i].HeaderText.ToString() + "</th> ";
                }
            }

            str += "</tr>";

            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {
                str += "<tr> ";
                for (int j = 0; j < dataGridView1.Columns.Count; j++)
                {
                    int width = 0;
                    if (Twidth == 2000)
                    {
                        width = dataGridView1.Rows[i].Cells[j].Size.Width / 20;
                    }
                    else
                    {
                        width = dataGridView1.Rows[i].Cells[j].Size.Width / 10;
                    }
                    if (width != 0)
                    {
                        if (dataGridView1.Rows[i].Cells[j].Value != null)
                        {
                            string align = "";
                            string bold = "";
                            string colspan = "";
                            if (dataGridView1.Columns[j].DefaultCellStyle.Alignment == DataGridViewContentAlignment.MiddleRight)
                            {
                                align = "text-align:right;";
                            }
                            if (dataGridView1.Rows[i].Cells[j].Style.Font != null && dataGridView1.Rows[i].Cells[j].Style.Font.Bold == true)
                            {
                                bold = "font-weight: bold;";
                            }
                            if (j == 0 && dataGridView1.Rows[i].Cells[0].Value.ToString() != "" && dataGridView1.Rows[i].Cells[1].Value == null && dataGridView1.Rows[i].Cells[2].Value == null)
                            {
                                colspan = "colspan= '2'";
                            }
                            if (dataGridView1.Rows[i].Cells[j].Value.ToString().Trim() == "")
                            {
                                str += "<td> &nbsp; </td>";
                            }
                            else
                            {
                                str += "<td " + colspan + "  style='" + align + bold + "'>" + dataGridView1.Rows[i].Cells[j].Value.ToString() + "</td> ";
                            }
                            if (j == 0 && dataGridView1.Rows[i].Cells[0].Value.ToString() != "" && dataGridView1.Rows[i].Cells[1].Value == null && dataGridView1.Rows[i].Cells[2].Value == null)
                            {
                                j++;
                            }
                        }
                        else
                        {
                            str += "<td> &nbsp; </td>";
                        }
                    }
                }
                str += "</tr> ";
            }
            str += "</table></font></body>";
            StringReader sr = new StringReader(str);
            hw.Parse(sr);
            document.Close();
        }

        internal class MainTextEventsHandler : PdfPageEventHelper
        {
            public override void OnStartPage(PdfWriter writer, Document document)
            {
                base.OnStartPage(writer, document);
                bool sta = Database.GetScalarBool("select Stationary from Vouchertype where Name='" + Report.frmptyp2 + "' ");
                DataTable dtRheader = new DataTable();
                Database.GetSqlData("select * from company", dtRheader);
                PdfPTable table = new PdfPTable(1);
                PdfPCell cell = new PdfPCell();
                if (Database.BMode == "A")
                {
                    if (sta == false)
                    {
                        cell.Phrase = new Phrase(dtRheader.Rows[0]["name"].ToString());
                        cell.BorderWidth = 0f;
                        cell.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
                        table.AddCell(cell);
                        cell.Phrase = new Phrase(dtRheader.Rows[0]["Address1"].ToString());
                        table.AddCell(cell);
                        cell.Phrase = new Phrase(dtRheader.Rows[0]["Address2"].ToString());
                        table.AddCell(cell);
                        cell.Phrase = new Phrase(Report.DecsOfReport2);
                        table.AddCell(cell);
                        cell.Phrase = new Phrase("\n");
                        table.AddCell(cell);
                    }
                    else
                    {
                        cell.Phrase = new Phrase("\n");
                        cell.BorderWidth = 0f;
                        cell.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
                        table.AddCell(cell);
                        cell.Phrase = new Phrase("\n");
                        table.AddCell(cell);
                        cell.Phrase = new Phrase("\n");
                        table.AddCell(cell);
                        cell.Phrase = new Phrase(Report.DecsOfReport2);
                        table.AddCell(cell);
                        cell.Phrase = new Phrase("\n");
                        table.AddCell(cell);
                    }
                }
                else if (Database.BMode == "AB" || Database.BMode == "B")
                {
                    if (sta == false)
                    {

                        cell.BorderWidth = 0f;
                        cell.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
                        cell.Phrase = new Phrase(Report.DecsOfReport2);
                        table.AddCell(cell);
                        cell.Phrase = new Phrase("\n");
                        table.AddCell(cell);
                    }
                    else
                    {
                        cell.BorderWidth = 0f;
                        cell.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
                        cell.Phrase = new Phrase(Report.DecsOfReport2);
                        table.AddCell(cell);
                        cell.Phrase = new Phrase("\n");
                        table.AddCell(cell);
                    }
                }
                document.Add(table);
            }

            public override void OnEndPage(PdfWriter writer, Document document)
            {                
                base.OnEndPage(writer, document);
                string text = "";
                text += "Page No-" + document.PageNumber;
                PdfContentByte cb = writer.DirectContent;
                cb.BeginText();
                BaseFont bf = BaseFont.CreateFont();
                cb.SetFontAndSize(bf, 8);
                if (Pagesize== "A4")
                {
                    cb.SetTextMatrix(530, 8);
                }
                else if (Pagesize == "A5")
                {
                    cb.SetTextMatrix(350, 8);
                }              
                cb.ShowText(text);
                cb.EndText();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count == 0)
            {
                return;
            }
            DirectoryInfo dInfo = new System.IO.DirectoryInfo(Application.StartupPath + "\\PDF");

            if (dInfo.Exists == false)
            {
                Directory.CreateDirectory(Application.StartupPath + "\\PDF");
            }
            string tPath = Application.StartupPath + "\\PDF\\" + DateTime.Now.ToString("yyMMddhmmssfff") + ".pdf";
            ExportToPdf(tPath);
           
            GC.Collect();
            PdfReader frm = new PdfReader();
            frm.LoadFile(tPath);
            frm.Show();
            File.Delete(tPath);
        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count == 0)
            {
                return;
            }
            SaveFileDialog ofd = new SaveFileDialog();
            ofd.Filter = "Adobe Acrobat(*.pdf) | *.pdf";
            if (DialogResult.OK == ofd.ShowDialog())
            {
                ExportToPdf(ofd.FileName);
                MessageBox.Show("Export Successfully!!");
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count == 0)
            {
                return;
            }
            Object misValue = System.Reflection.Missing.Value;
            Excel.Application apl = new Microsoft.Office.Interop.Excel.Application();
            Excel.Workbook wb = (Excel.Workbook)apl.Workbooks.Add(misValue);
            Excel.Worksheet ws;
            ws = (Excel.Worksheet)wb.Worksheets[1];
            int lno = 1;
            DataTable dtExcel = new DataTable();
            DataTable dtRheader = new DataTable();
            Database.GetSqlData("select * from company", dtRheader);

            ws.Cells[lno, 1] = dtRheader.Rows[0]["name"].ToString();
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
            lno++;

            ws.Cells[lno, 1] = dtRheader.Rows[0]["Address1"].ToString();
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
            lno++;

            ws.Cells[lno, 1] = dtRheader.Rows[0]["Address2"].ToString();
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
            lno++;

            ws.Cells[lno, 1] = DecsOfReport;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Merge(Type.Missing);
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            ws.get_Range(ws.Cells[lno, 1], ws.Cells[lno, dataGridView1.Columns.Count]).Font.Bold = true;
            lno++;



            int Twidth = 0;
            int width = 0;
            for (int j = 0; j < dataGridView1.Columns.Count; j++)
            {
                Twidth += dataGridView1.Columns[j].Width;
            }


           
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {
                if (Twidth == 2000)
                {
                    width = dataGridView1.Columns[i].Width / 20;
                }
                else
                {
                    width = dataGridView1.Columns[i].Width / 10;
                }
                if (width != 0)
                {

                    if (dataGridView1.Columns[i].HeaderCell.Style.Alignment == DataGridViewContentAlignment.MiddleRight)
                    {
                        ws.get_Range(ws.Cells[6, i + 1], ws.Cells[6, i + 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                    }



                    ws.get_Range(ws.Cells[i + 1, i + 1], ws.Cells[i + 1, i + 1]).ColumnWidth = dataGridView1.Columns[i].Width / 11.5;
                    ws.Cells[6, i + 1] = dataGridView1.Columns[i].HeaderText.ToString();
                    ws.get_Range(ws.Cells[6, i + 1], ws.Cells[6, i + 1]).Font.Bold = true;
                }
            }
            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {
                for (int j = 0; j < dataGridView1.Columns.Count; j++)
                {
                     if (Twidth == 2000)
                {
                    width = dataGridView1.Columns[j].Width / 20;
                }
                else
                {
                    width = dataGridView1.Columns[j].Width / 10;
                }
                     if (width != 0)
                     {


                         if (dataGridView1.Columns[j].HeaderCell.Style.Alignment == DataGridViewContentAlignment.MiddleRight)
                         {
                             ws.get_Range(ws.Cells[i + 7, j + 1], ws.Cells[i + 7, j + 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                             ws.get_Range(ws.Cells[i + 7, j + 1], ws.Cells[i + 7, j + 1]).NumberFormat = "0,0.00";
                         }
                         else
                         {
                             ws.get_Range(ws.Cells[i + 7, j + 1], ws.Cells[i + 7, j + 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                         }
                         if (dataGridView1.Rows[i].Cells[j].Style.Font != null && dataGridView1.Rows[i].Cells[j].Style.Font.Bold == true)
                         {
                             ws.get_Range(ws.Cells[i + 7, j + 1], ws.Cells[i + 7, j + 1]).Font.Bold = true;
                         }
                         //if (dataGridView1.Columns[j].DefaultCellStyle.Font != null )
                         //{

                         //}
                         if (dataGridView1.Rows[i].Cells[j].Value != null)
                         {
                             ws.Cells[i + 7, j + 1] = dataGridView1.Rows[i].Cells[j].Value.ToString().Replace(",", "");
                         }


                     }

                }
            }

            Excel.Range last = ws.Cells.SpecialCells(Excel.XlCellType.xlCellTypeLastCell, Type.Missing);
            ws.get_Range("A1", last).WrapText = true;
            apl.Visible = true;
        }

        private void Report_FormClosing(object sender, FormClosingEventArgs e)
        {
            string[] files = Directory.GetFiles(Path.GetTempPath());
            foreach (string file in files)
            {
                try
                {
                    File.Delete(file);
                }
                catch
                {
                }
            }
        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (frmptyp == "Ledger")
            {
                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Grade Wise")
            {
                strCombo = "SELECT  Name FROM ACCOUNTYPE WHERE Type = 'Account' ORDER BY Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Account Group Ledger")
            {
                strCombo = "SELECT  Name FROM ACCOUNTYPE WHERE Type = 'Account' ORDER BY Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Cashier Report")
            {
                strCombo = "Select  distinct  'All' as Name from Account Union all SELECT Uname as Name FROM Userinfo WHERE  (Branch_id = '" + Database.BranchId + "') AND (Utype = 'SUPERADMIN') OR (Utype = 'CASHIER')";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Outstanding Report")
            {
                strCombo = funs.GetStrCombonew(" (Path LIKE '1;39;%') or (Path LIKE '1;38;%')   or   (Path LIKE '8;40;%')  or   (Path LIKE '8;39;%' ) ", " Branch_id='" + Database.BranchId + "' ");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Detail Ledger")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "CashCreditSale")
            {

                DataTable dt = new DataTable();
                dt.Columns.Add("Type", typeof(string));
                dt.Rows.Add();
                dt.Rows[0][0] = "Cash";
                dt.Rows.Add();
                dt.Rows[1][0] = "Credit";
                dt.Rows.Add();
                dt.Rows[2][0] = "Both";
                textBox1.Text = SelectCombo.ComboDt(this, dt, 0);
            }
            else if (frmptyp == "Customer Detail Bill Wise")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Receipt Register")
            {
                string wheresrt = "(Path LIKE '1;3;%')  OR   (Path LIKE '1;2;%')";

                string strCombo = funs.GetStrCombonew(wheresrt, "1=1");

                char cg = 'a';


                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Payment Register")
            {
                string wheresrt = "(Path LIKE '1;3;%')  OR   (Path LIKE '1;2;%')";

                string strCombo = funs.GetStrCombonew(wheresrt, "1=1");

                char cg = 'a';


                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Customer Detail Item Wise")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Cash Report")
            {
                strCombo = "SELECT VOUCHERINFO.Formno FROM VOUCHERTYPE LEFT JOIN ((VOUCHERINFO LEFT JOIN ACCOUNT ON VOUCHERINFO.Ac_id = ACCOUNT.Ac_id) LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id) ON VOUCHERTYPE.Vt_id = VOUCHERINFO.Vt_id GROUP BY VOUCHERINFO.Formno, ACCOUNTYPE.Act_id, VOUCHERTYPE.Vt_id HAVING (((VOUCHERINFO.Formno)<>'') AND ((ACCOUNTYPE.Act_id)='SER3') AND ((VOUCHERTYPE.Vt_id)='SER15' Or (VOUCHERTYPE.Vt_id)='SER3'))";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Customer Brokerage")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Stock Summary Cross")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Customer Pendings")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Customer Billwise")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Broker Detail Customer Wise")
            {
                strCombo = "SELECT ACCOUNT.Name FROM  ACCOUNT LEFT OUTER JOIN  ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (ACCOUNTYPE.Name = 'Agent') AND (ACCOUNT.Branch_id = '" + Database.BranchId + "') ORDER BY ACCOUNT.Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "SalesMan Detail Customer Wise")
            {
                strCombo = "SELECT name from SalesMan order by name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Broker Detail Item Wise")
            {
                strCombo = "SELECT ACCOUNT.Name FROM  ACCOUNT LEFT OUTER JOIN  ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (ACCOUNTYPE.Name = 'Agent') AND (ACCOUNT.Branch_id = '" + Database.BranchId + "') ORDER BY ACCOUNT.Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Supplier Detail Bill Wise")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Supplier Detail Item Wise")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Item Lifting")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Item Lifting Sale")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Item Lifting Detail Sale")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Company Wise Report")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "InBill Charges")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Item Ledger")
            {
                strCombo = "SELECT DESCRIPTION.Description " + access_sql.Concat + " ' (' " + access_sql.Concat + " PACK  As Description  FROM DESCRIPTION";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Detailed Production Report")
            {
                strCombo = "SELECT Distinct DESCRIPTION.Description   FROM DESCRIPTION order by Description";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Stock Summary")
            {
                if (Feature.Available("Company Colour") == "No")
                {
                    textBox1.Enabled = false;
                }
                else
                {
                    strCombo = "Select Name from Other where Type='SER14' order by Name";
                    textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
                }
            }
            else if (frmptyp == "Below Stock Warning")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Stock TaxSlab Wise")
            {
                strCombo = " SELECT distinct " + strqyery + "  AS Tax_Rate FROM TAXCATEGORYDETAIL GROUP BY TAXCATEGORYDETAIL.Category_Id, TAXCATEGORYDETAIL.SubCategory_Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Party Price List")
            {
                strCombo = "SELECT DISTINCT ACCOUNT.Name FROM PARTYRATE LEFT JOIN ACCOUNT ON PARTYRATE.Ac_id = ACCOUNT.Ac_id ORDER BY ACCOUNT.Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Price List")
            {
                DataTable dtcombo = new DataTable();

                dtcombo.Columns.Add("PriceList", typeof(string));
                dtcombo.Rows.Add();
                dtcombo.Rows[0][0] = Feature.Available("Name of PriceList1");

                dtcombo.Rows.Add();
                dtcombo.Rows[1][0] = Feature.Available("Name of PriceList2");

                dtcombo.Rows.Add();
                dtcombo.Rows[2][0] = Feature.Available("Name of PriceList3");

                dtcombo.Rows.Add();
                dtcombo.Rows[3][0] = Feature.Available("Name of PriceList4");

                dtcombo.Rows.Add();
                dtcombo.Rows[4][0] = Feature.Available("Name of PriceList5");

                dtcombo.Rows.Add();
                dtcombo.Rows[5][0] = Feature.Available("Name of PriceList6");

                dtcombo.Rows.Add();
                dtcombo.Rows[6][0] = "MRP";

                textBox1.Text = SelectCombo.ComboDt(this, dtcombo, 0);
            }
            else if (frmptyp == "Price Variation Sale")
            {
                strCombo = "SELECT DESCRIPTION.Description & ' (' & PACKING.Name  As Description  FROM DESCRIPTION INNER JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Price Variation Purchase")
            {
                strCombo = "SELECT DESCRIPTION.Description & ' (' & PACKING.Name  As Description  FROM DESCRIPTION INNER JOIN PACKING ON DESCRIPTION.Pack_id = PACKING.Pack_id";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Particular Commodity Summary")
            {
                strCombo = "SELECT TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code FROM TAXCATEGORY ORDER BY TAXCATEGORY.Category_Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Commodity Sale")
            {
                strCombo = "SELECT TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code FROM TAXCATEGORY ORDER BY TAXCATEGORY.Category_Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Commodity Purchase")
            {
                strCombo = "SELECT TAXCATEGORY.Category_Name, TAXCATEGORY.Commodity_Code FROM TAXCATEGORY ORDER BY TAXCATEGORY.Category_Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Customer Profit")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Supplier Lifting")
            {

                strCombo = funs.GetStrComboled("*");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Stock Valuation")
            {
                strCombo = "Select Name from Other where Type='SER14' order by Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Stock Valuation ")
            {
                strCombo = "select distinct '<MAIN>' as name from account union all SELECT ACCOUNT.Name as name FROM ACCOUNT LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE (((ACCOUNTYPE.Name)='Godown')) GROUP BY ACCOUNT.Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "GodownInOut")
            {
                strCombo = "select distinct '<MAIN>' as name from account union all SELECT ACCOUNT.Name as name FROM ACCOUNT LEFT JOIN ACCOUNTYPE ON ACCOUNT.Act_id = ACCOUNTYPE.Act_id WHERE ACCOUNTYPE.Name='Godown'  and Account.branch_id='" + Database.BranchId + "' GROUP BY ACCOUNT.Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 1);
            }
            else if (frmptyp == "Payment Collector Balance")
            {
                strCombo = "SELECT Name FROM OTHER WHERE Type = 'SER17' ORDER BY Name";
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 0);
            }
            else if (frmptyp == "Customer Bill Due")
            {
                // strCombo = "SELECT Name FROM Account WHERE Branch_id = '"+Database.BranchId+"' ORDER BY Name";
                strCombo = funs.GetStrCombonew(" (Path LIKE '1;39;%') or (Path LIKE '1;38;%')  OR  (Path LIKE '1;3;%')   or   (Path LIKE '8;40;%' and  AllowPS=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ")  or   (Path LIKE '8;39;%' and  AllowPS=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ", "   Status=" + access_sql.Singlequote + "true" + access_sql.Singlequote + " and Branch_id='" + Database.BranchId + "' ");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 0);
            }

            else if (frmptyp == "Supplier Bill Due")
            {
                //  strCombo = "SELECT Name FROM Account WHERE Branch_id = '" + Database.BranchId + "' ORDER BY Name";
                strCombo = funs.GetStrCombonew(" (Path LIKE '8;40;%') OR  (Path LIKE '1;3;%')  or   (Path LIKE '8;39;%')   or   (Path LIKE '1;39;%' and  AllowPS=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") or   (Path LIKE '1;38;%' and  AllowPS=" + access_sql.Singlequote + "true" + access_sql.Singlequote + ") ", "   Status=" + access_sql.Singlequote + "true" + access_sql.Singlequote + " and Branch_id='" + Database.BranchId + "' ");
                textBox1.Text = SelectCombo.ComboKeypress(this, e.KeyChar, strCombo, e.KeyChar.ToString(), 0);
            }
        }

        private string GetPapersize()
        {
            return Database.GetScalarText("Select PaperSize from VOUCHERTYPE where Name='" + frmptyp + "' ");
        }

        private void button5_Click(object sender, EventArgs e)
        {
            string fileName = "LPT1";
            DOSPrint dmprnt = new DOSPrint();
            if (fileName == "LPT1")
            {
                dmprnt.Inicio(fileName);
            }
            else
            {
                dmprnt.Inicio(System.Windows.Forms.Application.StartupPath + "/" + fileName + ".txt");
            }
            if (fileName == "LPT1")
            {
                dmprnt.Imp(dmprnt.LargeFont);
            }
            dmprnt.LineSpace(1);
            dmprnt.WriteL("Date:", 5);
            dmprnt.WriteL(DateTime.Now.ToString("dd/MM/yyyy"), 15);
            dmprnt.LineSpace(2);
            dmprnt.WriteM(Report.DecsOfReport2, 75);
            dmprnt.LineSpace(1);
            if (fileName == "LPT1")
            {
                dmprnt.Imp(dmprnt.Normal);
            }
            dmprnt.LineSpace(1);
            dmprnt.Line();
            dmprnt.LineSpace(1);
            dmprnt.Imp(dmprnt.SmallFont);
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {            
                int width = dataGridView1.Columns[i].Width / 10;               
                dmprnt.WriteL(dataGridView1.Columns[i].HeaderText.ToString(), width);                  
            }
            dmprnt.LineSpace(1);
            dmprnt.Line();
            dmprnt.LineSpace(1);
            for (int i = 0; i < dataGridView1.Rows.Count; i++)
            {
                for (int j = 0; j < dataGridView1.Columns.Count; j++)
                {
                    int width = dataGridView1.Columns[j].Width / 10;
                    if (dataGridView1.Rows[i].Cells[j].Value == null)
                    {
                        dmprnt.WriteL("", width);
                    }
                    else
                    {
                        dmprnt.WriteL(dataGridView1.Rows[i].Cells[j].Value.ToString(), width);
                    }                    
                }
                dmprnt.LineSpace(1);
            }
            dmprnt.Fim();
        }

        private void dataGridView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                String clkStr = "";
                if (dataGridView1.CurrentCell.Value != null)
                {
                    clkStr = dataGridView1.CurrentCell.Value.ToString();
                }
                if (funs.Select_ac_id(clkStr) != "0" || funs.Select_ac_id(clkStr) != "")
                {
                    Report gg = new Report();
                    gg.Ledger(stdt, endt, clkStr);
                    gg.ShowDialog();
                    e.Handled = true;
                }
                else if (funs.Select_Refineact_id(clkStr.ToString()) != "")
                {
                    Report gg = new Report();
                    gg.SingleGroupedTrial(stdt, endt, clkStr);
                    gg.ShowDialog();
                    e.Handled = true;
                }
                else if (IsDocumentNumber(clkStr) != "")
                {
                    funs.OpenFrm(this, IsDocumentNumber(clkStr),false);
                    e.Handled = true;
                }
            }
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            button3_Click(sender, e);
        }

        private void button7_Click(object sender, EventArgs e)
        {

            

            if (dataGridView1.Rows.Count == 0)
            {
                return;
            }
            
                ExportToPdf2();
                ms.Position = 0;
                string mailto = "";
                if (funs.Select_ac_id(textBox1.Text) != "")
                {
                    mailto = funs.Select_Email(textBox1.Text);
                }
                DataTable dtfirminfo = new DataTable();
                Database.GetSqlData("Select Name,Address1,Address2,Contactno,Email from Company", dtfirminfo);



                string sub = DecsOfReport.Replace("\n"," ");
               // string body = "Please Find Attachment" + "\n" + "\n" + dtfirminfo.Rows[0]["Name"].ToString() + "\n" + dtfirminfo.Rows[0]["Address1"].ToString() + "\n" + dtfirminfo.Rows[0]["Address2"].ToString() + "\n" + dtfirminfo.Rows[0]["ContactNo"].ToString() + "\n" + dtfirminfo.Rows[0]["Email"].ToString();
                string body = "Please Find Attachment" + Environment.NewLine + Environment.NewLine + dtfirminfo.Rows[0]["Name"].ToString() + Environment.NewLine + dtfirminfo.Rows[0]["Address1"].ToString() + Environment.NewLine + dtfirminfo.Rows[0]["Address2"].ToString() + Environment.NewLine + dtfirminfo.Rows[0]["ContactNo"].ToString() + Environment.NewLine + dtfirminfo.Rows[0]["Email"].ToString();
                frm_mailto frm = new frm_mailto(mailto,sub, body, frmptyp + ".pdf");
                frm.ShowDialog();
                mailto = frm.mailto;
                sub = frm.gsub;
             // body = frm.gbody.Replace("\n","");

                body = body + "\n" + "\n" + "Sent via Marwari Software";
                body = body.Replace("\r",""); ;
                DataTable dtemail = new DataTable();
                Database.GetSqlData("Select * from mailer where id=1",dtemail);
                if (dtemail.Rows.Count == 1)
                {
                    if (mailto != "")
                    {
                        try
                        {
                            MailMessage mm = new MailMessage(dtemail.Rows[0]["emailid"].ToString(), mailto)
                        {
                            Subject = sub,
                            IsBodyHtml = true,
                            Body = body
                        };



                            mm.Attachments.Add(new Attachment(ms, frmptyp + ".pdf"));
                            //  mm.Attachments.Add(new Attachment(tPath));
                            SmtpClient smtp = new SmtpClient
                            {
                                Host = dtemail.Rows[0]["smtp"].ToString(),
                                Port = int.Parse( dtemail.Rows[0]["port"].ToString()),
                                EnableSsl = bool.Parse(dtemail.Rows[0]["EnableSsl"].ToString()),
                                Credentials = new NetworkCredential(dtemail.Rows[0]["emailid"].ToString(), dtemail.Rows[0]["password"].ToString())

                            };



                            smtp.Send(mm);
                            MessageBox.Show("Mail Sent Successfully");

                        }
                        catch (Exception ex)
                        {

                            MessageBox.Show("Mail Not Sent Successfully");
                        }
                    }
                }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            if (frmptyp == "GST Report")
            {
                frm_filtergst frm = new frm_filtergst();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.chk1 = this.chk1;
                frm.chk2 = this.chk2;
                frm.chk3 = this.chk3;
                frm.chk4 = this.chk4;
                frm.chk5 = this.chk5;
                frm.chk6 = this.chk6;
                frm.chk7 = this.chk7;
                frm.chk8 = this.chk8;
                frm.rd1 = this.rd1;
                frm.rd2 = this.rd2;
                frm.rd3 = this.rd3;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;

                frm.ShowDialog(this);
                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.chk1 = frm.chk1;
                this.chk2 = frm.chk2;
                this.chk3 = frm.chk3;
                this.chk4 = frm.chk4;
                this.chk5 = frm.chk5;
                this.chk6 = frm.chk6;
                this.chk7 = frm.chk7;

                this.chk8 = frm.chk8;
                this.rd1 = frm.rd1;
                this.rd2 = frm.rd2;
                this.rd3 = frm.rd3;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;


                string str = "";
                string type = "";
                if (frm.rd1 == true)
                {
                    type = "Purchase";
                }
                else if (frm.rd2 == true)
                {
                    type = "Sale";
                }
                else if (frm.rd3 == true)
                {
                    type = "JobWork";
                }
                string rstatus = "";
                string state = "";
                if (type == "Sale")
                {
                    str = " And (Vouchertype.Type='Sale' or Vouchertype.type='Return')";
                    str += " And  (VOUCHERINFO.vdate >=" + access_sql.Hash + frm.dt1.Date.ToString(Database.dformat) + access_sql.Hash + " And VOUCHERINFO.vdate <=" + access_sql.Hash + frm.dt2.Date.ToString(Database.dformat) + access_sql.Hash + "  )";
                }
                else if (type == "Purchase")
                {
                    str = " And (Vouchertype.Type='Purchase' or Vouchertype.type='P Return') ";
                    str += " And  (VOUCHERINFO.vdate >=" + access_sql.Hash + frm.dt1.Date.ToString(Database.dformat) + access_sql.Hash + " And VOUCHERINFO.vdate <=" + access_sql.Hash + frm.dt2.Date.ToString(Database.dformat) + access_sql.Hash + "  )";
                }
                else if (type == "JobWork")
                {
                    str = " And (Vouchertype.Type='JIssue' or Vouchertype.type='JReceive')";
                    str += " And  (VOUCHERINFO.vdate >=" + access_sql.Hash + frm.dt1.Date.ToString(Database.dformat) + access_sql.Hash + " And VOUCHERINFO.vdate <=" + access_sql.Hash + frm.dt2.Date.ToString(Database.dformat) + access_sql.Hash + "  )";
                }

                if (frm.chk4 == true && frm.chk4 == true)
                {
                    state = "All";
                }
                else if (frm.chk4 == true && frm.chk5 == false)
                {
                    state = "Intra State";
                    str += " And State.Sname='" + funs.Select_state_nm(Database.CompanyState_id) + "'";
                }
                else if (frm.chk4 == false && frm.chk5 == true)
                {
                    state = "Inter State";
                    str += " And State.Sname<>'" + funs.Select_state_nm(Database.CompanyState_id) + "'";
                }




                if (frm.chk1 == true && frm.chk2 == false && frm.chk3 == false)
                {

                    str += " And ACCOUNT.RegStatus='Unregistered' ";
                }


                else if (frm.chk1 == false && frm.chk2 == true && frm.chk3 == false)
                {

                    str += " And ACCOUNT.RegStatus='Regular Registration' ";
                }

                else if (frm.chk1 == false && frm.chk2 == false && frm.chk3 == true)
                {

                    str += " And ACCOUNT.RegStatus='Composition Dealer' ";
                }
                else if (frm.chk1 == true && frm.chk2 == true && frm.chk3 == false)
                {


                    str += " And (ACCOUNT.RegStatus='Unregistered' or ACCOUNT.RegStatus='Regular Registration') ";
                }
                else if (frm.chk1 == false && frm.chk2 == true && frm.chk3 == true)
                {


                    str += " And (ACCOUNT.RegStatus='Composition Dealer' or ACCOUNT.RegStatus='Regular Registration') ";
                }
                else if (frm.chk1 == true && frm.chk2 == false && frm.chk3 == true)
                {


                    str += " And (ACCOUNT.RegStatus='Unregistered' or ACCOUNT.RegStatus='Composition Dealer') ";
                }
                else if (frm.chk1 == true && frm.chk2 == true && frm.chk3 == true)
                {


                    str += " And (ACCOUNT.RegStatus='Unregistered' or ACCOUNT.RegStatus='Composition Dealer' or ACCOUNT.RegStatus='Regular Registration') ";
                }


                if (frm.chk6 == true && frm.chk7 == true)
                {


                }

                else if (frm.chk6 == true && frm.chk7 == false)
                {

                    str += " And VOUCHERDET.TotTaxPer<>0 ";
                    // str += " And (ACCOUNT.RegStatus='Unregistered' or ACCOUNT.RegStatus='Composition Dealer' or ACCOUNT.RegStatus='Regular Registration') ";
                }
                else if (frm.chk6 == false && frm.chk7 == true)
                {
                    str += " And VOUCHERDET.TotTaxPer=0 ";
                    // str += " And (ACCOUNT.RegStatus='Unregistered' or ACCOUNT.RegStatus='Composition Dealer' or ACCOUNT.RegStatus='Regular Registration') ";
                }
                else if (frm.chk8 == true)
                {

                    str += " And VOUCHERDET.TotTaxPer=" + frm.Fld2 + " ";

                }


                if (frm.Fld1 != "")
                {
                    if (Feature.Available("GST Reports on ShipTo") == "Yes")
                    {
                        str += " And (VOUCHERINFO.Shipto='" + frm.Fld1 + "') ";

                    }
                    else
                    {
                        str += " And (ACCOUNT.Name='" + frm.Fld1 + "') ";

                    }
                }


                AllGstReport(frm.dt1, frm.dt2, str, type);

            }
            if (frmptyp == "Agent Report" || frmptyp == "Salesman Report")
            {
                frm_rpt frm = new frm_rpt();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.Fld3 = this.Fld3;
                frm.Fld4 = this.Fld4;
                frm.Fld5 = this.Fld5;
                frm.Fld6 = this.Fld6;
                frm.Fld7 = this.Fld7;
                frm.Fld8 = this.Fld8;
                frm.Fld9 = this.Fld9;
                frm.Fld10 = this.Fld10;
                frm.typ = this.gtype;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;
                if (frm.typ == "Agent")
                {
                    frm.frmtext = "Agent";
                }
                else
                {
                    frm.frmtext = "Salesman";
                }
                frm.ShowDialog(this);
                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.Fld3 = frm.Fld3;
                this.Fld4 = frm.Fld4;
                this.Fld5 = frm.Fld5;
                this.Fld6 = frm.Fld6;
                this.Fld7 = frm.Fld7;
                this.Fld8 = frm.Fld8;
                this.Fld9 = frm.Fld9;
                this.Fld10 = frm.Fld10;
                this.gtype = frm.typ;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;
                string sql = "";


                if (this.Fld1 != "")
                {
                    sql += " and ";
                    sql += " Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                }
                if (this.Fld2 != "")
                {
                    sql += " and ";
                    sql += " Company='" + this.Fld2 + "' ";
                }
                if (this.Fld3 != "")
                {
                    sql += " and ";
                    sql += " Item='" + this.Fld3 + "' ";
                }
                if (this.Fld4 != "")
                {
                    sql += " and ";
                    sql += " Color='" + this.Fld4 + "' ";
                }
                if (this.Fld5 != "")
                {
                    sql += " and ";
                    sql += " OrgDescription='" + this.Fld5 + "' ";
                }
                if (this.Fld6 != "")
                {
                    sql += " and ";
                    sql += " Packing='" + this.Fld6 + "' ";
                }
                if (this.Fld7 != "")
                {
                    sql += " and ";
                    sql += " [ACCOUNT.Name]='" + this.Fld7 + "' ";
                }
                if (this.Fld8 != "")
                {
                    sql += " and ";
                    if (this.gtype == "Agent")
                    {
                        sql += " [Agent]='" + this.Fld8 + "' ";
                    }
                    else
                    {
                        sql += " [Salesman]='" + this.Fld8 + "' ";
                    }
                }
                if (this.Fld9 != "")
                {
                    sql += " and ";
                    sql += " RateApp='" + funs.Select_Rates_Id(this.Fld9) + "' ";
                }
                if (this.Fld10 != "")
                {
                    sql += " and ";
                    sql += " Department='" + this.Fld10 + "' ";
                }
                sql += "and " + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;

                AgentSalesmanReport(this.stdt,this.endt, sql, this.gtype);
            }


            else if (frmptyp == "Register")
            {
                sale_register frm = new sale_register();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.Fld3 = this.Fld3;
                frm.Fld4 = this.Fld4;
                frm.Fld5 = this.Fld5;
                frm.Fld6 = this.Fld6;
                frm.Fld7 = this.Fld7;
                frm.Fld8 = this.Fld8;
                frm.Fld9 = this.Fld9;
                frm.typ = this.gtype;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;
                if (frm.typ == "Sale")
                {
                    frm.frmtext = "Sale Register";
                }
                else
                {
                    frm.frmtext = "Purchase Register";
                }
                frm.ShowDialog(this);
                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.Fld3 = frm.Fld3;
                this.Fld4 = frm.Fld4;
                this.Fld5 = frm.Fld5;
                this.Fld6 = frm.Fld6;
                this.Fld7 = frm.Fld7;
                this.Fld8 = frm.Fld8;
                this.Fld9 = frm.Fld9;
                this.gtype = frm.typ;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;
                string sql = "";
                if (this.Fld1 != "")
                {
                    sql += " and ";
                    sql += " Voucherinfo.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                }
                if (this.Fld2 != "")
                {
                    sql += " and ";
                    sql += " Description.Company_id='" + funs.Select_oth_id(this.Fld2) + "' ";
                }
                if (this.Fld3 != "")
                {
                    sql += " and ";
                    sql += " Description.Item_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                }
                if (this.Fld4 != "")
                {
                    sql += " and ";
                    sql += " Description.Col_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                }
                if (this.Fld5 != "")
                {
                    sql += " and ";
                    sql += " Description.Description='" + this.Fld5 + "' ";
                }
                if (this.Fld6 != "")
                {
                    sql += " and ";
                    sql += " Description.Pack='" + this.Fld6 + "' ";
                }
                if (this.Fld7 != "")
                {
                    sql += " and ";
                    sql += " ACCOUNT.Name='" + this.Fld7 + "' ";
                }
                if (this.Fld8 != "")
                {
                    sql += " and ";
                    sql += " ACCOUNT.RateApp='" + funs.Select_Rates_Id(this.Fld8) + "' ";
                }
                sql += "and Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                SalePurchaseRegister(this.stdt, this.endt, sql, gtype, this.Fld9);
            }
            else if (frmptyp == "Item Ledger")
            {


                frm_itemledger frm = new frm_itemledger();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.Fld3 = this.Fld3;
                frm.Fld4 = this.Fld4;
              
                frm.chk1 = this.chk1;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;




                frm.ShowDialog(this);



                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.Fld3 = frm.Fld3;
                this.Fld4 = frm.Fld4;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;
                this.chk1 = frm.chk1;
                string sql = "  ";
                string sql1 = "";



                if (this.Fld1 != "")
                {
                    sql += " and ";
                    sql += " Voucherinfo.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql1 += " and ";
                    sql1 += " Voucherinfo_1.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                }
                if (this.Fld2 != "")
                {

                    sql += " and ";
                    sql1 += " and ";

                    if (funs.Select_ac_id(this.Fld2) == "")
                    {
                        sql += " stock.Godown_id='' ";
                        sql1 += " stock_1.Godown_id='' ";

                    }
                    else
                    {
                        sql += " stock.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql1 += " stock_1.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";

                    }
                }



                if (this.Fld3 != "")
                {
                    sql += " and ";
                    sql += " Description.Description='" + this.Fld3 + "' ";


                    sql1 += " and ";
                    sql1 += " Description_1.Description='" + this.Fld3 + "' ";
                }

                if (this.Fld4 != "")
                {
                    sql += " and ";
                    sql += " Description.Pack='" + this.Fld4 + "' ";

                    sql1 += " and ";
                    sql1 += " Description_1.Pack='" + this.Fld4 + "' ";


                }

                sql += " and ";
                sql += " Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;


                sql1 += " and ";
                sql1 += " Vouchertype_1." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;

                ItemLedger1(this.stdt, this.endt, sql, sql1, this.chk1);
             
            }
            else if (frmptyp == "Stock Valuation")
            {
                Form1 frm = new Form1();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.Fld3 = this.Fld3;
                frm.Fld4 = this.Fld4;
                frm.Fld5 = this.Fld5;
                frm.Fld6 = this.Fld6;
                frm.Fld7 = this.Fld7;
                frm.Fld8 = this.Fld8;
                frm.Fld9 = this.Fld9;
                frm.ReportName = this.gtype;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;

                frm.chk1 = this.chk1;
                frm.chk2 = this.chk2;
                frm.ShowDialog(this);
                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.Fld3 = frm.Fld3;
                this.Fld4 = frm.Fld4;
                this.Fld5 = frm.Fld5;
                this.Fld6 = frm.Fld6;
                this.Fld7 = frm.Fld7;
                this.Fld8 = frm.Fld8;
                this.Fld9 = frm.Fld9;
                this.chk1 = frm.chk1;
                this.chk2 = frm.chk2;
                this.gtype = frm.ReportName;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;

                string sql = "";
                string sql1 = "";
                string sql2 = "";


                if (this.Fld1 != "")
                {
                    sql += " and ";
                    sql += " Voucherinfo.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql1 += " and ";
                    sql1 += " Voucherinfo_1.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql2 += " and ";
                    sql2 += " Voucherinfo_2.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                }
                if (this.Fld2 != "")
                {
                    sql += " and ";
                    sql1 += " and ";
                    sql2 += " and ";
                    if (funs.Select_ac_id(this.Fld2) == "")
                    {
                        sql += " stock.Godown_id='' ";
                        sql1 += " stock_1.Godown_id='' ";
                        sql2 += " stock_2.Godown_id='' ";
                    }
                    else
                    {
                        sql += " stock.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql1 += " stock_1.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql2 += " stock_2.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                    }
                }
                if (this.Fld9 != "")
                {
                    sql += " and ";
                    sql += " Description.Department_id='" + funs.Select_oth_id(this.Fld9) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Department_id='" + funs.Select_oth_id(this.Fld9) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Department_id='" + funs.Select_oth_id(this.Fld9) + "' ";
                }
                if (this.Fld3 != "")
                {
                    sql += " and ";
                    sql += " Description.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                }
                if (this.Fld4 != "")
                {
                    sql += " and ";
                    sql += " Description.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                }
                if (this.Fld5 != "")
                {
                    sql += " and ";
                    sql += " Description.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                }
                if (this.Fld6 != "")
                {
                    sql += " and ";
                    sql += " Description.Pack='" + this.Fld6 + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Pack='" + this.Fld6 + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Pack='" + this.Fld6 + "' ";
                }


                sql += " and ";
                sql += " Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                sql1 += " and ";
                sql1 += " Vouchertype_1." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                sql2 += " and ";
                sql2 += " Vouchertype_2." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                if (grate != "")
                {
                    StockValNew(this.stdt, this.endt, sql, grate);
                }
           

            }



            else if (frmptyp == "Stock Summary Cross")
            {
                Form1 frm = new Form1();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.Fld3 = this.Fld3;
                frm.Fld4 = this.Fld4;
                frm.Fld5 = this.Fld5;
                frm.Fld6 = this.Fld6;
                frm.Fld7 = this.Fld7;
                frm.Fld8 = this.Fld8;

                frm.ReportName = this.gtype;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;

                frm.chk1 = this.chk1;
                frm.chk2 = this.chk2;
                frm.ShowDialog(this);
                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.Fld3 = frm.Fld3;
                this.Fld4 = frm.Fld4;
                this.Fld5 = frm.Fld5;
                this.Fld6 = frm.Fld6;
                this.Fld7 = frm.Fld7;
                this.Fld8 = frm.Fld8;
                this.chk1 = frm.chk1;
                this.chk2 = frm.chk2;
                this.gtype = frm.ReportName;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;

                string sql = "";
                string sql1 = "";
                string sql2 = "";


                if (this.Fld1 != "")
                {
                    sql += " and ";
                    sql += " Voucherinfo.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql1 += " and ";
                    sql1 += " Voucherinfo_1.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql2 += " and ";
                    sql2 += " Voucherinfo_2.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                }
                if (this.Fld2 != "")
                {
                    sql += " and ";
                    sql1 += " and ";
                    sql2 += " and ";
                    if (funs.Select_ac_id(this.Fld2) == "")
                    {
                        sql += " stock.Godown_id='' ";
                        sql1 += " stock_1.Godown_id='' ";
                        sql2 += " stock_2.Godown_id='' ";
                    }
                    else
                    {
                        sql += " stock.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql1 += " stock_1.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql2 += " stock_2.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                    }
                }
                if (this.Fld3 != "")
                {
                    sql += " and ";
                    sql += " Description.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                }
                if (this.Fld4 != "")
                {
                    sql += " and ";
                    sql += " Description.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                }
                if (this.Fld5 != "")
                {
                    sql += " and ";
                    sql += " Description.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                }
                if (this.Fld6 != "")
                {
                    sql += " and ";
                    sql += " Description.Pack='" + this.Fld6 + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Pack='" + this.Fld6 + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Pack='" + this.Fld6 + "' ";
                }


                sql += " and ";
                sql += " Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                sql1 += " and ";
                sql1 += " Vouchertype_1." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                sql2 += " and ";
                sql2 += " Vouchertype_2." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;

                if (chk2 == true)
                {

                    DayWiseReportCross(this.stdt, this.endt, sql, sql2, sql1, this.chk1);
                }
                else
                {
                    DayWiseReport(this.stdt, this.endt, sql, sql2, sql1, this.chk1);
                }
            }

            else if (frmptyp == "Stock Summary")
            {
                Form1 frm = new Form1();
                frm.calledindirect = true;
                frm.Fld1 = this.Fld1;
                frm.Fld2 = this.Fld2;
                frm.Fld3 = this.Fld3;
                frm.Fld4 = this.Fld4;
                frm.Fld5 = this.Fld5;
                frm.Fld6 = this.Fld6;
                frm.Fld7 = this.Fld7;
                frm.Fld8 = this.Fld8;

                frm.ReportName = this.gtype;
                frm.dt1 = this.stdt;
                frm.dt2 = this.endt;

                frm.chk1 = this.chk1;
                frm.chk2 = this.chk2;
                frm.ShowDialog(this);
                this.Fld1 = frm.Fld1;
                this.Fld2 = frm.Fld2;
                this.Fld3 = frm.Fld3;
                this.Fld4 = frm.Fld4;
                this.Fld5 = frm.Fld5;
                this.Fld6 = frm.Fld6;
                this.Fld7 = frm.Fld7;
                this.Fld8 = frm.Fld8;
                this.chk1 = frm.chk1;
                this.chk2 = frm.chk2;
                this.gtype = frm.ReportName;
                this.stdt = frm.dt1;
                this.endt = frm.dt2;

                string sql = "";
                string sql1 = "";
                string sql2 = "";


                if (this.Fld1 != "")
                {
                    sql += " and ";
                    sql += " Voucherinfo.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql1 += " and ";
                    sql1 += " Voucherinfo_1.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                    sql2 += " and ";
                    sql2 += " Voucherinfo_2.Branch_id='" + funs.Select_branch_id(this.Fld1) + "' ";
                }
                if (this.Fld2 != "")
                {
                    sql += " and ";
                    sql1 += " and ";
                    sql2 += " and ";
                    if (funs.Select_ac_id(this.Fld2) == "")
                    {
                        sql += " stock.Godown_id='' ";
                        sql1 += " stock_1.Godown_id='' ";
                        sql2 += " stock_2.Godown_id='' ";
                    }
                    else
                    {
                        sql += " stock.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql1 += " stock_1.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                        sql2 += " stock_2.Godown_id='" + funs.Select_ac_id(this.Fld2) + "' ";
                    }
                }
                if (this.Fld3 != "")
                {
                    sql += " and ";
                    sql += " Description.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Company_id='" + funs.Select_oth_id(this.Fld3) + "' ";
                }
                if (this.Fld4 != "")
                {
                    sql += " and ";
                    sql += " Description.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Item_id='" + funs.Select_oth_id(this.Fld4) + "' ";
                }
                if (this.Fld5 != "")
                {
                    sql += " and ";
                    sql += " Description.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Col_id='" + funs.Select_oth_id(this.Fld5) + "' ";
                }
                if (this.Fld6 != "")
                {
                    sql += " and ";
                    sql += " Description.Pack='" + this.Fld6 + "' ";
                    sql1 += " and ";
                    sql1 += " Description_1.Pack='" + this.Fld6 + "' ";
                    sql2 += " and ";
                    sql2 += " Description_2.Pack='" + this.Fld6 + "' ";
                }


                sql += " and ";
                sql += " Vouchertype." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                sql1 += " and ";
                sql1 += " Vouchertype_1." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                sql2 += " and ";
                sql2 += " Vouchertype_2." + Database.BMode + "=" + access_sql.Singlequote + "true" + access_sql.Singlequote;
                if (chk2 == true)
                {

                    DayWiseReportCross(this.stdt, this.endt, sql, sql2, sql1, this.chk1);
                }
                else
                {
                    DayWiseReport(this.stdt, this.endt, sql, sql2, sql1, this.chk1);
                }

            }


        }
    }
}
